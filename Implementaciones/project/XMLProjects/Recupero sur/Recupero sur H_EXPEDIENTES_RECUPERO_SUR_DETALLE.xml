<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="10/30/2015 1:24:45 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="AMS06X"
  DTS:CreatorName="AMS\nprida"
  DTS:DTSID="{2676A342-4193-4B57-8E72-E5AB46500F33}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="15.0.1301.433"
  DTS:LocaleID="11274"
  DTS:ObjectName="Recupero sur H_EXPEDIENTES_RECUPERO_SUR_DETALLE"
  DTS:PackageType="5"
  DTS:VersionBuild="33"
  DTS:VersionGUID="{CEE4E1EA-1F0A-4388-BC1C-0CF1E7269C82}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:LogProviders>
    <DTS:LogProvider
      DTS:ConfigString="MSDB"
      DTS:CreationName="Microsoft.LogProviderSQLServer"
      DTS:Description="Writes log entries for events to a SQL Server database"
      DTS:DTSID="{00D83938-ABF1-40AA-BC6D-8A094BFF650F}"
      DTS:ObjectName="SSIS log provider for SQL Server">
      <DTS:ObjectData>
        <InnerObject />
      </DTS:ObjectData>
    </DTS:LogProvider>
  </DTS:LogProviders>
  <DTS:Variables />
  <DTS:LoggingOptions
    DTS:FilterKind="0"
    DTS:LoggingMode="1">
    <DTS:Property
      DTS:DataType="8"
      DTS:Name="EventFilter">1,7,OnError</DTS:Property>
    <DTS:Property
      DTS:EventName="OnError"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:SelectedLogProviders>
      <DTS:SelectedLogProvider
        DTS:InstanceID="{00D83938-ABF1-40AA-BC6D-8A094BFF650F}" />
    </DTS:SelectedLogProviders>
  </DTS:LoggingOptions>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Actualiza  H_EXPEDIENTES_RECUPERO_SUR_DETALLE"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{112B57F8-D25A-4B09-8CE9-155E98B1290D}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Actualiza  H_EXPEDIENTES_RECUPERO_SUR_DETALLE"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:LoggingOptions
        DTS:FilterKind="0" />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{8CED489B-B73E-4F82-A8B4-C9B3C27601BB}"
          SQLTask:SqlStatementSource="-- BORRAMOS INFORMACION EXISTENTE&#xA;Truncate table H_EXPEDIENTES_RECUPERO_SUR_DETALLE&#xA;&#xA;-- CARGAMOS NUEVA INFORMACION EN H_expedientes&#xA;INSERT INTO [DW_SALUD].[dbo].[H_EXPEDIENTES_RECUPERO_SUR_DETALLE]&#xA;           ([id_legajo_recupero_sur]&#xA;           ,[id_expediente_recupero_sur]&#xA;           ,[id_estado_expediente_recupero_sur]&#xA;           ,[id_persona]&#xA;           ,[id_producto]&#xA;           ,[id_plan_producto]&#xA;           ,[id_subproducto]&#xA;           ,[id_tipo_legajo_recupero_sur]&#xA;           ,[fecha_presentacion_super_recupero_sur]&#xA;           ,[id_periodo_alta_legajo_recupero_sur]&#xA;           ,[fecha_legajo_recupero_sur]&#xA;           ,[fecha_carga_legajo_recupero_sur]&#xA;           ,[importe_solicitado_a_recuperar_recupero_sur]&#xA;           ,[importe_a_recuperar_recupero_sur]&#xA;           ,[importe_recuperado_recupero_sur]&#xA;           ,[id_usuario_responsable_GDC]&#xA;           ,[id_usuario_responsable_GDM]&#xA;           ,[id_usuario_responsable_GDD]&#xA;           ,[cantidad_requisitos_GDC]&#xA;           ,[cantidad_requisitos_cumplimentados_GDC]&#xA;           ,[cantidad_requisitos_GDM]&#xA;           ,[cantidad_requisitos_cumplimentados_GDM]&#xA;           ,[cantidad_requisitos_GDD]&#xA;           ,[cantidad_requisitos_cumplimentados_GDD]&#xA;           ,[nro_solicitud_recupero_sur]&#xA;           ,[nro_expediente_recupero_sur]&#xA;           ,[id_usuario_carga_legajo_recupero_sur]&#xA;           ,[fecha_pago_recupero_sur]&#xA;           ,[cantidad_expedientes_recupero_sur]&#xA;           ,id_marca_exp_con_requisitos_gdm_pend&#xA;           ,cant_dias_hasta_presentacion_super&#xA;           ,cant_dias_presentacion_pago&#xA;           ,id_marca_pagado_recupero_sur&#xA;           ,cant_dias_cumplimiento_requisitos&#xA;           ,fecha_cumplimiento_ultimo_requisito&#xA;           ,id_marca_presentado_super_recupero_sur&#xA;           ,fecha_expediente_recupero_sur&#xA;           ,id_periodo_pago_recupero_sur&#xA;           ,id_periodo_presentacion_super_recupero_sur&#xA;           ,id_rango_pago_recupero_sur&#xA;           ,id_periodo_alta_expediente_recupero_sur&#xA;           ,id_obra_social&#xA;           ,porcentaje_recupero_os&#xA;           ,importe_estimado_a_recuperar_os&#xA;           ,id_marca_con_importe_solicitado  )&#xA;SELECT&#x9;E.LEG_NRO,&#xA;&#x9;&#x9;E.EXPE_NRO,&#xA;&#x9;&#x9;EST_EXP_COD,&#xA;&#x9;&#x9;0,&#xA;&#x9;&#x9;0,&#xA;&#x9;&#x9;'F/D',&#xA;&#x9;&#x9;0,&#xA;&#x9;&#x9;0,&#xA;&#x9;&#x9;EXPE_FEC_PRE,&#xA;&#x9;&#x9;0,&#xA;&#x9;&#x9;GETDATE(),&#xA;&#x9;&#x9;EXPE_FEC_FEC,&#xA;&#x9;&#x9;EXPE_IMP_SREC,&#xA;&#x9;&#x9;EXPE_IMP_REC,&#xA;&#x9;&#x9;EXPE_IMP,&#xA;&#x9;&#x9;EXPE_USU_GDC,&#xA;&#x9;&#x9;EXPE_USU_GDM,&#xA;&#x9;&#x9;EXPE_USU_GDD,&#xA;&#x9;&#x9;0,&#xA;&#x9;&#x9;0,&#xA;&#x9;&#x9;0,&#xA;&#x9;&#x9;0,&#xA;&#x9;&#x9;0,&#xA;&#x9;&#x9;0,&#xA;&#x9;&#x9;EXPE_NRO_SOL,&#xA;&#x9;&#x9;EXPE_NRO_EXP,&#xA;&#x9;&#x9;EXPE_FEC_USR,&#xA;&#x9;&#x9;EXPE_FEC_PAG,&#xA;&#x9;&#x9;1,&#xA;&#x9;&#x9;0,&#xA;&#x9;&#x9;0,&#xA;&#x9;&#x9;0,&#xA;&#x9;&#x9;0,&#xA;&#x9;&#x9;0,&#xA;&#x9;&#x9;'1900-01-01',&#xA;&#x9;&#x9;0,&#xA;&#x9;&#x9;(CONVERT(DATETIME, CONVERT(DATE, EXPE_FEC_FEC))),&#xA;&#x9;&#x9;0,&#xA;&#x9;&#x9;0,&#xA;&#x9;&#x9;0,&#xA;&#x9;&#x9;0,&#xA;&#x9;&#x9;999999,       --id_obra_social&#xA;&#x9;&#x9;0, -- porcentaje_recupero_os&#xA;&#x9;&#x9;0, -- importe_estimado_a_recuperar_os&#xA;&#x9;&#x9;0  -- id_marca_con_importe_solicitado &#xA;&#xA;FROM&#x9;INTRANET.intranetx.dbo.tsur_exp  E&#xA;inner join   INTRANET.intranetx.dbo.TSUR_EXP_FOR F on F.EXPE_NRO = E.EXPE_NRO and  F.LEG_NRO = E.LEG_NRO&#xA;group by E.LEG_NRO, E.EXPE_NRO, EST_EXP_COD, EXPE_FEC_PRE, EXPE_FEC_FEC, EXPE_IMP_SREC,&#xA;         EXPE_IMP_REC, EXPE_IMP, EXPE_USU_GDC, EXPE_USU_GDM, EXPE_USU_GDD, EXPE_NRO_SOL,&#xA;&#x9;&#x9; EXPE_NRO_EXP, EXPE_FEC_USR,EXPE_FEC_PAG&#xA;&#xA;&#xA;&#xA;-- ACTUALIZAMOS id_persona, id_tipo_legajo, FECHA DE LEGAJO Y FECHA DE CARGA DE LEGAJO&#xA;UPDATE H_EXPEDIENTES_RECUPERO_SUR_DETALLE &#xA;SET id_persona = TSUR.LEG_NPE, id_tipo_legajo_recupero_sur = TSUR.TLE_ID, &#xA;fecha_legajo_recupero_sur = TSUR.LEG_FEC, fecha_carga_legajo_recupero_sur = TSUR.LEG_FEG, id_usuario_carga_legajo_recupero_sur = TSUR.LEG_USU &#xA;FROM INTRANET.intranetx.dbo.tsur_leg TSUR &#xA;INNER JOIN H_EXPEDIENTES_RECUPERO_SUR_DETALLE EX ON (EX.id_legajo_recupero_sur = TSUR.LEG_NRO)&#xA;&#xA;&#xA;-- CALCULAMOS id_periodo&#xA;UPDATE H_EXPEDIENTES_RECUPERO_SUR_DETALLE &#xA;SET id_periodo_alta_legajo_recupero_sur = DW_SALUD.dbo.DevuelvePeriodo(fecha_legajo_recupero_sur)&#xA;&#xA;UPDATE H_EXPEDIENTES_RECUPERO_SUR_DETALLE &#xA;SET id_periodo_alta_expediente_recupero_sur = DW_SALUD.dbo.DevuelvePeriodo(fecha_expediente_recupero_sur)&#xA;&#xA;-- ACTUALIZAMOS id_producto, subproducto Y PLAN&#xA;&#xA;---- Script Cruza la tabla H_EXPEDIENTES_RECUPERO_SUR_DETALLE con INTRANET para sacar la minima fecha para el agrupado de legajo y expediente.&#xA;select  id_legajo_recupero_sur, id_expediente_recupero_sur, MIN(exp_for_fec) as exp_for_fec &#xA;into #temp_exp_for_fec&#xA;from  H_EXPEDIENTES_RECUPERO_SUR_DETALLE H &#xA; inner join INTRANET.intranetx.dbo.tsur_exp_for A ON A.leg_nro = H.id_legajo_recupero_sur and A.expe_nro = id_expediente_recupero_sur&#xA;group by id_legajo_recupero_sur, id_expediente_recupero_sur&#xA;order by id_legajo_recupero_sur, id_expediente_recupero_sur, exp_for_fec&#xA;&#xA;----- Luego utiliza los casos anteriores para buscar el menor pre_ped ( por si existen varios con la misma fecha minima)&#xA;&#xA;select  A.leg_nro, A.expe_nro, A.exp_for_fec, min(A.pre_ped) as pre_ped, pre_pos&#xA;into #Temp_tsur_exp_for&#xA; from INTRANET.intranetx.dbo.tsur_exp_for  A&#xA; inner join #temp_exp_for_fec T ON T.id_legajo_recupero_sur = A.leg_nro and A.expe_nro = T.id_expediente_recupero_sur &#xA;                                and T.exp_for_fec = A.exp_for_fec &#xA;group by A.leg_nro, A.expe_nro, A.exp_for_fec, A.pre_pos&#xA;order by A.leg_nro, A.expe_nro, A.exp_for_fec&#xA;&#xA;---- Consulta si existe la tabla,  en caso de que exista  elimina la tabla temporal para poder generala con el open query&#xA;&#xA;if exists (SELECT * FROM sysobjects WHERE name = 'TEMP_O01FMOR ') begin drop table dw_salud.dbo.TEMP_O01FMOR end&#xA;&#xA;---- se declaran las variables.&#xA;&#xA;SET DATEFORMAT 'YMD'&#xA;DECLARE @OPENQUERY nvarchar(4000),&#xA;&#x9;&#x9;@TSQL nvarchar(4000), &#xA;&#x9;&#x9;@Servidor nvarchar(4000),&#xA;&#x9;&#x9;@Query nvarchar(4000),&#xA;&#x9;&#x9;@FechaMin CHAR(8)&#xA;&#xA;&#x9;--Set @FechaMin = (SELECT dbo.Devuelve_Fecha(dbo.Periodo4MesesAtras(Max(id_fecha))) &#xA;&#x9;--&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;FROM  DW_Salud.dbo.D_FECHA )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Set @FechaMin = (20120101)&#xA;---- Se Genera la Temporal &#xA;&#xA;&#x9;SET @Servidor = 'HOST03'  &#xA;&#x9;&#x9;SET @OPENQUERY = 'SELECT * INTO dw_salud.dbo.TEMP_O01FMOR FROM OPENQUERY('+ @Servidor + ',''' &#xA;&#x9;&#x9;SET @TSQL = 'SELECT OW1PLA, OW1PRO, OW1SPR, OW1POS, OW1NRP FROM SMPORDD.O01FMOR  WHERE OW1FPR &gt;= '+ @FechaMin +''')'&#xA;&#x9;&#x9;SET @Query = @OPENQUERY+@TSQL&#xA;&#x9;&#x9;EXEC (@Query)&#xA;&#x9;&#x9;&#xA;----- Cruza la información de INTRANET con As400&#xA;&#xA;select OW1PLA, OW1PRO, OW1SPR, T.leg_nro, T.expe_nro &#xA;into #as400_O01FMOR1&#xA;from TEMP_O01FMOR  A&#xA;inner join #Temp_tsur_exp_for T ON A.OW1POS = T.pre_pos and T.pre_ped = A.OW1NRP&#xA;&#xA;----- Actualiza el id_plan_producto, id_producto e id_subproducto en H_EXPEDIENTES_RECUPERO_SUR_DETALLE&#xA;&#xA;UPDATE H_EXPEDIENTES_RECUPERO_SUR_DETALLE SET id_plan_producto = OW1PLA&#xA;, id_producto = OW1PRO , id_subproducto = OW1SPR&#xA;from H_EXPEDIENTES_RECUPERO_SUR_DETALLE H&#xA;inner join #as400_O01FMOR1 A ON A.leg_nro = H.id_legajo_recupero_sur and &#xA;A.expe_nro = H.id_expediente_recupero_sur&#xA;&#xA;----- Elimina los registros con producto GRAV ( 1 AMS y 43 STAFF ) que además tienen Estado 5:FINALIZADO SIN PRESENTAR                          &#xA;&#xA;Delete &#xA;from  H_EXPEDIENTES_RECUPERO_SUR_DETALLE where id_producto in (1, 43)&#xA;and id_estado_expediente_recupero_sur = 5&#xA;&#xA;&#xA;/* Actualización OSPEGAP de id_plan_producto, id_producto e id_subproducto */&#xA;&#xA;--- Sólo para estos casos de usuario GDM HELIOS se debe buscar producto, subproducto&#xA;--- y plan en el stock del mes de alta de legajo &#xA;&#xA;UPDATE H_EXPEDIENTES_RECUPERO_SUR_DETALLE &#xA;set id_producto = stk.id_producto,&#xA;id_plan_producto = stk.id_plan_producto, &#xA;id_subproducto = stk.id_subproducto&#xA;from H_EXPEDIENTES_RECUPERO_SUR_DETALLE REC &#xA;INNER JOIN H_COMER_STOCK_AFILIA STK ON (STK.id_persona = REC.id_persona AND&#xA;REC.id_periodo_alta_legajo_recupero_sur = STK.id_periodo)&#xA;where id_usuario_responsable_GDM = 'HELIOS' &#xA;&#xA;---si no encuentra afiliacion para usuario HELIOS en el mes de alta del legajo entonces&#xA;---ir a buscar la persona en algun mes de stock&#xA;&#xA;UPDATE H_EXPEDIENTES_RECUPERO_SUR_DETALLE &#xA;SET id_producto = stk.id_producto,&#xA;id_plan_producto = stk.id_plan_producto, &#xA;id_subproducto = stk.id_subproducto&#xA;FROM H_EXPEDIENTES_RECUPERO_SUR_DETALLE REC &#xA;INNER JOIN H_COMER_STOCK_AFILIA STK ON (STK.id_persona = REC.id_persona)&#xA;where id_usuario_responsable_GDM = 'HELIOS' AND REC.id_producto = 0&#xA;&#xA;&#xA;-------------------------------------------------------------------------------------------------------------&#xA;-- ACTUALIZAMOS cantidad_requisitos_GDC &#xA;SELECT EX.id_legajo_recupero_sur, EX.id_expediente_recupero_sur, COUNT(REQ.EXPE_NRO) AS Cantidad &#xA;into #temporal_GDC&#xA;FROM H_EXPEDIENTES_RECUPERO_SUR_DETALLE EX&#xA;INNER JOIN INTRANET.intranetx.dbo.tsur_pre_req REQ ON (EX.id_legajo_recupero_sur=REQ.LEG_NRO AND EX.id_expediente_recupero_sur=REQ.EXPE_NRO)&#xA;WHERE REQ.tge_cod = 'GDC'&#xA;GROUP BY EX.id_legajo_recupero_sur, EX.id_expediente_recupero_sur&#xA;&#xA;UPDATE H_EXPEDIENTES_RECUPERO_SUR_DETALLE &#xA;SET cantidad_requisitos_GDC = T.Cantidad&#xA;FROM #temporal_GDC T &#xA;INNER JOIN H_EXPEDIENTES_RECUPERO_SUR_DETALLE H ON (T.id_legajo_recupero_sur=H.id_legajo_recupero_sur AND T.id_expediente_recupero_sur=H.id_expediente_recupero_sur)&#xA;&#xA;DROP TABLE #temporal_GDC&#xA;&#xA;-- ACTUALIZAMOS cantidad_requisitos_GDC CUMPLIMENTADOS &#xA;SELECT EX.id_legajo_recupero_sur, EX.id_expediente_recupero_sur, COUNT(REQ.EXPE_NRO) AS Cantidad &#xA;INTO #temporal_GDC_CUM&#xA;FROM H_EXPEDIENTES_RECUPERO_SUR_DETALLE EX&#xA;INNER JOIN INTRANET.intranetx.dbo.tsur_pre_req REQ ON (EX.id_legajo_recupero_sur=REQ.LEG_NRO AND EX.id_expediente_recupero_sur=REQ.EXPE_NRO)&#xA;WHERE REQ.tge_cod = 'GDC' AND REQ.PREREQ_CUM = 'S'&#xA;GROUP BY EX.id_legajo_recupero_sur, EX.id_expediente_recupero_sur&#xA;&#xA;UPDATE H_EXPEDIENTES_RECUPERO_SUR_DETALLE &#xA;SET cantidad_requisitos_cumplimentados_GDC = T.Cantidad&#xA;FROM #temporal_GDC_CUM T &#xA;INNER JOIN H_EXPEDIENTES_RECUPERO_SUR_DETALLE H ON (T.id_legajo_recupero_sur=H.id_legajo_recupero_sur AND T.id_expediente_recupero_sur=H.id_expediente_recupero_sur)&#xA;&#xA;DROP TABLE #temporal_GDC_CUM&#xA;&#xA;-------------------------------------------------------------------------------------------------------------&#xA;&#xA;-- ACTUALIZAMOS cantidad_requisitos_GDM &#xA;SELECT EX.id_legajo_recupero_sur, EX.id_expediente_recupero_sur, COUNT(REQ.EXPE_NRO) AS Cantidad &#xA;INTO #temporal_GDM&#xA;FROM H_EXPEDIENTES_RECUPERO_SUR_DETALLE EX&#xA;INNER JOIN INTRANET.intranetx.dbo.tsur_pre_req REQ ON (EX.id_legajo_recupero_sur=REQ.LEG_NRO AND EX.id_expediente_recupero_sur=REQ.EXPE_NRO)&#xA;WHERE REQ.tge_cod = 'GDM'&#xA;GROUP BY EX.id_legajo_recupero_sur, EX.id_expediente_recupero_sur&#xA;&#xA;UPDATE H_EXPEDIENTES_RECUPERO_SUR_DETALLE &#xA;SET cantidad_requisitos_GDM = T.Cantidad&#xA;FROM #temporal_GDM T &#xA;INNER JOIN H_EXPEDIENTES_RECUPERO_SUR_DETALLE H ON (T.id_legajo_recupero_sur=H.id_legajo_recupero_sur AND T.id_expediente_recupero_sur=H.id_expediente_recupero_sur)&#xA;&#xA;DROP TABLE #temporal_GDM&#xA;&#xA;-- ACTUALIZAMOS cantidad_requisitos_GDM CUMPLIMENTADOS&#xA;SELECT EX.id_legajo_recupero_sur, EX.id_expediente_recupero_sur, COUNT(REQ.EXPE_NRO) AS Cantidad &#xA;INTO #temporal_GDM_CUM&#xA;FROM H_EXPEDIENTES_RECUPERO_SUR_DETALLE EX&#xA;INNER JOIN INTRANET.intranetx.dbo.tsur_pre_req REQ ON (EX.id_legajo_recupero_sur=REQ.LEG_NRO AND EX.id_expediente_recupero_sur=REQ.EXPE_NRO)&#xA;WHERE REQ.tge_cod = 'GDM' AND REQ.PREREQ_CUM = 'S'&#xA;GROUP BY EX.id_legajo_recupero_sur, EX.id_expediente_recupero_sur&#xA;&#xA;UPDATE H_EXPEDIENTES_RECUPERO_SUR_DETALLE &#xA;SET cantidad_requisitos_cumplimentados_GDM = T.Cantidad&#xA;FROM #temporal_GDM_CUM T &#xA;INNER JOIN H_EXPEDIENTES_RECUPERO_SUR_DETALLE H ON (T.id_legajo_recupero_sur=H.id_legajo_recupero_sur AND T.id_expediente_recupero_sur=H.id_expediente_recupero_sur)&#xA;&#xA;DROP TABLE #temporal_GDM_CUM&#xA;&#xA;-------------------------------------------------------------------------------------------------------------&#xA;&#xA;-- ACTUALIZAMOS cantidad_requisitos_GDD&#xA;SELECT EX.id_legajo_recupero_sur, EX.id_expediente_recupero_sur, COUNT(REQ.EXPE_NRO) AS Cantidad &#xA;INTO #temporal_GDD&#xA;FROM H_EXPEDIENTES_RECUPERO_SUR_DETALLE EX&#xA;INNER JOIN INTRANET.intranetx.dbo.tsur_pre_req REQ ON (EX.id_legajo_recupero_sur=REQ.LEG_NRO AND EX.id_expediente_recupero_sur=REQ.EXPE_NRO)&#xA;WHERE REQ.tge_cod = 'GDD'&#xA;GROUP BY EX.id_legajo_recupero_sur, EX.id_expediente_recupero_sur&#xA;&#xA;UPDATE H_EXPEDIENTES_RECUPERO_SUR_DETALLE &#xA;SET cantidad_requisitos_GDD = T.Cantidad&#xA;FROM #temporal_GDD T &#xA;INNER JOIN H_EXPEDIENTES_RECUPERO_SUR_DETALLE H ON (T.id_legajo_recupero_sur=H.id_legajo_recupero_sur AND T.id_expediente_recupero_sur=H.id_expediente_recupero_sur)&#xA;&#xA;DROP TABLE #temporal_GDD&#xA;&#xA;-- ACTUALIZAMOS cantidad_requisitos_GDD CUMPLIMENTADOS&#xA;SELECT EX.id_legajo_recupero_sur, EX.id_expediente_recupero_sur, COUNT(REQ.EXPE_NRO) AS Cantidad &#xA;INTO #temporal_GDD_CUM&#xA;FROM H_EXPEDIENTES_RECUPERO_SUR_DETALLE EX&#xA;INNER JOIN INTRANET.intranetx.dbo.tsur_pre_req REQ ON (EX.id_legajo_recupero_sur=REQ.LEG_NRO AND EX.id_expediente_recupero_sur=REQ.EXPE_NRO)&#xA;WHERE REQ.tge_cod = 'GDD' AND REQ.PREREQ_CUM = 'S'&#xA;GROUP BY EX.id_legajo_recupero_sur, EX.id_expediente_recupero_sur&#xA;&#xA;UPDATE H_EXPEDIENTES_RECUPERO_SUR_DETALLE &#xA;SET cantidad_requisitos_cumplimentados_GDD = T.Cantidad&#xA;FROM #temporal_GDD_CUM T &#xA;INNER JOIN H_EXPEDIENTES_RECUPERO_SUR_DETALLE H ON (T.id_legajo_recupero_sur=H.id_legajo_recupero_sur AND T.id_expediente_recupero_sur=H.id_expediente_recupero_sur)&#xA;&#xA;DROP TABLE #temporal_GDD_CUM&#xA;&#xA;&#xA;-- ACTUALIZAMOS FECHA ERRONEA&#xA;UPDATE H_EXPEDIENTES_RECUPERO_SUR_DETALLE &#xA;SET fecha_pago_recupero_sur = CAST('1900-01-01' AS DATE)&#xA;WHERE fecha_pago_recupero_sur = CAST('1753-01-01' AS DATE)&#xA;&#xA;UPDATE H_EXPEDIENTES_RECUPERO_SUR_DETALLE &#xA;SET fecha_presentacion_super_recupero_sur = CAST('1900-01-01' AS DATE)&#xA;WHERE fecha_presentacion_super_recupero_sur = CAST('1753-01-01' AS DATE)&#xA;&#xA;&#xA;-- CONSISTENCIA SOBRE LOS REQUISITOS. &#xA;-- SELECCIONO EL ID DE LEGAJO, SU EXPEDIENTE MINIMO Y LO METO EN LA TABLA TEMPORAL PARA LUEGO OBTENER LOS REQUISITOS.&#xA;SELECT id_legajo_recupero_sur, MIN(id_expediente_recupero_sur) id_expediente_recupero_sur&#xA;INTO #TEMP_ID&#xA;FROM H_EXPEDIENTES_RECUPERO_SUR_DETALLE&#xA;WHERE id_tipo_legajo_recupero_sur = 1&#xA;GROUP BY id_legajo_recupero_sur&#xA;&#xA;&#xA;-- SE ESTABLECEN EN 0 TODOS LOS REQUISITOS QUE NO CORRESPONDAN CON LA TABLA TEMPORAL.&#xA;-- ES DECIR, LOS QUE NO SON EXPEDIENTES MINIMOS.&#xA;UPDATE H_EXPEDIENTES_RECUPERO_SUR_DETALLE &#xA;SET cantidad_requisitos_GDM = 0, &#xA;&#x9;cantidad_requisitos_cumplimentados_GDM = 0&#xA;FROM H_EXPEDIENTES_RECUPERO_SUR_DETALLE H&#xA;WHERE NOT EXISTS (SELECT id_legajo_recupero_sur,id_expediente_recupero_sur &#xA;&#x9;&#x9;&#x9;&#x9;FROM #TEMP_ID T &#xA;&#x9;&#x9;&#x9;&#x9;WHERE H.id_legajo_recupero_sur = T.id_legajo_recupero_sur AND&#xA;&#x9;&#x9;&#x9;&#x9;H.id_expediente_recupero_sur = T.id_expediente_recupero_sur) &#xA;&#x9;AND id_tipo_legajo_recupero_sur = 1&#xA;&#xA;DROP TABLE #TEMP_ID&#x9;&#xA;&#xA;--- Marcar los expedientes que tienen requisitos GDM pendientes aun&#xA;&#xA;UPDATE H_EXPEDIENTES_RECUPERO_SUR_DETALLE&#xA;SET id_marca_exp_con_requisitos_gdm_pend = 1&#xA;where (cantidad_requisitos_GDM - cantidad_requisitos_cumplimentados_GDM) &gt; 0&#x9;&#xA;&#xA;-- Se ingresa 1  en id_marca_pagado_recupero_sur si el importe recuperado &gt; 0&#xA;&#xA;UPDATE H_EXPEDIENTES_RECUPERO_SUR_DETALLE&#xA;SET id_marca_pagado_recupero_sur = 1&#xA;WHERE importe_recuperado_recupero_sur &gt; 0&#xA;&#xA;&#xA;/* PARA LA CANTIDAD DE DIAS HASTA LA FECHA DE PRESENTACION A LA SUPER = FECHA EXPEDIENTE - FECHA PRESENTACION SUPER */&#xA;&#xA;UPDATE H_EXPEDIENTES_RECUPERO_SUR_DETALLE&#xA;SET cant_dias_hasta_presentacion_super = DATEDIFF(DAY, fecha_expediente_recupero_sur, fecha_presentacion_super_recupero_sur)&#xA;FROM H_EXPEDIENTES_RECUPERO_SUR_DETALLE&#xA;WHERE fecha_presentacion_super_recupero_sur NOT IN ('1900-01-01')&#xA;&#xA;/* Si aún no se presentaron a la super, se establece la diferencia entre la fecha del expediente y la fecha actual  */&#xA;&#xA;UPDATE H_EXPEDIENTES_RECUPERO_SUR_DETALLE&#xA;SET cant_dias_hasta_presentacion_super = DATEDIFF(DAY, fecha_expediente_recupero_sur, GETDATE())&#xA;FROM H_EXPEDIENTES_RECUPERO_SUR_DETALLE&#xA;WHERE fecha_presentacion_super_recupero_sur IN ('1900-01-01')&#xA;&#xA;&#xA;/* PARA LA CANTIDAD DE DIAS HASTA LA FECHA DE PRESENTACION DEL PAGO = FECHA PAGO LEGAJO - FECHA PRESENTACION SUPER */&#xA;&#xA;UPDATE H_EXPEDIENTES_RECUPERO_SUR_DETALLE&#xA;SET cant_dias_presentacion_pago = DATEDIFF(DAY, fecha_presentacion_super_recupero_sur, fecha_pago_recupero_sur)&#xA;FROM H_EXPEDIENTES_RECUPERO_SUR_DETALLE&#xA;WHERE fecha_pago_recupero_sur NOT IN ('1900-01-01')&#xA;&#xA;&#xA;/* Actualizo fecha_cumplimiento_ultimo_requisito en H_EXPEDIENTES_RECUPERO_SUR_DETALLE&#xA; con la ultima fecha de cada expediente de la tabla tsur_pre_req */&#xA; &#xA;SELECT EXPE_NRO AS id_exp, MAX(PREREQ_FEC) AS ultima_fecha_req&#xA;INTO #TEMP_REQ&#xA;FROM INTRANET.intranetx.dbo.tsur_pre_req R &#xA;INNER JOIN H_EXPEDIENTES_RECUPERO_SUR_DETALLE H ON (H.id_expediente_recupero_sur=R.EXPE_NRO)&#xA;WHERE H.id_marca_exp_con_requisitos_gdm_pend = 0 &#xA;AND H.cantidad_requisitos_GDM NOT IN(0) &#xA;AND H.cantidad_requisitos_cumplimentados_GDM NOT IN (0) &#xA;AND R.TGE_COD = 'GDM'&#xA;GROUP BY EXPE_NRO&#xA;&#xA;UPDATE H_EXPEDIENTES_RECUPERO_SUR_DETALLE&#xA;SET fecha_cumplimiento_ultimo_requisito = T.ultima_fecha_req&#xA;FROM #TEMP_REQ T&#xA;INNER JOIN H_EXPEDIENTES_RECUPERO_SUR_DETALLE H ON (T.id_exp=H.id_expediente_recupero_sur)&#xA;DROP TABLE #TEMP_REQ&#xA;&#xA;&#xA;/* Actualizo id_marca_presentado_super_recupero_sur = 1 si fue presentado a la super  */&#xA;&#xA;UPDATE H_EXPEDIENTES_RECUPERO_SUR_DETALLE&#xA;SET id_marca_presentado_super_recupero_sur = 1&#xA;WHERE fecha_presentacion_super_recupero_sur NOT IN ('1900-01-01')&#xA;&#xA;&#xA;/* Calculo periodo correspondiente, a partir de la fecha de pago.&#xA;Actualizo id_periodo_pago_recupero_sur */&#xA;&#xA;UPDATE H_EXPEDIENTES_RECUPERO_SUR_DETALLE&#xA;SET id_periodo_pago_recupero_sur = DATEPART(YEAR,fecha_pago_recupero_sur)*100 + DATEPART(MONTH,fecha_pago_recupero_sur) &#xA;WHERE fecha_pago_recupero_sur NOT IN ('1900-01-01')&#xA;&#xA;/* Calculo periodo correspondiente, a partir de la fecha de presentacion a la super.&#xA;Actualizo id_periodo_prestacion_super_recupero_sur */&#xA;&#xA;UPDATE H_EXPEDIENTES_RECUPERO_SUR_DETALLE&#xA;SET id_periodo_presentacion_super_recupero_sur = DATEPART(YEAR,fecha_presentacion_super_recupero_sur)*100 + DATEPART(MONTH,fecha_presentacion_super_recupero_sur) &#xA;WHERE fecha_presentacion_super_recupero_sur NOT IN ('1900-01-01')&#xA;&#xA;&#xA;/* Se establece cant_dias_cumplimiento_requisitos con la diferencia entre fecha_expediente_recupero_sur hasta fecha_cumplimiento_ultimo_requisito  */&#xA;&#xA;UPDATE H_EXPEDIENTES_RECUPERO_SUR_DETALLE&#xA;SET cant_dias_cumplimiento_requisitos = DATEDIFF(DAY, fecha_expediente_recupero_sur, fecha_cumplimiento_ultimo_requisito)&#xA;WHERE fecha_cumplimiento_ultimo_requisito NOT IN ('1900-01-01')&#xA;&#xA;&#xA;/* Si aún no se cumplieron todos los requisitos, se establece la diferencia entre la fecha del expediente y la fecha actual  */&#xA;&#xA;UPDATE H_EXPEDIENTES_RECUPERO_SUR_DETALLE&#xA;SET cant_dias_cumplimiento_requisitos = DATEDIFF(DAY, fecha_expediente_recupero_sur, GETDATE())&#xA;WHERE fecha_cumplimiento_ultimo_requisito IN ('1900-01-01')&#xA;&#xA;&#xA;/* Calculo los rangos de acuerdo a los dias de presentacion del pago con la tabla D_RANGOS_PAGO_RECUPERO_SUR */&#xA;&#xA;UPDATE H_EXPEDIENTES_RECUPERO_SUR_DETALLE&#xA;    SET id_rango_pago_recupero_sur = &#xA;      CASE &#xA;         WHEN cant_dias_presentacion_pago &lt;=  10 THEN 1&#xA;         WHEN cant_dias_presentacion_pago &gt; 10 AND cant_dias_presentacion_pago &lt;= 20 THEN 2&#xA;         WHEN cant_dias_presentacion_pago &gt; 20 AND cant_dias_presentacion_pago &lt;= 30 THEN 3&#xA;         WHEN cant_dias_presentacion_pago &gt; 30 AND cant_dias_presentacion_pago &lt;= 40 THEN 4&#xA;         WHEN cant_dias_presentacion_pago &gt; 40 AND cant_dias_presentacion_pago &lt;= 50 THEN 5&#xA;         WHEN cant_dias_presentacion_pago &gt; 50 AND cant_dias_presentacion_pago &lt;= 60 THEN 6&#xA;         WHEN cant_dias_presentacion_pago &gt; 60 AND cant_dias_presentacion_pago &lt;= 70 THEN 7&#xA;         WHEN cant_dias_presentacion_pago &gt; 70 AND cant_dias_presentacion_pago &lt;= 80 THEN 8&#xA;         WHEN cant_dias_presentacion_pago &gt; 80 AND cant_dias_presentacion_pago &lt;= 90 THEN 9&#xA;         WHEN cant_dias_presentacion_pago &gt; 90 AND cant_dias_presentacion_pago &lt;= 100 THEN 10&#xA;         WHEN cant_dias_presentacion_pago &gt; 100 AND cant_dias_presentacion_pago &lt;= 150 THEN 11&#xA;         WHEN cant_dias_presentacion_pago &gt; 150 AND cant_dias_presentacion_pago &lt;= 200 THEN 12&#xA;         WHEN cant_dias_presentacion_pago &gt; 200 AND cant_dias_presentacion_pago &lt;= 250 THEN 13&#xA;         WHEN cant_dias_presentacion_pago &gt; 250 AND cant_dias_presentacion_pago &lt;= 300 THEN 14&#xA;         WHEN cant_dias_presentacion_pago &gt; 300 THEN 15&#xA;      END&#xA;FROM H_EXPEDIENTES_RECUPERO_SUR_DETALLE&#xA;&#xA;/* Actualizar campo Monto_Adeudado_por_SUR, para los casos que están en Analisis se debe mostrar el importe a recuperar */&#xA;/* Para el resto el importe_solicitado_a_recuperar_recupero_sur                                                                                                  */&#xA;&#xA;update H_EXPEDIENTES_RECUPERO_SUR_DETALLE&#xA;set monto_adeudado_por_SUR = importe_a_recuperar_recupero_sur&#xA;where id_estado_expediente_recupero_sur = 7&#xA;&#xA;update H_EXPEDIENTES_RECUPERO_SUR_DETALLE&#xA;set monto_adeudado_por_SUR = importe_solicitado_a_recuperar_recupero_sur&#xA;where id_estado_expediente_recupero_sur &lt;&gt; 7&#xA;&#xA;--Mandar mail cuando hay una combinacion de producto/subproducto que no existe en la tabla de obras sociales&#xA;&#xA;IF (SELECT (COUNT(id_producto) + COUNT(id_subproducto)) from H_EXPEDIENTES_RECUPERO_SUR_DETALLE where not exists (SELECT id_producto, id_subproducto from &#xA;&#x9;trans_d_subproductos_os  )) &lt;&gt; 0&#xA;&#xA;begin &#xA;&#x9;EXEC msdb.dbo.sp_send_dbmail&#xA;&#x9;&#x9;&#x9;&#x9;@profile_name = 'Soporte Microstrategy',&#xA;&#x9;&#x9;&#x9;&#x9;@recipients = 'matias.paludi@sancorsalud.com.ar ; liliana.alassia@sancorsalud.com.ar; juanfrancisco.trinchieri@sancorsalud.com.ar',&#xA;&#x9;&#x9;&#x9;&#x9;@subject = 'Nueva obra social',&#xA;&#x9;&#x9;&#x9;&#x9;@body = 'Hay una nueva combinacion de producto/subproducto que no corresponde a ninguna obra social',&#xA;&#x9;&#x9;&#x9;&#x9;@query = 'SELECT id_producto, id_subproducto from H_EXPEDIENTES_RECUPERO_SUR_DETALLE where not exists (SELECT id_producto, id_subproducto from &#xA;&#x9;trans_d_subproductos_os  )',&#xA;&#x9;&#x9;&#x9;&#x9;@query_result_separator = '|',&#xA;&#x9;&#x9;&#x9;&#x9;@execute_query_database = 'DW_SALUD';&#xA;end&#xA;&#xA;&#xA;&#xA;-- Actualiza la obra social a travez del producto y del subproducto&#xA;update H_EXPEDIENTES_RECUPERO_SUR_DETALLE&#xA;set id_obra_social = t.id_obra_social&#xA;from H_EXPEDIENTES_RECUPERO_SUR_DETALLE h &#xA;&#x9;inner join trans_d_subproductos_os t on t.id_producto = h.id_producto and t.id_subproducto = h.id_subproducto&#xA;&#xA;&#xA;--Actualiza el importe y el porcentaje de recupero por cada obra social&#xA;drop table Tporcentaje_RECUPERO_SUR&#xA;--Declara el primer y el ultimo periodo  tomado&#xA;DECLARE @id_periodo_consumO_desde int&#xA;SET @id_periodo_consumO_desde = dbo.PeriodosAnteriores((select max(id_periodo_presentacion_super_recupero_sur) from H_EXPEDIENTES_RECUPERO_SUR_DETALLE),24)&#xA;DECLARE @id_periodo_consumO_hasta int&#xA;SET @id_periodo_consumO_hasta = (select max(id_periodo_presentacion_super_recupero_sur) from H_EXPEDIENTES_RECUPERO_SUR_DETALLE) &#xA;&#xA;--Calcula el porcentaje de recuperado sobre solicitado por periodo de presentacion&#xA;SELECT sum(importe_recuperado_recupero_sur) * 100 /sum(importe_solicitado_a_recuperar_recupero_sur) as porcentaje_recupero_os, id_periodo_presentacion_super_recupero_sur&#xA;INTO #Tporcentaje_RECUPERO_SUR&#xA;FROM H_EXPEDIENTES_RECUPERO_SUR_DETALLE h inner join D_OBRAS_SOCIALES d on d.id_obra_social = h.id_obra_social where d.id_con_gestion_recupero_sur = 1&#xA;and id_periodo_presentacion_super_recupero_sur &gt;= @id_periodo_consumO_desde and id_periodo_presentacion_super_recupero_sur &lt;=@id_periodo_consumO_hasta &#xA;&#x9;and  id_estado_expediente_recupero_sur &lt;&gt; 14 and importe_solicitado_a_recuperar_recupero_sur &lt;&gt; 0 &#xA;GROUP BY  id_periodo_presentacion_super_recupero_sur&#xA;ORDER BY id_periodo_presentacion_super_recupero_sur&#xA;&#xA;--Declara los periodos hasta donde se calcula el porcentaje y desde donde se empieza a calcular el estimado&#xA;-- Se empieza a estimar desde donde el porcentaje recuperado es &gt; al 50&#xA;DECLARE @id_periodo_hasta int&#xA;SET @id_periodo_hasta = (select max(id_periodo_presentacion_super_recupero_sur)from #Tporcentaje_RECUPERO_SUR where porcentaje_recupero_os &gt; 50)&#xA;DECLARE @id_periodo_desde int&#xA;SET @id_periodo_desde = dbo.PeriodosAnteriores(@id_periodo_hasta,12)&#xA;&#xA;-- Se calcula por obra social el porcentaje estimado&#xA;SELECT  id_obra_social, sum(importe_recuperado_recupero_sur) * 100 /sum(importe_solicitado_a_recuperar_recupero_sur) as porcentaje_recupero_os&#xA;INTO Tporcentaje_RECUPERO_SUR&#xA;FROM H_EXPEDIENTES_RECUPERO_SUR_DETALLE &#xA;WHERE id_periodo_presentacion_super_recupero_sur &gt;= @id_periodo_desde and id_periodo_presentacion_super_recupero_sur &lt;=@id_periodo_hasta &#xA;&#x9;and  id_estado_expediente_recupero_sur &lt;&gt; 14 and importe_solicitado_a_recuperar_recupero_sur &lt;&gt; 0&#xA;group by  id_obra_social&#xA;order by id_obra_social&#xA;&#xA;-- Se pega el porcentaje y el importe estimado&#xA;UPDATE H_EXPEDIENTES_RECUPERO_SUR_DETALLE&#xA;SET porcentaje_recupero_os = t.porcentaje_recupero_os,&#xA;&#x9;importe_estimado_a_recuperar_os = t.porcentaje_recupero_os * importe_solicitado_a_recuperar_recupero_sur / 100&#xA;FROM H_EXPEDIENTES_RECUPERO_SUR_DETALLE h&#xA;INNER JOIN Tporcentaje_RECUPERO_SUR t on t.id_obra_social = h.id_obra_social&#xA;WHERE id_periodo_presentacion_super_recupero_sur &gt; @id_periodo_hasta&#xA;&#xA;&#xA;&#xA;------ACTUALIZA MARCA CON IMPORTE&#xA; update H_EXPEDIENTES_RECUPERO_SUR_DETALLE&#xA;set id_marca_con_importe_solicitado = 1 &#xA;where importe_solicitado_a_recuperar_recupero_sur &lt;&gt; 0&#xA;&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="373,42"
          Id="Package\Actualiza  H_EXPEDIENTES_RECUPERO_SUR_DETALLE"
          TopLeft="5.5,5.5" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>