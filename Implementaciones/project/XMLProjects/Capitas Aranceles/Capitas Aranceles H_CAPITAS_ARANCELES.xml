<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="1/20/2020 9:40:34 AM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="DA21465-XXXXX"
  DTS:CreatorName="AMS\aquaglia"
  DTS:DelayValidation="True"
  DTS:DTSID="{F756AE34-F98E-49DD-9992-2885E222F1F2}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="15.0.1301.433"
  DTS:LocaleID="11274"
  DTS:ObjectName="Capitas Aranceles H_CAPITAS_ARANCELES"
  DTS:PackageType="5"
  DTS:VersionBuild="222"
  DTS:VersionGUID="{F30CD03B-9ACF-4EC9-81B0-6D431C04AD96}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[Capitas Aranceles.xlsx]"
      DTS:CreationName="FILE"
      DTS:DTSID="{F36F9B70-9B51-46DE-95A9-C497F3D4D089}"
      DTS:ObjectName="Capitas Aranceles.xlsx">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="\\P-IS-01\SSIS2017$\03 - Archivos\Capitas Aranceles\Capitas Aranceles.xlsx" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[Capitas_Aranceles_Origen]"
      DTS:CreationName="EXCEL"
      DTS:DTSID="{929BFEDC-90E2-4216-92A3-1412036CACFB}"
      DTS:ObjectName="Capitas_Aranceles_Origen">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Provider=Microsoft.ACE.OLEDB.12.0;Data Source=\\P-IS-01\SSIS2017$\03 - Archivos\Capitas Aranceles\Capitas Aranceles.xlsx;Extended Properties=&quot;EXCEL 12.0 XML;HDR=YES&quot;;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:LogProviders>
    <DTS:LogProvider
      DTS:ConfigString="DS_MSDB"
      DTS:CreationName="Microsoft.LogProviderSQLServer"
      DTS:Description="Writes log entries for events to a SQL Server database"
      DTS:DTSID="{7AE7BB0E-E17D-44F6-950A-00DCCD3077D1}"
      DTS:ObjectName="SSIS log provider for SQL Server">
      <DTS:ObjectData>
        <InnerObject />
      </DTS:ObjectData>
    </DTS:LogProvider>
  </DTS:LogProviders>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{8D4DA426-4D5F-4D9D-87A2-0C82D839A3CC}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="EjercicioTrabajo">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{71608AA0-401F-406B-A541-C979A6CEC6B3}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="Fecha">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{C2849F2D-B7F1-4653-8EDB-9B8E8AD79291}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="FechaProceso">
      <DTS:VariableValue
        DTS:DataType="7">1/31/2020 9:10:00 AM</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{4822BF43-591F-455D-9F35-2324D3EF2CA1}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="Objeto">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{B244A302-0498-42C9-8F33-EC5C13E541D8}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="&quot;\\\\p-is-01\\ssis2017$\\03 - Archivos\\Capitas Aranceles&quot;"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="path_Capitas_Aranceles">
      <DTS:VariableValue
        DTS:DataType="8">\\p-is-01\ssis2017$\03 - Archivos\Capitas Aranceles</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{383592A9-7707-4C28-B369-E649DCD885D0}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Periodo">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{ACD57791-F063-4CE9-9AF4-CA15189A5D4A}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[User::path_Capitas_Aranceles]   + &quot;\\Capitas Aranceles &quot; + (DT_STR,8,1252) @[User::Fecha] + &quot;.xlsx&quot;"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="vNombreArchivo">
      <DTS:VariableValue
        DTS:DataType="8">\\p-is-01\ssis2017$\03 - Archivos\Capitas Aranceles\Capitas Aranceles 0.xlsx</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{5012629A-588A-408D-96EA-C373F37C9FF3}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[User::path_Capitas_Aranceles]  + &quot;\\Historico\\Año &quot; + SUBSTRING((DT_WSTR, 8) @[User::Periodo], 1, 4)"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="vNombreCarpeta">
      <DTS:VariableValue
        DTS:DataType="8">\\p-is-01\ssis2017$\03 - Archivos\Capitas Aranceles\Historico\Año 0</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:LoggingOptions
    DTS:FilterKind="0"
    DTS:LoggingMode="1">
    <DTS:Property
      DTS:DataType="8"
      DTS:Name="EventFilter">1,7,OnError</DTS:Property>
    <DTS:Property
      DTS:EventName="OnError"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:SelectedLogProviders>
      <DTS:SelectedLogProvider
        DTS:InstanceID="{7AE7BB0E-E17D-44F6-950A-00DCCD3077D1}" />
    </DTS:SelectedLogProviders>
  </DTS:LoggingOptions>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Asigna Ejercicio Trabajo"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Tarea Ejecutar SQL"
      DTS:Disabled="True"
      DTS:DTSID="{8ae6c57c-e1ae-4370-bed0-efdebcb90e74}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Asigna Ejercicio Trabajo"
      DTS:ThreadHint="1">
      <DTS:Variables />
      <DTS:LoggingOptions
        DTS:FilterKind="0" />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{02C2E5CF-9CEF-455A-A0F3-55E0C1512FDD}"
          SQLTask:SqlStatementSource="SELECT CAST(MAX(ID_EJERCICIO)-1 AS INT) as id_EjercicioTrabajo FROM D_PERIODO WHERE vigente = 1&#xA;UNION ALL&#xA;SELECT CAST(MAX(ID_EJERCICIO) AS INT) as id_EjercicioTrabajo FROM D_PERIODO WHERE vigente = 1&#xA;"
          SQLTask:ResultType="ResultSetType_Rowset" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ResultBinding
            SQLTask:ResultName="0"
            SQLTask:DtsVariableName="User::Objeto" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Asigna variable Ejercicio Actual"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Tarea Ejecutar SQL"
      DTS:DTSID="{5792a7d4-8cda-4280-94a9-16189f229d44}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:ISOLevel="256"
      DTS:LocaleID="-1"
      DTS:ObjectName="Asigna variable Ejercicio Actual"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:LoggingOptions
        DTS:FilterKind="0" />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{02C2E5CF-9CEF-455A-A0F3-55E0C1512FDD}"
          SQLTask:SqlStatementSource="--Creamos una tabla temporal para almacenar el valor de la variable ya que luego del 'GO' el valor se pierde y nos hace lio. De esta forma, la tabla persiste luego del 'GO' y&#xA;--por lo tanto la variable también.&#xA;&#xA;&#xA;if exists (SELECT * FROM sysobjects WHERE name = 'TMP_EJ') begin drop table TMP_EJ end&#xA;CREATE TABLE TMP_EJ (id_ejercicio TINYINT)&#xA;INSERT INTO TMP_EJ &#xA;select (SELECT CAST(MAX(ID_EJERCICIO) AS INT) as id_EjercicioTrabajo FROM D_PERIODO WHERE vigente = 1)" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="0"
            SQLTask:DtsVariableName="User::EjercicioTrabajo"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="3"
            SQLTask:ParameterSize="-1" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Asigna variable Ejercicio Anterior"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Tarea Ejecutar SQL"
      DTS:DTSID="{72f548f9-fdf3-4b57-b1d6-aa298c013db1}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:ISOLevel="256"
      DTS:LocaleID="-1"
      DTS:ObjectName="Asigna variable Ejercicio Anterior"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:LoggingOptions
        DTS:FilterKind="0" />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{02C2E5CF-9CEF-455A-A0F3-55E0C1512FDD}"
          SQLTask:SqlStatementSource="--Creamos una tabla temporal para almacenar el valor de la variable ya que luego del 'GO' el valor se pierde y nos hace lio. De esta forma, la tabla persiste luego del 'GO' y&#xA;--por lo tanto la variable también.&#xA;&#xA;&#xA;if exists (SELECT * FROM sysobjects WHERE name = 'TMP_EJ') begin drop table TMP_EJ end&#xA;CREATE TABLE TMP_EJ (id_ejercicio TINYINT)&#xA;INSERT INTO TMP_EJ &#xA;select (SELECT CAST(MAX(ID_EJERCICIO)-1 AS INT) as id_EjercicioTrabajo FROM D_PERIODO WHERE vigente = 1)" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
          <SQLTask:ParameterBinding
            SQLTask:ParameterName="0"
            SQLTask:DtsVariableName="User::EjercicioTrabajo"
            SQLTask:ParameterDirection="Input"
            SQLTask:DataType="3"
            SQLTask:ParameterSize="-1" />
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Execute Package - Ejercicio Actual"
      DTS:CreationName="Microsoft.ExecutePackageTask"
      DTS:Description="Execute Package - Ejercicio Actual"
      DTS:DTSID="{40783edc-a176-4606-8936-0a95e521fa4a}"
      DTS:ExecutableType="Microsoft.ExecutePackageTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Execute Package - Ejercicio Actual"
      DTS:TaskContact="Microsoft Corporation; Microsoft SQL Server; Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
      <DTS:Variables />
      <DTS:ObjectData>
        <ExecutePackageTask>
          <UseProjectReference>True</UseProjectReference>
          <PackageName>Capitas Aranceles H_CAPITAS_ARANCELES codigo comun.dtsx</PackageName>
        </ExecutePackageTask>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Execute Package Task - Ejercicio Anterior"
      DTS:CreationName="Microsoft.ExecutePackageTask"
      DTS:Description="Execute Package Task - Ejercicio Anterior"
      DTS:DTSID="{6F57A7C4-33B8-4D7F-812A-C915273ED500}"
      DTS:ExecutableType="Microsoft.ExecutePackageTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Execute Package Task - Ejercicio Anterior"
      DTS:TaskContact="Microsoft Corporation; Microsoft SQL Server; Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
      <DTS:Variables />
      <DTS:ObjectData>
        <ExecutePackageTask>
          <UseProjectReference>True</UseProjectReference>
          <PackageName>Capitas Aranceles H_CAPITAS_ARANCELES codigo comun.dtsx</PackageName>
        </ExecutePackageTask>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Foreach Loop Container"
      DTS:CreationName="STOCK:FOREACHLOOP"
      DTS:Description="Foreach Loop Container"
      DTS:Disabled="True"
      DTS:DTSID="{6EB86428-C7DF-4584-AC1F-681B0DEF68F1}"
      DTS:ExecutableType="STOCK:FOREACHLOOP"
      DTS:LocaleID="-1"
      DTS:ObjectName="Foreach Loop Container">
      <DTS:ForEachEnumerator
        DTS:CreationName="Microsoft.ForEachADOEnumerator"
        DTS:DTSID="{313312BD-6ECF-4466-A0F4-915EBEA0197D}"
        DTS:ObjectName="{313312BD-6ECF-4466-A0F4-915EBEA0197D}">
        <DTS:ObjectData>
          <FEEADO
            EnumType="EnumerateRowsInFirstTable"
            VarName="User::Objeto" />
        </DTS:ObjectData>
      </DTS:ForEachEnumerator>
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\Foreach Loop Container\Actualiza H_CAPITAS_ARANCELES"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Tarea Ejecutar SQL"
          DTS:DTSID="{07021405-DCB0-4552-B4D9-700A47C786C1}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Actualiza H_CAPITAS_ARANCELES"
          DTS:ThreadHint="1">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{02C2E5CF-9CEF-455A-A0F3-55E0C1512FDD}"
              SQLTask:SqlStatementSource="&#x9;DECLARE @EJERCICIO_TRABAJO  INT&#xA;&#x9;DECLARE @PERIODO_INICIO_EJERCICIO INT&#xA;&#x9;DECLARE @PERIODO_FIN_EJERCICIO INT&#xA;&#x9;SET @EJERCICIO_TRABAJO = (SELECT MAX(id_ejercicio) FROM TMP_EJ)&#xA;&#x9;SET @PERIODO_INICIO_EJERCICIO = (SELECT MIN(ID_PERIODO) FROM D_PERIODO WHERE ID_EJERCICIO = @EJERCICIO_TRABAJO)&#xA;&#x9;set @PERIODO_FIN_EJERCICIO = (SELECT MAX(ID_PERIODO) FROM D_PERIODO WHERE ID_EJERCICIO = @EJERCICIO_TRABAJO)&#xA;&#xA;&#x9;&#xA;-- 30 -- Completa valores_capita para cada período que tenga valor en AS400&#xA;  &#x9;SELECT C.id_periodo, C.id_capita, C.ID_PRODUCTO, C.id_subproducto, C.id_plan_producto, c.id_plan_AS400, c.marca_existe_valor_capita, V.VALOR &#xA;&#x9;&#x9;INTO #PASO1&#xA;&#x9;&#x9;from H_CAPITAS_ARANCELES C &#xA;&#x9;&#x9;INNER JOIN AS400.HOST03.PADRONES.VALORES V &#xA;&#x9;&#x9;ON C.ID_CAPITA = V.ID_CAPITA &#xA;&#x9;&#x9;and c.id_producto = V.PROD&#xA;&#x9;&#x9;AND C.id_subproducto = Isnull(V.SUBPRO,'0') &#xA;&#x9;&#x9;AND C.id_plan_AS400 = Isnull(V.[PLAN], '0') &#xA;&#x9;&#x9;AND C.id_periodo = &#xA;&#x9;&#x9;(CAST(V.FECHA_DESDE as CHAR(4)) + SUBSTRING(V.FECHA_DESDE, 6,2))&#xA;&#x9;&#x9;INNER JOIN D_PERIODO P&#xA;&#x9;&#x9;&#x9;ON P.ID_EJERCICIO = @EJERCICIO_TRABAJO WHERE C.id_periodo = P.id_periodo &#xA;&#x9;&#x9;&#xA;&#x9;&#x9;UPDATE H_CAPITAS_ARANCELES SET Valor_capita = A.VALOR, marca_existe_valor_capita = 1 &#xA;&#x9;&#x9;FROM H_CAPITAS_ARANCELES C&#xA;&#x9;&#x9;INNER JOIN #PASO1 A ON A.ID_PERIODO= C.id_periodo AND A.ID_CAPITA=C.id_capita AND A.ID_PRODUCTO=C.id_producto &#xA;&#x9;&#x9;AND A.ID_SUBPRODUCTO=C.id_subproducto &#xA;&#x9;&#x9;AND&#x9;(Isnull(A.id_subproducto,'0') = Isnull(C.id_subproducto,'0') OR A.id_subproducto = C.id_subproducto)&#xA;&#x9;&#x9;AND A.id_plan_AS400=C.id_plan_AS400&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;-- Busca período inmediato anterior con valor, para el caso del primer mes del Ejercicio&#xA;&#x9;&#x9;select max((CAST(V.FECHA_DESDE as CHAR(4)) + SUBSTRING(V.FECHA_DESDE, 6,2))) Id_Periodo,&#xA;&#x9;&#x9;ID_CAPITA, PROD, [PLAN], cast(null as float) as  Valor&#xA;&#x9;&#x9;INTO #PASO2&#xA;&#x9;&#x9;from AS400.HOST03.PADRONES.VALORES V&#xA;&#x9;&#x9;where EXISTS(SELECT * FROM H_CAPITAS_ARANCELES C &#xA;&#x9;&#x9;WHERE C.id_capita = V.ID_CAPITA AND C.id_producto = V.PROD &#xA;&#x9;&#x9;AND C.id_plan_AS400 = Isnull(V.[PLAN], '0') &#xA;&#x9;&#x9;and c.id_periodo = @PERIODO_INICIO_EJERCICIO &#xA;&#x9;&#x9;and c.Valor_capita = 0&#xA;&#x9;&#x9;)&#x9;&#xA;&#x9;&#x9;AND (CAST(V.FECHA_DESDE as CHAR(4)) + &#xA;&#x9;&#x9;SUBSTRING(V.FECHA_DESDE, 6,2)) &lt; @PERIODO_INICIO_EJERCICIO &#xA;&#x9;&#x9;and isdate(LEFT(FECHA_DESDE, 10))=1&#xA;&#x9;&#x9;group BY &#x9;V.ID_CAPITA, V.PROD, V.[PLAN] &#xA;&#x9;&#xA;&#x9;&#x9;update #PASO2 set [PLAN] = 0 where [PLAN] is null&#xA;&#x9;&#x9;update #PASO2 set Valor = V.VALOR from #PASO2 p&#xA;&#x9;&#x9;inner join AS400.HOST03.PADRONES.VALORES V&#xA;&#x9;&#x9;on V.ID_CAPITA = P.ID_CAPITA AND V.PROD = P.PROD &#xA;&#x9;&#x9;AND Isnull(V.[PLAN], '0') = P.[PLAN] &#xA;&#x9;&#x9;and p.id_periodo =  ((CAST(V.FECHA_DESDE as CHAR(4)) + SUBSTRING(V.FECHA_DESDE, 6,2))) &#x9;&#xA;&#xA;&#x9;&#x9;update H_CAPITAS_ARANCELES  set Valor_capita = p.valor&#xA;&#x9;&#x9;from H_CAPITAS_ARANCELES c &#xA;&#x9;&#x9;inner join #PASO2 p on c.id_capita = p.id_capita&#xA;&#x9;&#x9;and c.id_producto = p.prod &#xA;&#x9;&#x9;and c.id_plan_AS400 = p.[PLAN] &#xA;&#x9;&#x9;where c.id_periodo = @PERIODO_INICIO_EJERCICIO and c.Valor_capita = 0&#xA;&#xA;&#x9;-- Para el caso excelpcional de cápita que no tenga valor para tomar en ejercicio anterior &#xA;&#x9;-- y el primer mes del ejercicio está en cero, &#xA;&#x9;-- Busca período inmediato posterior con valor, para el caso del primer mes del Ejercicio&#xA;&#x9;&#x9;select min((CAST(V.FECHA_DESDE as CHAR(4)) + SUBSTRING(V.FECHA_DESDE, 6,2))) Id_Periodo,&#xA;&#x9;&#x9;ID_CAPITA, PROD, [PLAN], cast(null as float) as  Valor&#xA;&#x9;&#x9;INTO #PASO2a&#xA;&#x9;&#x9;from AS400.HOST03.PADRONES.VALORES V&#xA;&#x9;&#x9;where EXISTS(SELECT * FROM H_CAPITAS_ARANCELES C &#xA;&#x9;&#x9;WHERE &#xA;&#x9;&#x9;C.id_capita = V.ID_CAPITA AND C.id_producto = V.PROD &#xA;&#x9;&#x9;AND C.id_plan_AS400 = Isnull(V.[PLAN], '0') &#xA;&#x9;&#x9;and c.id_periodo = @PERIODO_INICIO_EJERCICIO &#xA;&#x9;&#x9;and c.Valor_capita = 0&#xA;&#x9;&#x9;)&#x9;&#xA;&#x9;&#x9;AND (CAST(V.FECHA_DESDE as CHAR(4)) + &#xA;&#x9;&#x9;SUBSTRING(V.FECHA_DESDE, 6,2)) &gt; @PERIODO_INICIO_EJERCICIO &#xA;&#x9;&#x9;and isdate(LEFT(FECHA_DESDE, 10))=1&#xA;&#x9;&#x9;group BY &#x9;V.ID_CAPITA, V.PROD, V.[PLAN] &#xA;&#x9;&#xA;&#x9;&#x9;update #PASO2a set [PLAN] = 0 where [PLAN] is null&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;update #PASO2a set Valor = V.VALOR from #PASO2a p&#xA;&#x9;&#x9;inner join AS400.HOST03.PADRONES.VALORES V&#xA;&#x9;&#x9;on V.ID_CAPITA = P.ID_CAPITA AND V.PROD = P.PROD &#xA;&#x9;&#x9;AND Isnull(V.[PLAN], '0') = P.[PLAN] &#xA;&#x9;&#x9;and p.id_periodo =  ((CAST(V.FECHA_DESDE as CHAR(4)) + SUBSTRING(V.FECHA_DESDE, 6,2))) &#x9;&#xA;&#xA;&#x9;&#x9;update H_CAPITAS_ARANCELES  set Valor_capita = p.valor&#xA;&#x9;&#x9;from H_CAPITAS_ARANCELES c &#xA;&#x9;&#x9;inner join #PASO2a p on c.id_capita = p.id_capita&#xA;&#x9;&#x9;and c.id_producto = p.prod &#xA;&#x9;&#x9;and c.id_plan_AS400 = p.[PLAN] &#xA;&#x9;&#x9;where c.id_periodo = @PERIODO_INICIO_EJERCICIO&#xA;&#x9;&#x9;and c.Valor_capita = 0&#xA;&#xA;&#xA;-- 40 -- Actualiza datos columnas en H_CAPITAS_ARANCELES que no están en AUX&#xA;&#x9;-- actualiza plan producto&#xA;&#x9;&#x9;update H_CAPITAS_ARANCELES set id_plan_producto = ' ' where id_plan_producto is null or id_plan_producto = '0'&#xA;&#xA;&#x9;-- Actualiza Compañía&#xA;&#x9;&#x9;select a11.id_plan_producto, a15.id_compania, a19.de_compania&#xA;&#x9;&#x9;INTO #PASO3&#xA;&#x9;&#x9;from H_CAPITAS_ARANCELES a11&#xA;&#x9;&#x9;&#x9;join&#x9;D_PLANES&#x9;a12&#xA;&#x9;&#x9;&#x9;  on &#x9;(a11.id_plan_producto = a12.id_plan_producto) --and &#x9;a11.id_producto = a12.id_producto)&#xA;&#x9;&#x9;&#x9;join&#x9;D_PRODUCTOS&#x9;a13&#xA;&#x9;&#x9;&#x9;  on &#x9;(a12.id_producto = a13.id_producto)&#xA;&#x9;&#x9;&#x9;join&#x9;D_SUBRUBRO_LEY&#x9;a14&#xA;&#x9;&#x9;&#x9;  on &#x9;(a12.id_SubRubro_ley = a14.id_SubRubro_ley)&#xA;&#x9;&#x9;&#x9;join&#x9;D_RUBRO_LEY&#x9;a15&#xA;&#x9;&#x9;&#x9;  on &#x9;(a14.id_Rubro_Ley = a15.id_Rubro_Ley)&#xA;&#x9;&#x9;&#x9;join&#x9;D_COMPANIA&#x9;a19&#xA;&#x9;&#x9;&#x9;  on &#x9;(a15.id_compania = a19.id_compania)&#xA;&#x9;&#x9;group by a11.id_plan_producto, a15.id_compania, a19.de_compania&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;UPDATE H_CAPITAS_ARANCELES SET id_compania = P.ID_COMPANIA&#xA;&#x9;&#x9;FROM H_CAPITAS_ARANCELES C&#xA;&#x9;&#x9;INNER JOIN #PASO3 P ON P.id_plan_producto=C.id_plan_producto&#xA;&#x9;&#x9;where c.id_compania is null&#xA;&#x9;&#xA;&#x9;-- Actualiza Acreedor y tipo_prestador -- se relaciona con D_CAPITAS_SALUD para asociar acreedores y pasar a H_CAPITAS_ARANCELES&#xA;&#x9;&#x9;UPDATE H_CAPITAS_ARANCELES SET id_acreedor = D.ID_ACREEDOR, id_tipo_prestador = D.id_tipo_prestador&#xA;&#x9;&#x9;FROM H_CAPITAS_ARANCELES C&#xA;&#x9;&#x9;inner join D_CAPITAS_SALUD D on c.id_capita = d.id_capita&#xA;&#x9;&#x9;where c.id_acreedor is null OR C.id_tipo_prestador IS NULL&#xA;&#x9;&#xA;&#x9;-- Elimina temporales&#xA;&#x9;&#x9;drop table #PASO1&#xA;&#x9;&#x9;drop table #PASO2&#xA;&#x9;&#x9;drop table #PASO2a&#xA;&#x9;&#x9;drop table #PASO3&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#xA;&#xA;-- 50 -- RELLENO - completa para el caso de valor cápita 0, con el valor inmediato anterior, y para el caso excepcional que no tenga, busca el valor inmediato posterior&#xA;-- AQ.09.03.2020 -- se ajusta para que sólo pase si corresponde, y ya no es necesario el 'go'&#xA;if (select count( DISTINCT  c.id_capita)&#xA;&#x9;from H_CAPITAS_ARANCELES c &#xA;&#x9;where exists(&#xA;&#x9;SELECT * FROM H_CAPITAS_ARANCELES WHERE id_periodo_anterior_capitas_aranceles IS NULL)) &gt; 0&#xA;begin&#xA;&#x9;&#x9;--go&#xA;&#x9;&#x9;&#x9;with    cte &#xA;&#x9;&#x9;&#x9;&#x9;as ( select   row_number() over (order by id_capita, id_producto, id_subproducto, id_plan_AS400, id_periodo) NroFila , &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;id_periodo, &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;id_capita,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;id_producto, &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;id_subproducto, &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;id_plan_AS400  &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;from     H_CAPITAS_ARANCELES &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;WHERE id_periodo_anterior_capitas_aranceles IS NULL&#x9;&#x9;---------------------------------------------------------------------------------&#xA;&#x9;&#x9;   group by id_capita, id_producto, id_subproducto, id_plan_AS400, id_periodo) &#xA;&#x9;&#x9;select  cte.NroFila,&#xA;&#x9;&#x9;  cte.id_periodo,&#xA;&#x9;&#x9;  cte.id_capita,&#xA;&#x9;&#x9;  cte.id_producto, &#xA;&#x9;&#x9;  cte.id_subproducto, &#xA;&#x9;&#x9;  cte.id_plan_AS400,&#xA;&#x9;&#x9;  isnull(lag.id_periodo, cte.id_periodo) 'id_periodo_anterior_capitas_aranceles'&#xA;&#x9;&#x9;  INTO #ANTERIOR&#xA;&#x9;&#x9;from    cte &#xA;&#x9;&#x9;&#x9;   left join cte lag on cte.NroFila - 1 = lag.NroFila&#xA;   &#xA; &#xA;&#x9;UPDATE #ANTERIOR&#xA;&#x9;SET id_periodo_anterior_capitas_aranceles = 0&#xA;&#x9;WHERE id_periodo = id_periodo_anterior_capitas_aranceles&#xA;&#xA;&#x9;UPDATE H_CAPITAS_ARANCELES&#xA;&#x9;SET id_periodo_anterior_capitas_aranceles = A.id_periodo_anterior_capitas_aranceles&#xA;&#x9;FROM H_CAPITAS_ARANCELES C INNER JOIN #ANTERIOR A ON (A.id_periodo=C.id_periodo)&#xA;&#xA;&#x9;SELECT MIN(id_periodo) id_periodo, id_capita, id_producto, id_plan_AS400 &#xA;&#x9;INTO #PERIODO&#xA;&#x9;FROM H_CAPITAS_ARANCELES WHERE Valor_capita &lt;&gt; 0&#xA;&#x9;GROUP BY id_capita, id_producto, id_plan_AS400&#xA;&#xA;&#x9;UPDATE H_CAPITAS_ARANCELES&#xA;&#x9;SET marca_actualización_valor_capita = 1&#xA;&#x9;FROM H_CAPITAS_ARANCELES C INNER JOIN #PERIODO T ON (C.id_capita=T.id_capita AND C.id_producto=T.id_producto AND C.id_plan_AS400=T.id_plan_AS400)&#xA;&#x9;WHERE C.id_periodo&gt;=T.id_periodo&#xA;&#xA;&#x9;UPDATE H_CAPITAS_ARANCELES&#xA;&#x9;SET marca_actualización_valor_capita = 0&#xA;&#x9;WHERE marca_actualización_valor_capita IS NULL&#xA;&#xA;&#x9;SELECT * INTO #TEMP FROM H_CAPITAS_ARANCELES H &#xA;&#x9;WHERE valor_capita = 0 and marca_actualización_valor_capita = 1&#xA;&#xA;&#xA;&#x9;WHILE (SELECT TOP 1 id_capita FROM #TEMP) IS NOT NULL&#xA;&#x9;&#x9;BEGIN&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;TRUNCATE TABLE #TEMP&#xA;&#x9;&#x9;&#x9;&#x9;INSERT INTO #TEMP&#xA;&#x9;&#x9;&#x9;&#x9;SELECT * FROM H_CAPITAS_ARANCELES H WHERE valor_capita = 0 AND marca_actualización_valor_capita = 1&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;UPDATE T&#xA;&#x9;&#x9;&#x9;&#x9;SET valor_capita = C.valor_capita&#xA;&#x9;&#x9;&#x9;&#x9;FROM H_CAPITAS_ARANCELES C LEFT JOIN #TEMP T ON &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;T.id_periodo_anterior_capitas_aranceles=C.id_periodo &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AND T.id_capita=C.id_capita &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AND T.id_producto=C.id_producto &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AND T.id_plan_AS400=C.id_plan_AS400&#xA;&#x9;&#x9;&#x9;&#x9;WHERE C.valor_capita &lt;&gt; 0 AND T.valor_capita = 0 &#xA;&#xA;&#x9;&#x9;&#x9;&#x9;UPDATE C&#xA;&#x9;&#x9;&#x9;&#x9;SET valor_capita = T.valor_capita&#xA;&#x9;&#x9;&#x9;&#x9;FROM H_CAPITAS_ARANCELES C LEFT JOIN #TEMP T ON &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;T.id_periodo=C.id_periodo &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AND T.id_capita=C.id_capita &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AND T.id_producto=C.id_producto &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AND T.id_plan_AS400=C.id_plan_AS400&#xA;&#x9;&#x9;&#x9;&#x9;WHERE C.valor_capita = 0 AND T.valor_capita &lt;&gt; 0 &#xA;&#x9;&#x9;END&#xA;&#x9;&#x9;&#xA;&#x9;-- Completa id_periodo_anterior_capitas_aranceles para el caso del primer mes del ejercicio&#xA;&#x9;UPDATE H_CAPITAS_ARANCELES&#xA;&#x9;SET id_periodo_anterior_capitas_aranceles = id_periodo -1&#xA;&#x9;WHERE id_periodo_anterior_capitas_aranceles = 0&#xA;&#xA;&#x9;-- Elimina temporales&#xA;&#x9;DROP TABLE #TEMP&#xA;&#x9;DROP TABLE #PERIODO&#xA;&#x9;DROP TABLE #ANTERIOR&#xA;;&#xA;END&#xA;&#xA;&#xA;&#xA;-- 60 -- Declaración de variables y seteo de valores nuevamente porque el 'go' hace que se pierdan las declaraciones previas&#xA;-- AQ.09.03.2020 -- al quitar el 'go' ya no es necesario volver a declarar las variables&#x9;&#xA;&#x9;--DECLARE @EJERCICIO_TRABAJO  INT&#xA;&#x9;--DECLARE @PERIODO_INICIO_EJERCICIO INT&#xA;&#x9;--DECLARE @PERIODO_FIN_EJERCICIO INT&#xA;&#x9;--SET @EJERCICIO_TRABAJO =  (SELECT MAX(id_ejercicio) FROM TMP_EJ)&#xA;&#x9;--SET @PERIODO_INICIO_EJERCICIO = (SELECT MIN(ID_PERIODO) FROM D_PERIODO WHERE ID_EJERCICIO = @EJERCICIO_TRABAJO)&#xA;&#x9;--set @PERIODO_FIN_EJERCICIO = (SELECT MAX(ID_PERIODO) FROM D_PERIODO WHERE ID_EJERCICIO = @EJERCICIO_TRABAJO)&#xA;&#x9;&#xA;&#x9;&#xA;&#xA;-- 70 -- Busca período inmediato anterior con valor, para el caso del PRIMER MES del EJERCICIO&#xA;&#x9;&#x9;select max((CAST(V.FECHA_DESDE as CHAR(4)) + SUBSTRING(V.FECHA_DESDE, 6,2))) Id_Periodo,&#xA;&#x9;&#x9;ID_CAPITA, PROD, [PLAN], cast(null as float) as  Valor&#xA;&#x9;&#x9;INTO #PASO22&#xA;&#x9;&#x9;from AS400.HOST03.PADRONES.VALORES V&#xA;&#x9;&#x9;where EXISTS(SELECT * FROM H_CAPITAS_ARANCELES C WHERE C.id_capita = V.ID_CAPITA AND C.id_producto = V.PROD &#xA;&#x9;&#x9;AND C.id_plan_AS400 = Isnull(V.[PLAN], '0') &#xA;&#x9;&#x9;and c.id_periodo_anterior_capitas_aranceles = @PERIODO_INICIO_EJERCICIO -1  &#xA;&#x9;&#x9;and c.Valor_capita_periodo_anterior = 0&#xA;&#x9;&#x9;)&#x9;&#xA;&#x9;&#x9;AND (CAST(V.FECHA_DESDE as CHAR(4)) + SUBSTRING(V.FECHA_DESDE, 6,2)) &lt;= @PERIODO_INICIO_EJERCICIO -1 &#xA;&#x9;&#x9;and isdate(LEFT(FECHA_DESDE, 10))=1&#xA;&#x9;&#x9;group BY &#x9;V.ID_CAPITA, V.PROD, V.[PLAN] &#xA;&#x9;&#xA;&#x9;&#x9;update #PASO22 set [PLAN] = 0 where [PLAN] is null&#xA;&#x9;&#x9;update #PASO22 set Valor = V.VALOR from #PASO22 p&#xA;&#x9;&#x9;inner join AS400.HOST03.PADRONES.VALORES V&#xA;&#x9;&#x9;on V.ID_CAPITA = P.ID_CAPITA AND V.PROD = P.PROD &#xA;&#x9;&#x9;AND Isnull(V.[PLAN], '0') = P.[PLAN] &#xA;&#x9;&#x9;and p.id_periodo =  ((CAST(V.FECHA_DESDE as CHAR(4)) + SUBSTRING(V.FECHA_DESDE, 6,2))) &#xA;&#xA;&#x9;&#x9;update H_CAPITAS_ARANCELES  set Valor_capita_periodo_anterior = p.valor&#xA;&#x9;&#x9;from H_CAPITAS_ARANCELES c &#xA;&#x9;&#x9;inner join #PASO22 p on c.id_capita = p.id_capita and c.id_producto = p.prod &#xA;&#x9;&#x9;and c.id_plan_AS400 = p.[PLAN] &#xA;&#x9;&#x9;where c.id_periodo_anterior_capitas_aranceles = @PERIODO_INICIO_EJERCICIO -1 &#xA;&#x9;&#x9;and c.Valor_capita_periodo_anterior = 0&#xA;&#xA;&#x9;&#x9;drop table #PASO22&#xA;&#xA;&#x9;-- Para el caso excelpcional de cápita que no tenga valor para tomar en Ejercicio Anterior &#xA;&#x9;-- y el Primer Mes del Ejercicio está en cero, &#xA;&#x9;-- Busca período inmediato posterior con valor, para el caso del primer mes del Ejercicio&#xA;&#x9;&#x9;select min((CAST(V.FECHA_DESDE as CHAR(4)) + SUBSTRING(V.FECHA_DESDE, 6,2))) Id_Periodo,&#xA;&#x9;&#x9;ID_CAPITA, PROD, [PLAN], cast(null as float) as  Valor&#xA;&#x9;&#x9;INTO #PASO22a&#xA;&#x9;&#x9;from AS400.HOST03.PADRONES.VALORES V&#xA;&#x9;&#x9;where EXISTS(SELECT * FROM H_CAPITAS_ARANCELES C &#xA;&#x9;&#x9;WHERE &#xA;&#x9;&#x9;C.id_capita = V.ID_CAPITA AND C.id_producto = V.PROD &#xA;&#x9;&#x9;AND C.id_plan_AS400 = Isnull(V.[PLAN], '0') &#xA;&#x9;&#x9;and c.id_periodo = @PERIODO_INICIO_EJERCICIO &#xA;&#x9;&#x9;and c.Valor_capita_periodo_anterior = 0&#xA;&#x9;&#x9;)&#x9;&#xA;&#x9;&#x9;AND (CAST(V.FECHA_DESDE as CHAR(4)) + &#xA;&#x9;&#x9;SUBSTRING(V.FECHA_DESDE, 6,2)) &gt; @PERIODO_INICIO_EJERCICIO &#xA;&#x9;&#x9;and isdate(LEFT(FECHA_DESDE, 10))=1&#xA;&#x9;&#x9;group BY &#x9;V.ID_CAPITA, V.PROD, V.[PLAN] &#xA;&#xA;&#x9;&#x9;update #PASO22a set [PLAN] = 0 where [PLAN] is null&#xA;&#x9;&#x9;update #PASO22a set Valor = V.VALOR from #PASO22a p&#xA;&#x9;&#x9;inner join AS400.HOST03.PADRONES.VALORES V&#xA;&#x9;&#x9;on V.ID_CAPITA = P.ID_CAPITA AND V.PROD = P.PROD &#xA;&#x9;&#x9;AND Isnull(V.[PLAN], '0') = P.[PLAN] &#xA;&#x9;&#x9;and p.id_periodo =  ((CAST(V.FECHA_DESDE as CHAR(4)) + SUBSTRING(V.FECHA_DESDE, 6,2))) &#x9;&#xA;&#xA;&#x9;&#x9;update H_CAPITAS_ARANCELES  set Valor_capita = p.valor&#xA;&#x9;&#x9;from H_CAPITAS_ARANCELES c &#xA;&#x9;&#x9;inner join #PASO22a p on c.id_capita = p.id_capita&#xA;&#x9;&#x9;and c.id_producto = p.prod &#xA;&#x9;&#x9;and c.id_plan_AS400 = p.[PLAN] &#xA;&#x9;&#x9;where c.id_periodo = @PERIODO_INICIO_EJERCICIO&#xA;&#x9;&#x9;and c.Valor_capita_periodo_anterior = 0&#xA;&#xA;&#x9;&#x9;drop table #PASO22a&#xA;&#xA;&#xA;-- 80 -- Completa Valor_capita_período_anterior&#xA;&#x9;UPDATE A&#xA;&#x9;SET valor_capita_periodo_anterior = C.valor_capita&#xA;&#x9;FROM H_CAPITAS_ARANCELES A &#xA;&#x9;INNER JOIN H_CAPITAS_ARANCELES C &#xA;&#x9;ON (C.id_capita=A.id_capita and &#xA;&#x9;C.id_producto=A.id_producto and &#xA;&#x9;C.id_subproducto=A.id_subproducto and &#xA;&#x9;C.id_plan_AS400 = A.id_plan_AS400 and &#xA;&#x9;C.id_periodo=A.id_periodo_anterior_capitas_aranceles)&#xA;&#x9;WHERE (C.id_periodo_anterior_capitas_aranceles &lt;&gt; 0 OR A.id_periodo_anterior_capitas_aranceles &lt;&gt; 0)&#xA;&#x9;and A.Valor_capita_periodo_anterior = 0&#xA;&#x9;AND A.id_periodo &gt;= @PERIODO_INICIO_EJERCICIO&#xA;&#xA;&#xA;&#x9;-------- Actualiza Valor_capita_período_anterior para el caso que no exista perìodo anterior en la base&#xA;&#x9;UPDATE A&#xA;&#x9;SET valor_capita_periodo_anterior = C.valor_capita&#xA;&#x9;FROM H_CAPITAS_ARANCELES A &#xA;&#x9;INNER JOIN H_CAPITAS_ARANCELES C &#xA;&#x9;ON (C.id_capita=A.id_capita and &#xA;&#x9;C.id_producto=A.id_producto and &#xA;&#x9;C.id_subproducto=A.id_subproducto and &#xA;&#x9;C.id_plan_AS400 = A.id_plan_AS400 and &#xA;&#x9;C.id_periodo=A.id_periodo)&#xA;&#x9;WHERE (C.id_periodo_anterior_capitas_aranceles &lt;&gt; 0 OR A.id_periodo_anterior_capitas_aranceles &lt;&gt; 0)&#xA;&#x9;and A.Valor_capita_periodo_anterior = 0&#xA;&#x9;AND A.id_periodo &gt;= @PERIODO_INICIO_EJERCICIO&#xA;&#xA;&#xA;-- 90 --Completa Valor_capita_inicio_ejercicio -- Es el valor del ùltimo mes del ejercicio anterior, con lo cual, es el 'Valor_capita_período_anterior' del Período Inicio Ejercicio&#xA;&#x9;update a&#xA;&#x9;set a.Valor_capita_inicio_ejercicio = c.Valor_capita_periodo_anterior&#xA;&#x9;FROM H_CAPITAS_ARANCELES A &#xA;&#x9;INNER JOIN H_CAPITAS_ARANCELES C &#xA;&#x9;ON (C.id_capita=A.id_capita and &#xA;&#x9;C.id_producto=A.id_producto and &#xA;&#x9;C.id_subproducto=A.id_subproducto and &#xA;&#x9;C.id_plan_AS400 = A.id_plan_AS400 and &#xA;&#x9;C.id_periodo = @PERIODO_INICIO_EJERCICIO &#xA;&#x9;and c.id_periodo=a.id_periodo)&#xA;&#xA;&#x9;-- RELLENA Valor_capita_inicio_ejercicio&#xA;&#x9;SELECT * INTO #TEMP2 FROM H_CAPITAS_ARANCELES H &#xA;&#x9;WHERE valor_capita_inicio_ejercicio = 0 and marca_actualización_valor_capita = 1&#xA;&#x9;&#xA;&#x9;WHILE (SELECT TOP 1 id_capita FROM #TEMP2) IS NOT NULL&#xA;&#x9;&#x9;BEGIN&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;TRUNCATE TABLE #TEMP2&#xA;&#x9;&#x9;&#x9;INSERT INTO #TEMP2&#xA;&#x9;&#x9;&#x9;SELECT * FROM H_CAPITAS_ARANCELES H WHERE valor_capita_inicio_ejercicio = 0 AND marca_actualización_valor_capita = 1&#xA;&#xA;&#x9;&#x9;&#x9;UPDATE T&#xA;&#x9;&#x9;&#x9;SET valor_capita_inicio_ejercicio = C.valor_capita_inicio_ejercicio&#xA;&#x9;&#x9;&#x9;FROM H_CAPITAS_ARANCELES C LEFT JOIN #TEMP2 T ON &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;T.id_periodo_anterior_capitas_aranceles=C.id_periodo &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AND T.id_capita=C.id_capita &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AND T.id_producto=C.id_producto &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AND T.id_plan_AS400=C.id_plan_AS400&#xA;&#x9;&#x9;&#x9;WHERE C.valor_capita_inicio_ejercicio &lt;&gt; 0 AND T.valor_capita_inicio_ejercicio = 0 &#xA;&#xA;&#x9;&#x9;&#x9;UPDATE C&#xA;&#x9;&#x9;&#x9;SET valor_capita_inicio_ejercicio = T.valor_capita_inicio_ejercicio&#xA;&#x9;&#x9;&#x9;FROM H_CAPITAS_ARANCELES C LEFT JOIN #TEMP2 T ON &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;T.id_periodo=C.id_periodo &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AND T.id_capita=C.id_capita &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AND T.id_producto=C.id_producto &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AND T.id_plan_AS400=C.id_plan_AS400&#xA;&#x9;&#x9;&#x9;WHERE C.valor_capita_inicio_ejercicio = 0 AND T.valor_capita_inicio_ejercicio &lt;&gt; 0 &#xA;&#x9;END&#xA;&#xA;&#x9;-- Elimina temporal&#xA;&#x9;drop table #TEMP2&#xA;&#xA;&#xA;-- 100 -- Actuliza Fecha de Proceso&#xA;&#x9;update H_CAPITAS_ARANCELES  set Fecha_Ejecucion_Proceso_Capitas_Aranceles  = getdate() &#xA;&#x9;where id_periodo &gt;= @PERIODO_INICIO_EJERCICIO and id_periodo &lt;= @PERIODO_FIN_EJERCICIO&#xA;&#xA;&#xA;&#x9;--DROP TABLE TMP_EJ" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Foreach Loop Container\Actualiza variable"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Tarea Ejecutar SQL"
          DTS:DTSID="{6f4e827d-6981-4147-9c95-b3ea22b32fad}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:ISOLevel="256"
          DTS:LocaleID="-1"
          DTS:ObjectName="Actualiza variable"
          DTS:ThreadHint="1">
          <DTS:Variables />
          <DTS:LoggingOptions
            DTS:FilterKind="0" />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{02C2E5CF-9CEF-455A-A0F3-55E0C1512FDD}"
              SQLTask:SqlStatementSource="--Creamos una tabla temporal para almacenar el valor de la variable ya que luego del 'GO' el valor se pierde y nos hace lio. De esta forma, la tabla persiste luego del 'GO' y&#xA;--por lo tanto la variable también.&#xA;&#xA;&#xA;if exists (SELECT * FROM sysobjects WHERE name = 'TMP_EJ') begin drop table TMP_EJ end&#xA;CREATE TABLE TMP_EJ (id_ejercicio TINYINT)&#xA;INSERT INTO TMP_EJ &#xA;SELECT ?&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="0"
                SQLTask:DtsVariableName="User::EjercicioTrabajo"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="3"
                SQLTask:ParameterSize="-1" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:PrecedenceConstraints>
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Foreach Loop Container.PrecedenceConstraints[Constraint]"
          DTS:CreationName=""
          DTS:DTSID="{BAB7FC43-B9A2-4915-BB9F-3CC4483E672F}"
          DTS:From="Package\Foreach Loop Container\Actualiza variable"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint"
          DTS:To="Package\Foreach Loop Container\Actualiza H_CAPITAS_ARANCELES" />
      </DTS:PrecedenceConstraints>
      <DTS:ForEachVariableMappings>
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{C703832B-5C0B-43DD-A513-1F0ED85D765A}"
          DTS:ObjectName="{C703832B-5C0B-43DD-A513-1F0ED85D765A}"
          DTS:ValueIndex="0"
          DTS:VariableName="User::EjercicioTrabajo" />
      </DTS:ForEachVariableMappings>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint]"
      DTS:CreationName=""
      DTS:DTSID="{552CCC1E-F9E7-4D13-919A-FC1E817BF0B0}"
      DTS:From="Package\Asigna Ejercicio Trabajo"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint"
      DTS:To="Package\Foreach Loop Container" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 1]"
      DTS:CreationName=""
      DTS:DTSID="{B5122AF1-58B5-4945-AD9A-90129623E996}"
      DTS:From="Package\Asigna variable Ejercicio Anterior"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 1"
      DTS:To="Package\Execute Package Task - Ejercicio Anterior" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 2]"
      DTS:CreationName=""
      DTS:DTSID="{250B165E-7172-4645-873C-F72B0A8B2444}"
      DTS:From="Package\Execute Package Task - Ejercicio Anterior"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 2"
      DTS:To="Package\Asigna variable Ejercicio Actual" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 3]"
      DTS:CreationName=""
      DTS:DTSID="{7770A4BD-5300-4886-8609-F06ABCB00718}"
      DTS:From="Package\Asigna variable Ejercicio Actual"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 3"
      DTS:To="Package\Execute Package - Ejercicio Actual" />
  </DTS:PrecedenceConstraints>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="16" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="232,42"
          Id="Package\Asigna variable Ejercicio Actual"
          TopLeft="185,249" />
        <NodeLayout
          Size="260,42"
          Id="Package\Asigna variable Ejercicio Anterior"
          TopLeft="178,76" />
        <NodeLayout
          Size="198,42"
          Id="Package\Asigna Ejercicio Trabajo"
          TopLeft="195.125,544" />
        <NodeLayout
          Size="260,42"
          Id="Package\Foreach Loop Container\Actualiza H_CAPITAS_ARANCELES"
          TopLeft="26.5,105" />
        <NodeLayout
          Size="165,42"
          Id="Package\Foreach Loop Container\Actualiza variable"
          TopLeft="74,22" />
        <EdgeLayout
          Id="Package\Foreach Loop Container.PrecedenceConstraints[Constraint]"
          TopLeft="156.5,64">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,41"
              Start="0,0"
              End="0,33.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,33.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="312,201"
          Size="312,244"
          Id="Package\Foreach Loop Container"
          TopLeft="138.125,637" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint]"
          TopLeft="294.125,586">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,51"
              Start="0,0"
              End="0,43.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,43.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <NodeLayout
          Size="284,42"
          Id="Package\Execute Package Task - Ejercicio Anterior"
          TopLeft="165,159" />
        <NodeLayout
          Size="249,42"
          Id="Package\Execute Package - Ejercicio Actual"
          TopLeft="183,344" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 1]"
          TopLeft="307.5,118">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,41"
              Start="0,0"
              End="0,33.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,33.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 2]"
          TopLeft="304,201">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,48"
              Start="0,0"
              End="0,40.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,40.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 3]"
          TopLeft="304.25,291">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,53"
              Start="0,0"
              End="0,45.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,45.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>