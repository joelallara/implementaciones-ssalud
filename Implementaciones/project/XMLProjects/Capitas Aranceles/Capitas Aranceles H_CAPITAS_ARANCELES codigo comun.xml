<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="3/10/2020 11:05:50 AM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="DA21465-XXXXX"
  DTS:CreatorName="AMS\aquaglia"
  DTS:DTSID="{B1BC8F7D-DAFB-4EA7-B73E-29B162EFE1C3}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="15.0.1301.433"
  DTS:LocaleID="11274"
  DTS:ObjectName="Capitas Aranceles H_CAPITAS_ARANCELES codigo comun"
  DTS:PackageType="5"
  DTS:VersionBuild="2"
  DTS:VersionGUID="{85807246-797B-4F02-9099-728247B35AF7}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:Variables />
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Actualiza H_CAPITAS_ARANCELES"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Tarea Ejecutar SQL"
      DTS:DTSID="{643948cb-e13b-4492-81be-0a855f43964d}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Actualiza H_CAPITAS_ARANCELES"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{02C2E5CF-9CEF-455A-A0F3-55E0C1512FDD}"
          SQLTask:SqlStatementSource=" DECLARE @EJERCICIO_TRABAJO  INT&#xA; DECLARE @PERIODO_INICIO_EJERCICIO INT&#xA; DECLARE @PERIODO_FIN_EJERCICIO INT&#xA; SET @EJERCICIO_TRABAJO = (SELECT MAX(id_ejercicio) FROM TMP_EJ)&#xA; SET @PERIODO_INICIO_EJERCICIO = (SELECT MIN(ID_PERIODO) FROM D_PERIODO WHERE ID_EJERCICIO = @EJERCICIO_TRABAJO)&#xA; set @PERIODO_FIN_EJERCICIO = (SELECT MAX(ID_PERIODO) FROM D_PERIODO WHERE ID_EJERCICIO = @EJERCICIO_TRABAJO)&#xA;&#xA; &#xA;-- 30 -- Completa valores_capita para cada período que tenga valor en AS400&#xA;   SELECT C.id_periodo, C.id_capita, C.ID_PRODUCTO, C.id_subproducto, C.id_plan_producto, c.id_plan_AS400, c.marca_existe_valor_capita, V.VALOR &#xA;  INTO #PASO1&#xA;  from H_CAPITAS_ARANCELES C &#xA;  INNER JOIN AS400.HOST03.PADRONES.VALORES V &#xA;  ON C.ID_CAPITA = V.ID_CAPITA &#xA;  and c.id_producto = V.PROD&#xA;  AND C.id_subproducto = Isnull(V.SUBPRO,'0') &#xA;  AND C.id_plan_AS400 = Isnull(V.[PLAN], '0') &#xA;  AND C.id_periodo = &#xA;  (CAST(V.FECHA_DESDE as CHAR(4)) + SUBSTRING(V.FECHA_DESDE, 6,2))&#xA;  INNER JOIN D_PERIODO P&#xA;   ON P.ID_EJERCICIO = @EJERCICIO_TRABAJO WHERE C.id_periodo = P.id_periodo &#xA;  &#xA;  UPDATE H_CAPITAS_ARANCELES SET Valor_capita = A.VALOR, marca_existe_valor_capita = 1 &#xA;  FROM H_CAPITAS_ARANCELES C&#xA;  INNER JOIN #PASO1 A ON A.ID_PERIODO= C.id_periodo AND A.ID_CAPITA=C.id_capita AND A.ID_PRODUCTO=C.id_producto &#xA;  AND A.ID_SUBPRODUCTO=C.id_subproducto &#xA;  AND (Isnull(A.id_subproducto,'0') = Isnull(C.id_subproducto,'0') OR A.id_subproducto = C.id_subproducto)&#xA;  AND A.id_plan_AS400=C.id_plan_AS400&#xA;    &#xA; -- Busca período inmediato anterior con valor, para el caso del primer mes del Ejercicio&#xA;  select max((CAST(V.FECHA_DESDE as CHAR(4)) + SUBSTRING(V.FECHA_DESDE, 6,2))) Id_Periodo,&#xA;  ID_CAPITA, PROD, [PLAN], cast(null as float) as  Valor&#xA;  INTO #PASO2&#xA;  from AS400.HOST03.PADRONES.VALORES V&#xA;  where EXISTS(SELECT * FROM H_CAPITAS_ARANCELES C &#xA;  WHERE C.id_capita = V.ID_CAPITA AND C.id_producto = V.PROD &#xA;  AND C.id_plan_AS400 = Isnull(V.[PLAN], '0') &#xA;  and c.id_periodo = @PERIODO_INICIO_EJERCICIO &#xA;  and c.Valor_capita = 0&#xA;  ) &#xA;  AND (CAST(V.FECHA_DESDE as CHAR(4)) + &#xA;  SUBSTRING(V.FECHA_DESDE, 6,2)) &lt; @PERIODO_INICIO_EJERCICIO &#xA;  and isdate(LEFT(FECHA_DESDE, 10))=1&#xA;  group BY  V.ID_CAPITA, V.PROD, V.[PLAN] &#xA; &#xA;  update #PASO2 set [PLAN] = 0 where [PLAN] is null&#xA;  update #PASO2 set Valor = V.VALOR from #PASO2 p&#xA;  inner join AS400.HOST03.PADRONES.VALORES V&#xA;  on V.ID_CAPITA = P.ID_CAPITA AND V.PROD = P.PROD &#xA;  AND Isnull(V.[PLAN], '0') = P.[PLAN] &#xA;  and p.id_periodo =  ((CAST(V.FECHA_DESDE as CHAR(4)) + SUBSTRING(V.FECHA_DESDE, 6,2)))  &#xA;&#xA;  update H_CAPITAS_ARANCELES  set Valor_capita = p.valor&#xA;  from H_CAPITAS_ARANCELES c &#xA;  inner join #PASO2 p on c.id_capita = p.id_capita&#xA;  and c.id_producto = p.prod &#xA;  and c.id_plan_AS400 = p.[PLAN] &#xA;  where c.id_periodo = @PERIODO_INICIO_EJERCICIO and c.Valor_capita = 0&#xA;&#xA; -- Para el caso excelpcional de cápita que no tenga valor para tomar en ejercicio anterior &#xA; -- y el primer mes del ejercicio está en cero, &#xA; -- Busca período inmediato posterior con valor, para el caso del primer mes del Ejercicio&#xA;  select min((CAST(V.FECHA_DESDE as CHAR(4)) + SUBSTRING(V.FECHA_DESDE, 6,2))) Id_Periodo,&#xA;  ID_CAPITA, PROD, [PLAN], cast(null as float) as  Valor&#xA;  INTO #PASO2a&#xA;  from AS400.HOST03.PADRONES.VALORES V&#xA;  where EXISTS(SELECT * FROM H_CAPITAS_ARANCELES C &#xA;  WHERE &#xA;  C.id_capita = V.ID_CAPITA AND C.id_producto = V.PROD &#xA;  AND C.id_plan_AS400 = Isnull(V.[PLAN], '0') &#xA;  and c.id_periodo = @PERIODO_INICIO_EJERCICIO &#xA;  and c.Valor_capita = 0&#xA;  ) &#xA;  AND (CAST(V.FECHA_DESDE as CHAR(4)) + &#xA;  SUBSTRING(V.FECHA_DESDE, 6,2)) &gt; @PERIODO_INICIO_EJERCICIO &#xA;  and isdate(LEFT(FECHA_DESDE, 10))=1&#xA;  group BY  V.ID_CAPITA, V.PROD, V.[PLAN] &#xA; &#xA;  update #PASO2a set [PLAN] = 0 where [PLAN] is null&#xA;  &#xA;  update #PASO2a set Valor = V.VALOR from #PASO2a p&#xA;  inner join AS400.HOST03.PADRONES.VALORES V&#xA;  on V.ID_CAPITA = P.ID_CAPITA AND V.PROD = P.PROD &#xA;  AND Isnull(V.[PLAN], '0') = P.[PLAN] &#xA;  and p.id_periodo =  ((CAST(V.FECHA_DESDE as CHAR(4)) + SUBSTRING(V.FECHA_DESDE, 6,2)))  &#xA;&#xA;  update H_CAPITAS_ARANCELES  set Valor_capita = p.valor&#xA;  from H_CAPITAS_ARANCELES c &#xA;  inner join #PASO2a p on c.id_capita = p.id_capita&#xA;  and c.id_producto = p.prod &#xA;  and c.id_plan_AS400 = p.[PLAN] &#xA;  where c.id_periodo = @PERIODO_INICIO_EJERCICIO&#xA;  and c.Valor_capita = 0&#xA;&#xA;&#xA;-- 40 -- Actualiza datos columnas en H_CAPITAS_ARANCELES que no están en AUX&#xA; -- actualiza plan producto&#xA;  update H_CAPITAS_ARANCELES set id_plan_producto = ' ' where id_plan_producto is null or id_plan_producto = '0'&#xA;&#xA; -- Actualiza Compañía&#xA;  select a11.id_plan_producto, a15.id_compania, a19.de_compania&#xA;  INTO #PASO3&#xA;  from H_CAPITAS_ARANCELES a11&#xA;   join D_PLANES a12&#xA;     on  (a11.id_plan_producto = a12.id_plan_producto) --and  a11.id_producto = a12.id_producto)&#xA;   join D_PRODUCTOS a13&#xA;     on  (a12.id_producto = a13.id_producto)&#xA;   join D_SUBRUBRO_LEY a14&#xA;     on  (a12.id_SubRubro_ley = a14.id_SubRubro_ley)&#xA;   join D_RUBRO_LEY a15&#xA;     on  (a14.id_Rubro_Ley = a15.id_Rubro_Ley)&#xA;   join D_COMPANIA a19&#xA;     on  (a15.id_compania = a19.id_compania)&#xA;  group by a11.id_plan_producto, a15.id_compania, a19.de_compania&#xA;  &#xA;  UPDATE H_CAPITAS_ARANCELES SET id_compania = P.ID_COMPANIA&#xA;  FROM H_CAPITAS_ARANCELES C&#xA;  INNER JOIN #PASO3 P ON P.id_plan_producto=C.id_plan_producto&#xA;  where c.id_compania is null&#xA; &#xA; -- Actualiza Acreedor y tipo_prestador -- se relaciona con D_CAPITAS_SALUD para asociar acreedores y pasar a H_CAPITAS_ARANCELES&#xA;  UPDATE H_CAPITAS_ARANCELES SET id_acreedor = D.ID_ACREEDOR, id_tipo_prestador = D.id_tipo_prestador&#xA;  FROM H_CAPITAS_ARANCELES C&#xA;  inner join D_CAPITAS_SALUD D on c.id_capita = d.id_capita&#xA;  where c.id_acreedor is null OR C.id_tipo_prestador IS NULL&#xA; &#xA; -- Elimina temporales&#xA;  drop table #PASO1&#xA;  drop table #PASO2&#xA;  drop table #PASO2a&#xA;  drop table #PASO3&#xA;  &#xA;&#xA;-- 50 -- RELLENO - completa para el caso de valor cápita 0, con el valor inmediato anterior, y para el caso excepcional que no tenga, busca el valor inmediato posterior&#xA;  go&#xA;  with    cte &#xA;    as ( select   row_number() over (order by id_capita, id_producto, id_subproducto, id_plan_AS400, id_periodo) NroFila , &#xA;       id_periodo, &#xA;       id_capita,&#xA;       id_producto, &#xA;       id_subproducto, &#xA;       id_plan_AS400  &#xA;     from     H_CAPITAS_ARANCELES &#xA;      WHERE id_periodo_anterior_capitas_aranceles IS NULL  ---------------------------------------------------------------------------------&#xA;     group by id_capita, id_producto, id_subproducto, id_plan_AS400, id_periodo) &#xA;  select  cte.NroFila,&#xA;    cte.id_periodo,&#xA;    cte.id_capita,&#xA;    cte.id_producto, &#xA;    cte.id_subproducto, &#xA;    cte.id_plan_AS400,&#xA;    isnull(lag.id_periodo, cte.id_periodo) 'id_periodo_anterior_capitas_aranceles'&#xA;    INTO #ANTERIOR&#xA;  from    cte &#xA;      left join cte lag on cte.NroFila - 1 = lag.NroFila&#xA;   &#xA; UPDATE #ANTERIOR&#xA; SET id_periodo_anterior_capitas_aranceles = 0&#xA; WHERE id_periodo = id_periodo_anterior_capitas_aranceles&#xA;&#xA; UPDATE H_CAPITAS_ARANCELES&#xA; SET id_periodo_anterior_capitas_aranceles = A.id_periodo_anterior_capitas_aranceles&#xA; FROM H_CAPITAS_ARANCELES C INNER JOIN #ANTERIOR A ON (A.id_periodo=C.id_periodo)&#xA;&#xA; SELECT MIN(id_periodo) id_periodo, id_capita, id_producto, id_plan_AS400 &#xA; INTO #PERIODO&#xA; FROM H_CAPITAS_ARANCELES WHERE Valor_capita &lt;&gt; 0&#xA; GROUP BY id_capita, id_producto, id_plan_AS400&#xA;&#xA; UPDATE H_CAPITAS_ARANCELES&#xA; SET marca_actualización_valor_capita = 1&#xA; FROM H_CAPITAS_ARANCELES C INNER JOIN #PERIODO T ON (C.id_capita=T.id_capita AND C.id_producto=T.id_producto AND C.id_plan_AS400=T.id_plan_AS400)&#xA; WHERE C.id_periodo&gt;=T.id_periodo&#xA;&#xA; UPDATE H_CAPITAS_ARANCELES&#xA; SET marca_actualización_valor_capita = 0&#xA; WHERE marca_actualización_valor_capita IS NULL&#xA;&#xA; SELECT * INTO #TEMP FROM H_CAPITAS_ARANCELES H &#xA; WHERE valor_capita = 0 and marca_actualización_valor_capita = 1&#xA;&#xA;&#xA; WHILE (SELECT TOP 1 id_capita FROM #TEMP) IS NOT NULL&#xA;  BEGIN   &#xA;    TRUNCATE TABLE #TEMP&#xA;    INSERT INTO #TEMP&#xA;    SELECT * FROM H_CAPITAS_ARANCELES H WHERE valor_capita = 0 AND marca_actualización_valor_capita = 1&#xA;&#xA;    UPDATE T&#xA;    SET valor_capita = C.valor_capita&#xA;    FROM H_CAPITAS_ARANCELES C LEFT JOIN #TEMP T ON &#xA;       T.id_periodo_anterior_capitas_aranceles=C.id_periodo &#xA;       AND T.id_capita=C.id_capita &#xA;       AND T.id_producto=C.id_producto &#xA;       AND T.id_plan_AS400=C.id_plan_AS400&#xA;    WHERE C.valor_capita &lt;&gt; 0 AND T.valor_capita = 0 &#xA;&#xA;    UPDATE C&#xA;    SET valor_capita = T.valor_capita&#xA;    FROM H_CAPITAS_ARANCELES C LEFT JOIN #TEMP T ON &#xA;       T.id_periodo=C.id_periodo &#xA;       AND T.id_capita=C.id_capita &#xA;       AND T.id_producto=C.id_producto &#xA;       AND T.id_plan_AS400=C.id_plan_AS400&#xA;    WHERE C.valor_capita = 0 AND T.valor_capita &lt;&gt; 0 &#xA;  END&#xA;&#xA; -- Completa id_periodo_anterior_capitas_aranceles para el caso del primer mes del ejercicio&#xA; UPDATE H_CAPITAS_ARANCELES&#xA; SET id_periodo_anterior_capitas_aranceles = id_periodo -1&#xA; WHERE id_periodo_anterior_capitas_aranceles = 0&#xA;&#xA; -- Elimina temporales&#xA; DROP TABLE #TEMP&#xA; DROP TABLE #PERIODO&#xA; DROP TABLE #ANTERIOR&#xA;&#xA;&#xA;-- 60 -- Declaración de variables y seteo de valores nuevamente porque el 'go' hace que se pierdan las declaraciones previas&#xA; DECLARE @EJERCICIO_TRABAJO  INT&#xA; DECLARE @PERIODO_INICIO_EJERCICIO INT&#xA; DECLARE @PERIODO_FIN_EJERCICIO INT&#xA; SET @EJERCICIO_TRABAJO =  (SELECT MAX(id_ejercicio) FROM TMP_EJ)&#xA; SET @PERIODO_INICIO_EJERCICIO = (SELECT MIN(ID_PERIODO) FROM D_PERIODO WHERE ID_EJERCICIO = @EJERCICIO_TRABAJO)&#xA; set @PERIODO_FIN_EJERCICIO = (SELECT MAX(ID_PERIODO) FROM D_PERIODO WHERE ID_EJERCICIO = @EJERCICIO_TRABAJO)&#xA; &#xA; &#xA;&#xA;-- 70 -- Busca período inmediato anterior con valor, para el caso del PRIMER MES del EJERCICIO&#xA;  select max((CAST(V.FECHA_DESDE as CHAR(4)) + SUBSTRING(V.FECHA_DESDE, 6,2))) Id_Periodo,&#xA;  ID_CAPITA, PROD, [PLAN], cast(null as float) as  Valor&#xA;  INTO #PASO2&#xA;  from AS400.HOST03.PADRONES.VALORES V&#xA;  where EXISTS(SELECT * FROM H_CAPITAS_ARANCELES C WHERE C.id_capita = V.ID_CAPITA AND C.id_producto = V.PROD &#xA;  AND C.id_plan_AS400 = Isnull(V.[PLAN], '0') &#xA;  and c.id_periodo_anterior_capitas_aranceles = @PERIODO_INICIO_EJERCICIO -1  &#xA;  and c.Valor_capita_periodo_anterior = 0&#xA;  ) &#xA;  AND (CAST(V.FECHA_DESDE as CHAR(4)) + SUBSTRING(V.FECHA_DESDE, 6,2)) &lt;= @PERIODO_INICIO_EJERCICIO -1 &#xA;  and isdate(LEFT(FECHA_DESDE, 10))=1&#xA;  group BY  V.ID_CAPITA, V.PROD, V.[PLAN] &#xA; &#xA;  update #PASO2 set [PLAN] = 0 where [PLAN] is null&#xA;  update #PASO2 set Valor = V.VALOR from #PASO2 p&#xA;  inner join AS400.HOST03.PADRONES.VALORES V&#xA;  on V.ID_CAPITA = P.ID_CAPITA AND V.PROD = P.PROD &#xA;  AND Isnull(V.[PLAN], '0') = P.[PLAN] &#xA;  and p.id_periodo =  ((CAST(V.FECHA_DESDE as CHAR(4)) + SUBSTRING(V.FECHA_DESDE, 6,2))) &#xA;&#xA;  update H_CAPITAS_ARANCELES  set Valor_capita_periodo_anterior = p.valor&#xA;  from H_CAPITAS_ARANCELES c &#xA;  inner join #PASO2 p on c.id_capita = p.id_capita and c.id_producto = p.prod &#xA;  and c.id_plan_AS400 = p.[PLAN] &#xA;  where c.id_periodo_anterior_capitas_aranceles = @PERIODO_INICIO_EJERCICIO -1 &#xA;  and c.Valor_capita_periodo_anterior = 0&#xA;&#xA;  drop table #PASO2&#xA;&#xA; -- Para el caso excelpcional de cápita que no tenga valor para tomar en Ejercicio Anterior &#xA; -- y el Primer Mes del Ejercicio está en cero, &#xA; -- Busca período inmediato posterior con valor, para el caso del primer mes del Ejercicio&#xA;  select min((CAST(V.FECHA_DESDE as CHAR(4)) + SUBSTRING(V.FECHA_DESDE, 6,2))) Id_Periodo,&#xA;  ID_CAPITA, PROD, [PLAN], cast(null as float) as  Valor&#xA;  INTO #PASO2a&#xA;  from AS400.HOST03.PADRONES.VALORES V&#xA;  where EXISTS(SELECT * FROM H_CAPITAS_ARANCELES C &#xA;  WHERE &#xA;  C.id_capita = V.ID_CAPITA AND C.id_producto = V.PROD &#xA;  AND C.id_plan_AS400 = Isnull(V.[PLAN], '0') &#xA;  and c.id_periodo = @PERIODO_INICIO_EJERCICIO &#xA;  and c.Valor_capita_periodo_anterior = 0&#xA;  ) &#xA;  AND (CAST(V.FECHA_DESDE as CHAR(4)) + &#xA;  SUBSTRING(V.FECHA_DESDE, 6,2)) &gt; @PERIODO_INICIO_EJERCICIO &#xA;  and isdate(LEFT(FECHA_DESDE, 10))=1&#xA;  group BY  V.ID_CAPITA, V.PROD, V.[PLAN] &#xA;&#xA;  update #PASO2a set [PLAN] = 0 where [PLAN] is null&#xA;  update #PASO2a set Valor = V.VALOR from #PASO2a p&#xA;  inner join AS400.HOST03.PADRONES.VALORES V&#xA;  on V.ID_CAPITA = P.ID_CAPITA AND V.PROD = P.PROD &#xA;  AND Isnull(V.[PLAN], '0') = P.[PLAN] &#xA;  and p.id_periodo =  ((CAST(V.FECHA_DESDE as CHAR(4)) + SUBSTRING(V.FECHA_DESDE, 6,2)))  &#xA;&#xA;  update H_CAPITAS_ARANCELES  set Valor_capita = p.valor&#xA;  from H_CAPITAS_ARANCELES c &#xA;  inner join #PASO2a p on c.id_capita = p.id_capita&#xA;  and c.id_producto = p.prod &#xA;  and c.id_plan_AS400 = p.[PLAN] &#xA;  where c.id_periodo = @PERIODO_INICIO_EJERCICIO&#xA;  and c.Valor_capita_periodo_anterior = 0&#xA;&#xA;  drop table #PASO2a&#xA;&#xA;&#xA;-- 80 -- Completa Valor_capita_período_anterior&#xA; UPDATE A&#xA; SET valor_capita_periodo_anterior = C.valor_capita&#xA; FROM H_CAPITAS_ARANCELES A &#xA; INNER JOIN H_CAPITAS_ARANCELES C &#xA; ON (C.id_capita=A.id_capita and &#xA; C.id_producto=A.id_producto and &#xA; C.id_subproducto=A.id_subproducto and &#xA; C.id_plan_AS400 = A.id_plan_AS400 and &#xA; C.id_periodo=A.id_periodo_anterior_capitas_aranceles)&#xA; WHERE (C.id_periodo_anterior_capitas_aranceles &lt;&gt; 0 OR A.id_periodo_anterior_capitas_aranceles &lt;&gt; 0)&#xA; and A.Valor_capita_periodo_anterior = 0&#xA; AND A.id_periodo &gt;= @PERIODO_INICIO_EJERCICIO&#xA;&#xA;&#xA; -------- Actualiza Valor_capita_período_anterior para el caso que no exista perìodo anterior en la base&#xA; UPDATE A&#xA; SET valor_capita_periodo_anterior = C.valor_capita&#xA; FROM H_CAPITAS_ARANCELES A &#xA; INNER JOIN H_CAPITAS_ARANCELES C &#xA; ON (C.id_capita=A.id_capita and &#xA; C.id_producto=A.id_producto and &#xA; C.id_subproducto=A.id_subproducto and &#xA; C.id_plan_AS400 = A.id_plan_AS400 and &#xA; C.id_periodo=A.id_periodo)&#xA; WHERE (C.id_periodo_anterior_capitas_aranceles &lt;&gt; 0 OR A.id_periodo_anterior_capitas_aranceles &lt;&gt; 0)&#xA; and A.Valor_capita_periodo_anterior = 0&#xA; AND A.id_periodo &gt;= @PERIODO_INICIO_EJERCICIO&#xA;&#xA;&#xA;-- 90 --Completa Valor_capita_inicio_ejercicio -- Es el valor del ùltimo mes del ejercicio anterior, con lo cual, es el 'Valor_capita_período_anterior' del Período Inicio Ejercicio&#xA; update a&#xA; set a.Valor_capita_inicio_ejercicio = c.Valor_capita_periodo_anterior&#xA; FROM H_CAPITAS_ARANCELES A &#xA; INNER JOIN H_CAPITAS_ARANCELES C &#xA; ON (C.id_capita=A.id_capita and &#xA; C.id_producto=A.id_producto and &#xA; C.id_subproducto=A.id_subproducto and &#xA; C.id_plan_AS400 = A.id_plan_AS400 and &#xA; C.id_periodo = @PERIODO_INICIO_EJERCICIO &#xA; and c.id_periodo=a.id_periodo)&#xA;&#xA; -- RELLENA Valor_capita_inicio_ejercicio&#xA; SELECT * INTO #TEMP2 FROM H_CAPITAS_ARANCELES H &#xA; WHERE valor_capita_inicio_ejercicio = 0 and marca_actualización_valor_capita = 1&#xA; &#xA; WHILE (SELECT TOP 1 id_capita FROM #TEMP2) IS NOT NULL&#xA;  BEGIN   &#xA;   TRUNCATE TABLE #TEMP2&#xA;   INSERT INTO #TEMP2&#xA;   SELECT * FROM H_CAPITAS_ARANCELES H WHERE valor_capita_inicio_ejercicio = 0 AND marca_actualización_valor_capita = 1&#xA;&#xA;   UPDATE T&#xA;   SET valor_capita_inicio_ejercicio = C.valor_capita_inicio_ejercicio&#xA;   FROM H_CAPITAS_ARANCELES C LEFT JOIN #TEMP2 T ON &#xA;      T.id_periodo_anterior_capitas_aranceles=C.id_periodo &#xA;      AND T.id_capita=C.id_capita &#xA;      AND T.id_producto=C.id_producto &#xA;      AND T.id_plan_AS400=C.id_plan_AS400&#xA;   WHERE C.valor_capita_inicio_ejercicio &lt;&gt; 0 AND T.valor_capita_inicio_ejercicio = 0 &#xA;&#xA;   UPDATE C&#xA;   SET valor_capita_inicio_ejercicio = T.valor_capita_inicio_ejercicio&#xA;   FROM H_CAPITAS_ARANCELES C LEFT JOIN #TEMP2 T ON &#xA;      T.id_periodo=C.id_periodo &#xA;      AND T.id_capita=C.id_capita &#xA;      AND T.id_producto=C.id_producto &#xA;      AND T.id_plan_AS400=C.id_plan_AS400&#xA;   WHERE C.valor_capita_inicio_ejercicio = 0 AND T.valor_capita_inicio_ejercicio &lt;&gt; 0 &#xA; END&#xA;&#xA; -- Elimina temporal&#xA; drop table #TEMP2&#xA;&#xA;&#xA;-- 100 -- Actuliza Fecha de Proceso&#xA; update H_CAPITAS_ARANCELES  set Fecha_Ejecucion_Proceso_Capitas_Aranceles  = getdate() &#xA; where id_periodo &gt;= @PERIODO_INICIO_EJERCICIO and id_periodo &lt;= @PERIODO_FIN_EJERCICIO&#xA;&#xA;&#xA; --DROP TABLE TMP_EJ&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="260,42"
          Id="Package\Actualiza H_CAPITAS_ARANCELES"
          TopLeft="60,60" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>