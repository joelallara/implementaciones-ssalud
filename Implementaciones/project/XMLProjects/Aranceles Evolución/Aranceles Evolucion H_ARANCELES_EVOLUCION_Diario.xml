<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="10/12/2016 12:44:11 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="AMS06X"
  DTS:CreatorName="AMS\pgonzalez"
  DTS:DTSID="{0DF2D205-6E2C-4DB3-9D6A-C77167503FF2}"
  DTS:EnableConfig="True"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="15.0.1301.433"
  DTS:LocaleID="11274"
  DTS:ObjectName="Aranceles Evolucion H_ARANCELES_EVOLUCION_Diario"
  DTS:PackageType="5"
  DTS:VersionBuild="257"
  DTS:VersionGUID="{F83BEBC0-EB4A-4726-ACF2-3EC1983A63DE}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:LogProviders>
    <DTS:LogProvider
      DTS:ConfigString="DS_MSDB"
      DTS:CreationName="Microsoft.LogProviderSQLServer"
      DTS:Description="Writes log entries for events to a SQL Server database"
      DTS:DTSID="{E17D6F5C-1C04-410A-B710-29116E77C0D8}"
      DTS:ObjectName="SSIS log provider for SQL Server">
      <DTS:ObjectData>
        <InnerObject />
      </DTS:ObjectData>
    </DTS:LogProvider>
  </DTS:LogProviders>
  <DTS:Variables />
  <DTS:LoggingOptions
    DTS:FilterKind="0"
    DTS:LoggingMode="1">
    <DTS:Property
      DTS:DataType="8"
      DTS:Name="EventFilter">1,7,OnError</DTS:Property>
    <DTS:Property
      DTS:EventName="OnError"
      DTS:Name="ColumnFilter">
      <DTS:Property
        DTS:Name="Computer">-1</DTS:Property>
      <DTS:Property
        DTS:Name="Operator">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceName">-1</DTS:Property>
      <DTS:Property
        DTS:Name="SourceID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="ExecutionID">-1</DTS:Property>
      <DTS:Property
        DTS:Name="MessageText">-1</DTS:Property>
      <DTS:Property
        DTS:Name="DataBytes">-1</DTS:Property>
    </DTS:Property>
    <DTS:SelectedLogProviders>
      <DTS:SelectedLogProvider
        DTS:InstanceID="{E17D6F5C-1C04-410A-B710-29116E77C0D8}" />
    </DTS:SelectedLogProviders>
  </DTS:LoggingOptions>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Actualiza H_ARANCELES_EVOLUCION"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{25E32A74-B10C-4BD5-A992-99D2B448473A}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Actualiza H_ARANCELES_EVOLUCION"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:LoggingOptions
        DTS:FilterKind="0" />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{7705AE95-4A1E-4600-AF08-B019CC52882F}"
          SQLTask:SqlStatementSource="/* Casos especiales de Salta */&#xA;&#x9;UPDATE AUX_ARANCELES_EVOLUCION set fecha_convenio = SUBSTRING(fecha_convenio,1,6)+'01'&#xA;&#x9;from AUX_ARANCELES_EVOLUCION H&#xA;&#x9;join D_ACREEDOR A on H.id_acreedor = A.id_acreedor and H.id_tipo_prestador = A.id_tipo_prestador&#xA;&#x9;where SUBSTRING(fecha_convenio,7,2) &lt;&gt; '01' and fecha_convenio in ('20150315','20160305','20170306','20170410') and A.id_provincia = 'A' and marca_prestacion = 1&#xA;&#xA;/* Resto, son errores de carga */&#xA;&#xA;&#x9;&#x9;-- EXCEPCIONES y TARIFA.&#x9;&#x9;&#xA;&#x9;&#x9;UPDATE AUX_ARANCELES_EVOLUCION set fecha_convenio = SUBSTRING(fecha_convenio,1,6)+'01', inconsistencia = 1&#xA;&#x9;&#x9;from AUX_ARANCELES_EVOLUCION H&#xA;&#x9;&#x9;join D_ACREEDOR A on H.id_acreedor = A.id_acreedor and H.id_tipo_prestador = A.id_tipo_prestador&#xA;&#x9;&#x9;where SUBSTRING(fecha_convenio,7,2) &lt;&gt; '01' and marca_prestacion = 1&#xA;&#xA;&#x9;&#x9;-- GALENOS.&#xA;&#x9;&#x9;UPDATE AUX_ARANCELES_GALENOS_UNIDADES set fecha_ultimo_convenio = SUBSTRING(fecha_ultimo_convenio,1,6)+'01', inconsistencia = 1&#xA;&#x9;&#x9;from AUX_ARANCELES_GALENOS_UNIDADES H&#xA;&#x9;&#x9;join D_ACREEDOR A on H.id_acreedor = A.id_acreedor and H.id_tipo_prestador = A.id_tipo_prestador&#xA;&#x9;&#x9;where SUBSTRING(fecha_ultimo_convenio,7,2) &lt;&gt; '01'&#xA;&#xA;/* Aisla errores de carga */&#xA;&#xA;&#x9;-- Fechas&#xA;&#x9;UPDATE AUX_ARANCELES_EVOLUCION set inconsistencia = 1 where fecha_convenio &gt; GETDATE()&#xA;&#xA;&#x9;UPDATE AUX_ARANCELES_GALENOS_UNIDADES set fecha_ultimo_convenio = '19000101', inconsistencia = 1 &#xA;&#x9;where isdate(substring(fecha_ultimo_convenio,1,4)+'-'+substring(fecha_ultimo_convenio,5,2)+'-'+substring(fecha_ultimo_convenio,7,2)+' ') = 0&#xA;&#x9;&#xA;&#x9;UPDATE AUX_ARANCELES_GALENOS_UNIDADES set inconsistencia = 1 where CAST(fecha_ultimo_convenio as datetime) &gt; GETDATE() and fecha_ultimo_convenio &lt;&gt; '19000101' -- este filtro fecha_ultimo_convenio &lt;&gt; '19000101' lo pongo para que no me tome los casos del script anterior y tiren error de conversión.&#xA;&#xA;&#xA;&#xA;/* Actualiza dbo.H_ARANCELES_EVOLUCION. */&#xA;&#x9;DECLARE @Periodo INT = (SELECT dbo.PeriodosAnteriores(MAX(id_periodo),4) from H_ARANCELES_EVOLUCION WHERE inconsistencia = 0)&#xA;&#x9;&#x9;&#xA;&#x9;DELETE FROM dbo.H_ARANCELES_EVOLUCION where id_periodo &gt;= @Periodo&#xA;&#xA;-- EXCEPCION&#xA;&#x9;INSERT INTO dbo.H_ARANCELES_EVOLUCION&#xA;&#x9;(id_periodo, fecha_convenio, id_acreedor, id_tipo_prestador, id_modelo_arancel_tarifa, id_producto, id_plan_producto, id_prestacion, id_prestacion_acreedor, id_tipo_galeno_unidad, id_capitulo_imp, id_subcapitulo_imp, importe_evolucion, id_tipo_valorizacion, id_valor_grilla_plan,id_plan_agrupado_convenio, id_categoria, importe_evolucion_anterior, importe_evolucion_anual, fecha_convenio_evolucion, id_tipo_galeno, tipo_unidad_sanatorial, cant_galeno_especialista, cant_galeno_ayudante, cant_ayudante, cant_unidad_sanatorial, importe_galeno, importe_unidad, fecha_vigencia_hasta, id_especialidad_convenio, inconsistencia, id_origen_prestacion_convenio, id_galeno_unidad, fecha_carga_convenio, id_periodo_anterior)&#xA;&#x9;SELECT SUBSTRING(fecha_convenio,1,6) as id_periodo, fecha_convenio, id_acreedor, id_tipo_prestador, id_modelo_arancel_tarifa, id_producto, id_plan_producto, id_nomenclador+de_codigo_prestacion as id_prestacion, id_nomenclador_acreedor+de_codigo_prestacion_acreedor as id_prestacion_acreedor, 0 as id_tipo_galeno_unidad, 0 as id_capitulo_imp, 0 as id_subcapitulo_imp, importe as importe_evolucion, id_tipo_valorizacion, IsNull(id_valor_grilla_plan,0) as id_valor_grilla_plan, IsNull(id_plan_agrupado_convenio,0) as id_plan_agrupado_convenio, ISnull(id_categoria,0) as id_categoria, 0 as importe_evolucion_anterior, 0 as importe_evolucion_anual, CAST(fecha_convenio as datetime) as fecha_convenio_evolucion, 0 as id_tipo_galeno, 0 as tipo_unidad_sanatorial,  0 as cant_galeno_especialista,  0 as cant_galeno_ayudante,  0 as cant_ayudante,  0 as cant_unidad_sanatorial, 0 as importe_galeno, 0 as importe_unidad, IsNull(fecha_vigencia_hasta,0) as fecha_vigencia_hasta, IsNull(id_especialidad,0) as id_especialidad_convenio, IsNull(inconsistencia,0) as inconsistencia, 'V' as id_origen_prestacion_convenio, 0 as id_galeno_unidad, CAST(fecha_carga_convenio as datetime) as fecha_carga_convenio, SUBSTRING(fecha_convenio,1,6) as id_periodo_anterior&#xA;&#x9;FROM AUX_ARANCELES_EVOLUCION&#xA;&#x9;WHERE marca_prestacion = 1 and id_tipo_valorizacion in ('E') and importe &lt;&gt; 0&#xA;&#x9;GROUP BY fecha_convenio, id_acreedor, id_tipo_prestador, id_modelo_arancel_tarifa, id_producto, id_plan_producto, id_nomenclador, de_codigo_prestacion, id_nomenclador_acreedor, de_codigo_prestacion_acreedor, importe, id_tipo_valorizacion, id_valor_grilla_plan, id_plan_agrupado_convenio, id_categoria, fecha_vigencia_hasta, id_especialidad, inconsistencia, fecha_carga_convenio&#xA;&#xA;-- TARIFA&#xA;&#x9;INSERT INTO dbo.H_ARANCELES_EVOLUCION&#xA;&#x9;(id_periodo, fecha_convenio, id_acreedor, id_tipo_prestador, id_modelo_arancel_tarifa, id_producto, id_plan_producto, id_prestacion, id_prestacion_acreedor, id_tipo_galeno_unidad, id_capitulo_imp, id_subcapitulo_imp, importe_evolucion, id_tipo_valorizacion, id_valor_grilla_plan,id_plan_agrupado_convenio, id_categoria, importe_evolucion_anterior, importe_evolucion_anual, fecha_convenio_evolucion, id_tipo_galeno, tipo_unidad_sanatorial, cant_galeno_especialista, cant_galeno_ayudante, cant_ayudante, cant_unidad_sanatorial, importe_galeno, importe_unidad, fecha_vigencia_hasta, id_especialidad_convenio, inconsistencia, id_origen_prestacion_convenio, id_galeno_unidad, fecha_carga_convenio, id_periodo_anterior)&#xA;&#x9;SELECT SUBSTRING(fecha_convenio,1,6) as id_periodo, fecha_convenio, id_acreedor, id_tipo_prestador, id_modelo_arancel_tarifa, id_producto, id_plan_producto, id_nomenclador+de_codigo_prestacion as id_prestacion, id_nomenclador_acreedor+de_codigo_prestacion_acreedor as id_prestacion_acreedor, 0 as id_tipo_galeno_unidad, 0 as id_capitulo_imp, 0 as id_subcapitulo_imp, importe as importe_evolucion, id_tipo_valorizacion, IsNull(id_valor_grilla_plan,0) as id_valor_grilla_plan, IsNull(id_plan_agrupado_convenio,0) as id_plan_agrupado_convenio, ISnull(id_categoria,0) as id_categoria, 0 as importe_evolucion_anterior, 0 as importe_evolucion_anual, CAST(fecha_convenio as datetime) as fecha_convenio_evolucion, 0 as id_tipo_galeno, 0 as tipo_unidad_sanatorial,  0 as cant_galeno_especialista,  0 as cant_galeno_ayudante,  0 as cant_ayudante,  0 as cant_unidad_sanatorial, 0 as importe_galeno, 0 as importe_unidad, IsNull(fecha_vigencia_hasta,0) as fecha_vigencia_hasta, IsNull(id_especialidad,0) as id_especialidad_convenio, IsNull(inconsistencia,0) as inconsistencia, 'V' as id_origen_prestacion_convenio, 0 as id_galeno_unidad, MAX(CAST(fecha_carga_convenio as datetime)) as fecha_carga_convenio, SUBSTRING(fecha_convenio,1,6) as id_periodo_anterior&#xA;&#x9;FROM AUX_ARANCELES_EVOLUCION A&#xA;&#x9;WHERE marca_prestacion = 1 and fecha_fin_vigencia_convenio = '00000000' and id_tipo_valorizacion in ('T') and importe &lt;&gt; 0 --and not exists (select E.id_acreedor, E.id_producto, E.id_plan_producto, E.id_prestacion, E.id_prestacion_acreedor, E.fecha_convenio from dbo.H_ARANCELES_EVOLUCION E where E.id_acreedor = A.id_acreedor and E.id_producto = A.id_producto and E.id_plan_producto = A.id_plan_producto and E.id_prestacion = A.id_nomenclador+A.de_codigo_prestacion and E.id_prestacion_acreedor = A.id_nomenclador_acreedor+A.de_codigo_prestacion_acreedor and E.fecha_convenio = A.fecha_convenio)&#xA;&#x9;GROUP BY fecha_convenio, id_acreedor, id_tipo_prestador, id_modelo_arancel_tarifa, id_producto, id_plan_producto, id_nomenclador, de_codigo_prestacion, id_nomenclador_acreedor, de_codigo_prestacion_acreedor, importe, id_tipo_valorizacion, id_valor_grilla_plan, id_plan_agrupado_convenio, id_categoria, fecha_vigencia_hasta, id_especialidad, inconsistencia--, fecha_carga_convenio&#xA;&#xA;&#xA;-- GALENOS&#xA;&#x9;TRUNCATE TABLE Consultas_DW.dbo.AUX_ARANCELES_GALENOS&#xA;&#x9;INSERT INTO Consultas_DW.dbo.AUX_ARANCELES_GALENOS&#xA;&#x9;SELECT SUBSTRING(fecha_ultimo_convenio,1,6) as id_periodo, fecha_ultimo_convenio as fecha_convenio, id_acreedor, 'P' as id_tipo_prestador, id_cod_arancel as id_modelo_arancel_tarifa, id_producto, id_plan_producto, id_prestacion, '9999999999' as id_prestacion_acreedor, 0 as id_tipo_galeno_unidad, 0 as id_capitulo_imp, 0 as id_subcapitulo_imp, 0 as importe_evolucion, 'G' as id_tipo_valorizacion, 0 as id_valor_grilla_plan, id_plan_agrupado_convenio, id_categoria, 0 as importe_evolucion_anterior, 0 as importe_evolucion_anual, CAST(fecha_ultimo_convenio as datetime) as fecha_convenio_evolucion, id_tipo_galeno, tipo_unidad_sanatorial, cant_galeno_especialista, cant_galeno_ayudante, cant_ayudante, cant_unidad_sanatorial, MAX(importe_galeno) as importe_galeno, MAX(importe_unidad) as importe_unidad, fecha_fin_vigencia as fecha_vigencia_hasta, 0 as id_especialidad_convenio, IsNull(inconsistencia,0) as inconsistencia, id_origen_prestacion as id_origen_prestacion_convenio, 0 as id_galeno_unidad, MAX(CAST(fecha_carga_convenio as datetime)) as fecha_carga_convenio, 0 as id_periodo_anterior, NULL as id_origen_prestacion_orden&#xA;&#x9;from AUX_ARANCELES_GALENOS_UNIDADES A&#xA;&#x9;GROUP BY fecha_ultimo_convenio, id_acreedor, id_cod_arancel, id_producto, id_plan_producto, id_prestacion, fecha_ultimo_convenio, id_tipo_galeno, tipo_unidad_sanatorial, cant_galeno_especialista, cant_galeno_ayudante, cant_ayudante, cant_unidad_sanatorial, inconsistencia, id_plan_agrupado_convenio, id_categoria, fecha_fin_vigencia, id_origen_prestacion&#xA;&#x9;&#xA;&#x9;UPDATE Consultas_DW.dbo.AUX_ARANCELES_GALENOS&#xA;&#x9;SET id_origen_prestacion_orden = CASE WHEN id_origen_prestacion_convenio = 'V' THEN 3 WHEN id_origen_prestacion_convenio = 'A' THEN 2 ELSE 1 END&#xA;&#x9;&#x9;&#xA;&#x9;INSERT INTO dbo.H_ARANCELES_EVOLUCION&#xA;&#x9;(id_periodo, fecha_convenio, id_acreedor, id_tipo_prestador, id_modelo_arancel_tarifa, id_producto, id_plan_producto, id_prestacion, id_prestacion_acreedor, id_tipo_galeno_unidad, id_capitulo_imp, id_subcapitulo_imp, importe_evolucion, id_tipo_valorizacion, id_valor_grilla_plan, id_plan_agrupado_convenio, id_categoria, importe_evolucion_anterior, importe_evolucion_anual, fecha_convenio_evolucion, id_tipo_galeno, tipo_unidad_sanatorial, cant_galeno_especialista, cant_galeno_ayudante, cant_ayudante, cant_unidad_sanatorial, importe_galeno, importe_unidad, fecha_vigencia_hasta, id_especialidad_convenio, inconsistencia, id_origen_prestacion_convenio, id_galeno_unidad, fecha_carga_convenio, id_periodo_anterior)&#xA;&#x9;SELECT id_periodo, fecha_convenio , id_acreedor, id_tipo_prestador, id_modelo_arancel_tarifa, id_producto, id_plan_producto, id_prestacion, '9999999999' AS id_prestacion_acreedor, 0 AS id_tipo_galeno_unidad, 0 AS id_capitulo_imp, 0 AS id_subcapitulo_imp, SUM(importe_evolucion), 'G', 0 AS id_valor_grilla_plan, id_plan_agrupado_convenio, id_categoria, 0 as importe_evolucion_anterior, 0 as importe_evolucion_anual, fecha_convenio_evolucion, id_tipo_galeno, tipo_unidad_sanatorial, cant_galeno_especialista, cant_galeno_ayudante, cant_ayudante, cant_unidad_sanatorial, MAX(importe_galeno), MAX(importe_unidad), MAX(fecha_vigencia_hasta), 0 as id_especialidad_convenio, MIN(inconsistencia), CASE WHEN MAX(id_origen_prestacion_orden) = 3 THEN 'V' WHEN MAX(id_origen_prestacion_orden) = 2 THEN 'A' ELSE 'I' END, id_galeno_unidad, MAX(fecha_carga_convenio), 0 as id_periodo_anterior&#xA;&#x9;FROM Consultas_DW.dbo.AUX_ARANCELES_GALENOS A&#xA;&#x9;GROUP BY id_periodo, fecha_convenio , id_acreedor, id_tipo_prestador, id_modelo_arancel_tarifa, id_producto, id_plan_producto, id_prestacion, id_plan_agrupado_convenio, id_categoria, fecha_convenio_evolucion, id_tipo_galeno, tipo_unidad_sanatorial, cant_galeno_especialista, cant_galeno_ayudante, cant_ayudante, cant_unidad_sanatorial, id_galeno_unidad&#xA;&#x9;&#x9;&#xA;&#xA;/* Actualiza valores anteriores para calcular aumentos. */&#xA;&#xA;select fecha_convenio, id_acreedor, id_tipo_prestador, id_producto, id_plan_producto, id_prestacion, id_prestacion_acreedor, id_especialidad_convenio, id_categoria, 0 as T_anterior, CAST(0 AS FLOAT) importe_anterior, CAST(0 AS FLOAT) importe_evolucion, 0 AS id_periodo_anterior, id_tipo_valorizacion,&#xA;ROW_NUMBER() OVER(PARTITION BY id_acreedor, id_tipo_prestador, id_producto, id_plan_producto, id_prestacion, id_prestacion_acreedor, id_especialidad_convenio, id_categoria ORDER BY fecha_convenio) T&#xA;into #Minimo1&#xA;from dbo.H_ARANCELES_EVOLUCION&#xA;group by fecha_convenio, id_acreedor, id_tipo_prestador, id_producto, id_plan_producto, id_prestacion, id_prestacion_acreedor, id_especialidad_convenio, id_categoria, id_tipo_valorizacion&#xA;order by fecha_convenio&#xA;&#xA;        &#xA;        -- Actualiza la marca T_anterior con el valor de la posicion anterior del orden por fecha.&#xA;        UPDATE #Minimo1 set T_anterior = T-1&#xA;&#xA;&#x9;&#x9;-- Actualiza el importe anterior en #Minimo1.&#xA;&#x9;&#x9;update #Minimo1&#xA;        set id_periodo_anterior = E.id_periodo_anterior&#xA;&#x9;&#x9;from #Minimo1 M1 join (select id_acreedor&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;, id_producto&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;, id_plan_producto&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;, id_prestacion&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;, id_prestacion_acreedor&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;, id_especialidad_convenio&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;, id_categoria&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;, SUBSTRING(MAX(fecha_convenio),1,6)  as id_periodo_anterior&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;, T&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;from #Minimo1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;group by id_acreedor, id_producto, id_plan_producto, id_prestacion, id_prestacion_acreedor, id_especialidad_convenio, id_categoria, T) E&#xA;&#x9;&#x9;on M1.id_acreedor = E.id_acreedor &#xA;&#x9;&#x9;and M1.id_producto = E.id_producto &#xA;&#x9;&#x9;and M1.id_plan_producto = E.id_plan_producto &#xA;&#x9;&#x9;and M1.id_prestacion = E.id_prestacion &#xA;&#x9;&#x9;and M1.id_prestacion_acreedor = E.id_prestacion_acreedor &#xA;&#x9;&#x9;and M1.id_especialidad_convenio = E.id_especialidad_convenio &#xA;&#x9;&#x9;and M1.id_categoria = E.id_categoria &#xA;&#x9;&#x9;and M1.T_anterior = E.T&#xA;&#xA;&#x9;&#xA;&#x9; UPDATE dbo.H_ARANCELES_EVOLUCION &#xA;&#x9;&#x9;set id_periodo_anterior = IsNull(M1.id_periodo_anterior,0)&#x9;&#x9;&#x9;&#x9;&#xA;        FROM #Minimo1 M1&#xA;        JOIN dbo.H_ARANCELES_EVOLUCION E on &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;M1.fecha_convenio = E.fecha_convenio &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and M1.id_acreedor = E.id_acreedor &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and M1.id_tipo_prestador = E.id_tipo_prestador &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and M1.id_producto = E.id_producto &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and M1.id_plan_producto = E.id_plan_producto &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and M1.id_prestacion = E.id_prestacion &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and M1.id_prestacion_acreedor = E.id_prestacion_acreedor &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and M1.id_especialidad_convenio = E.id_especialidad_convenio &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and M1.id_categoria = E.id_categoria &#xA;&#x9;WHERE id_periodo &gt;= @Periodo&#xA;&#xA;&#x9;&#xA;/* SOLUCIONA ERRORES DE GALENOS DONDE EL IMPORTE ES 0, LE BUSCA EL ÚLTIMO QUE TUVO */&#xA;&#xA;TRUNCATE TABLE Consultas_DW.dbo.AUX_ARANCELES_ERRORES&#xA;--IMPORTES&#xA;--DESCARTAMOS LOS CASOS QUE TIENEN TODA LA HISTORIA EN 0 YA QUE NUNCA LE VA A ENCONTRAR EL ANTERIOR&#xA;SELECT DISTINCT id_acreedor, id_prestacion, id_plan_producto, id_categoria, id_especialidad_convenio&#xA;INTO #NO_ANALIZAR_GALENOS&#xA;FROM H_ARANCELES_EVOLUCION &#xA;WHERE id_tipo_valorizacion = 'G' &#xA;GROUP BY id_acreedor, id_prestacion, id_plan_producto, id_categoria, id_especialidad_convenio&#xA;HAVING SUM(importe_galeno)=0&#xA;&#xA;-- HAY CASOS QUE EMPIEZAN EN 0 Y LUEGO TIENEN VALOR. DETECTAMOS ESTOS CASOS PARA EL PROCESO QUE VIENE DESPUES PUEDA FINALIZAR, &#xA;--YA QUE SINO SIEMPRE ENCUENTRA DATOS PARA ACTUALIZAR&#xA;INSERT INTO #NO_ANALIZAR_GALENOS&#xA;SELECT DISTINCT id_acreedor, id_prestacion, id_plan_producto, id_categoria, id_especialidad_convenio&#xA;FROM H_ARANCELES_EVOLUCION H&#xA;WHERE id_tipo_valorizacion = 'G' AND NOT EXISTS (SELECT * FROM #NO_ANALIZAR_GALENOS N &#xA;WHERE N.id_acreedor=H.id_acreedor &#xA;AND N.id_prestacion=H.id_prestacion &#xA;AND N.id_plan_producto=H.id_plan_producto &#xA;AND N.id_categoria=H.id_categoria&#xA;AND N.id_especialidad_convenio=H.id_especialidad_convenio)&#xA;AND H.id_periodo_anterior = 0&#xA;AND importe_galeno = 0&#xA;GROUP BY id_acreedor, id_prestacion, id_plan_producto, id_categoria, id_especialidad_convenio&#xA;&#xA;-- INSERTA EN LA TABLA FISICA PARA QUE SEA MAS RAPIDA LA BUSQUEDA.&#xA;INSERT INTO Consultas_DW.dbo.AUX_ARANCELES_ERRORES&#xA;SELECT id_periodo, id_periodo_anterior, id_acreedor, id_prestacion, id_plan_producto, id_categoria, id_especialidad_convenio, importe_galeno, importe_unidad FROM H_ARANCELES_EVOLUCION H &#xA;WHERE id_tipo_valorizacion = 'G' and importe_galeno = 0 AND&#xA;NOT EXISTS (SELECT id_acreedor FROM #NO_ANALIZAR_GALENOS T &#xA;WHERE T.id_acreedor=H.id_acreedor &#xA;AND T.id_prestacion=H.id_prestacion &#xA;AND T.id_plan_producto=H.id_plan_producto &#xA;AND T.id_categoria=H.id_categoria&#xA;AND T.id_especialidad_convenio=H.id_especialidad_convenio)&#xA;&#xA;&#xA;-- LOS CASOS DONDE EL PRIMER REGISTRO ES 0 NO SE PUEDEN ACTUALIZAR YA QUE NO TIENE VALOR ANTERIOR. A PESAR DE ESTO HAY CASOS QUE DESPUES TIENEN UN 0 Y DEBE SER ACTUALIZADO&#xA;-- POR LO QUE SE INSERTAN EN LA TABLA PARA QUE EL PROCESO QUE SIGUE LOS TENGA EN CUENTA.&#xA;INSERT INTO Consultas_DW.dbo.AUX_ARANCELES_ERRORES&#xA;SELECT id_periodo, id_periodo_anterior, id_acreedor, id_prestacion, id_plan_producto, id_categoria, id_especialidad_convenio, importe_galeno, importe_unidad &#xA;FROM H_ARANCELES_EVOLUCION H WHERE &#xA;id_tipo_valorizacion = 'G' AND importe_galeno = 0 AND&#xA;EXISTS (SELECT id_acreedor FROM H_ARANCELES_EVOLUCION T &#xA;WHERE T.id_acreedor=H.id_acreedor &#xA;AND T.id_prestacion=H.id_prestacion &#xA;AND T.id_plan_producto=H.id_plan_producto &#xA;AND T.id_categoria=H.id_categoria&#xA;AND T.id_especialidad_convenio=H.id_especialidad_convenio&#xA;AND T.importe_galeno&gt;0&#xA;AND H.id_periodo&gt;T.id_periodo&#xA;AND T.id_tipo_valorizacion = 'G')&#xA;&#x9;&#x9;&#xA;WHILE (SELECT TOP 1 id_acreedor FROM Consultas_DW.dbo.AUX_ARANCELES_ERRORES) IS NOT NULL&#xA;&#xA;&#x9;BEGIN&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;TRUNCATE TABLE Consultas_DW.dbo.AUX_ARANCELES_ERRORES&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;INSERT INTO Consultas_DW.dbo.AUX_ARANCELES_ERRORES&#xA;&#x9;&#x9;&#x9;SELECT DISTINCT id_periodo, id_periodo_anterior, id_acreedor, id_prestacion, id_plan_producto, id_categoria, id_especialidad_convenio, importe_galeno, importe_unidad&#xA;&#x9;&#x9;&#x9;from H_ARANCELES_EVOLUCION H WHERE id_tipo_valorizacion = 'G' AND importe_galeno = 0 AND NOT EXISTS (SELECT id_acreedor FROM #NO_ANALIZAR_GALENOS T &#xA;&#x9;&#x9;&#x9;WHERE T.id_acreedor=H.id_acreedor &#xA;&#x9;&#x9;&#x9;AND T.id_prestacion=H.id_prestacion &#xA;&#x9;&#x9;&#x9;AND T.id_plan_producto=H.id_plan_producto &#xA;&#x9;&#x9;&#x9;AND T.id_categoria=H.id_categoria&#xA;&#x9;&#x9;&#x9;AND T.id_especialidad_convenio=H.id_especialidad_convenio)&#xA;&#xA;&#x9;&#x9;&#x9;INSERT INTO Consultas_DW.dbo.AUX_ARANCELES_ERRORES&#xA;&#x9;&#x9;&#x9;SELECT DISTINCT id_periodo, id_periodo_anterior, id_acreedor, id_prestacion, id_plan_producto, id_categoria, id_especialidad_convenio, importe_galeno, importe_unidad &#xA;&#x9;&#x9;&#x9;FROM H_ARANCELES_EVOLUCION H WHERE &#xA;&#x9;&#x9;&#x9;id_tipo_valorizacion = 'G' AND importe_galeno = 0 AND&#xA;&#x9;&#x9;&#x9;EXISTS (SELECT id_acreedor FROM H_ARANCELES_EVOLUCION T &#xA;&#x9;&#x9;&#x9;WHERE T.id_acreedor=H.id_acreedor &#xA;&#x9;&#x9;&#x9;AND T.id_prestacion=H.id_prestacion &#xA;&#x9;&#x9;&#x9;AND T.id_plan_producto=H.id_plan_producto &#xA;&#x9;&#x9;&#x9;AND T.id_categoria=H.id_categoria&#xA;&#x9;&#x9;&#x9;AND T.id_especialidad_convenio=H.id_especialidad_convenio&#xA;&#x9;&#x9;&#x9;AND T.importe_galeno&gt;0&#xA;&#x9;&#x9;&#x9;AND H.id_periodo&gt;T.id_periodo&#xA;&#x9;&#x9;&#x9;AND T.id_tipo_valorizacion = 'G')&#xA;&#xA;&#x9;&#x9;&#x9;UPDATE T&#xA;&#x9;&#x9;&#x9;SET importe_galeno = H.importe_galeno&#xA;&#x9;&#x9;&#x9;FROM Consultas_DW.dbo.AUX_ARANCELES_ERRORES T LEFT JOIN H_ARANCELES_EVOLUCION H ON &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;T.id_periodo_anterior=H.id_periodo &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AND T.id_acreedor=H.id_acreedor &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AND T.id_prestacion=H.id_prestacion &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AND T.id_plan_producto=H.id_plan_producto&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AND T.id_categoria = H.id_categoria &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AND T.id_especialidad_convenio = H.id_especialidad_convenio&#xA;&#x9;&#x9;&#x9;WHERE H.importe_galeno &lt;&gt; 0 AND T.importe_galeno = 0 AND H.id_tipo_valorizacion = 'G' AND T.id_periodo &gt;= @Periodo&#xA;&#xA;&#x9;&#x9;&#x9;UPDATE H&#xA;&#x9;&#x9;&#x9;SET importe_galeno = T.importe_galeno&#xA;&#x9;&#x9;&#x9;FROM Consultas_DW.dbo.AUX_ARANCELES_ERRORES T LEFT JOIN H_ARANCELES_EVOLUCION H ON &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;T.id_periodo=H.id_periodo &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AND T.id_acreedor=H.id_acreedor &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AND T.id_prestacion=H.id_prestacion &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AND T.id_plan_producto=H.id_plan_producto&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AND T.id_categoria = H.id_categoria &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AND T.id_especialidad_convenio = H.id_especialidad_convenio&#xA;&#x9;&#x9;&#x9;WHERE H.importe_galeno = 0 AND T.importe_galeno &lt;&gt; 0 AND H.id_tipo_valorizacion = 'G' AND T.id_periodo &gt;= @Periodo&#xA;&#xA;&#x9;END&#xA;&#xA;&#x9;&#x9;&#x9;DROP TABLE #NO_ANALIZAR_GALENOS&#xA;&#xA;/* SOLUCIONA ERRORES DE GALENOS DONDE LA UNIDAD ES 0, LE BUSCA EL ÚLTIMO QUE TUVO */&#xA;&#xA;TRUNCATE TABLE Consultas_DW.dbo.AUX_ARANCELES_ERRORES&#xA;--IMPORTES&#xA;--DESCARTAMOS LOS CASOS QUE TIENEN TODA LA HISTORIA EN 0 YA QUE NUNCA LE VA A ENCONTRAR EL ANTERIOR&#xA;SELECT DISTINCT id_acreedor, id_prestacion, id_plan_producto, id_categoria, id_especialidad_convenio&#xA;INTO #NO_ANALIZAR_UNIDADES&#xA;FROM H_ARANCELES_EVOLUCION &#xA;WHERE id_tipo_valorizacion = 'G' &#xA;GROUP BY id_acreedor, id_prestacion, id_plan_producto, id_categoria, id_especialidad_convenio&#xA;HAVING SUM(importe_unidad)=0&#xA;&#xA;-- HAY CASOS QUE EMPIEZAN EN 0 Y LUEGO TIENEN VALOR. DETECTAMOS ESTOS CASOS PARA EL PROCESO QUE VIENE DESPUES PUEDA FINALIZAR, &#xA;--YA QUE SINO SIEMPRE ENCUENTRA DATOS PARA ACTUALIZAR&#xA;INSERT INTO #NO_ANALIZAR_UNIDADES&#xA;SELECT DISTINCT id_acreedor, id_prestacion, id_plan_producto, id_categoria, id_especialidad_convenio&#xA;FROM H_ARANCELES_EVOLUCION H&#xA;WHERE id_tipo_valorizacion = 'G' AND NOT EXISTS (SELECT * FROM #NO_ANALIZAR_UNIDADES N &#xA;WHERE N.id_acreedor=H.id_acreedor &#xA;AND N.id_prestacion=H.id_prestacion &#xA;AND N.id_plan_producto=H.id_plan_producto &#xA;AND N.id_categoria=H.id_categoria&#xA;AND N.id_especialidad_convenio=H.id_especialidad_convenio)&#xA;AND H.id_periodo_anterior = 0&#xA;AND importe_unidad = 0&#xA;GROUP BY id_acreedor, id_prestacion, id_plan_producto, id_categoria, id_especialidad_convenio&#xA;&#xA;INSERT INTO Consultas_DW.dbo.AUX_ARANCELES_ERRORES&#xA;SELECT id_periodo, id_periodo_anterior, id_acreedor, id_prestacion, id_plan_producto, id_categoria, id_especialidad_convenio, importe_galeno, importe_unidad &#xA;FROM H_ARANCELES_EVOLUCION H &#xA;WHERE id_tipo_valorizacion = 'G' and importe_unidad = 0 AND&#xA;NOT EXISTS (SELECT id_acreedor FROM #NO_ANALIZAR_UNIDADES T &#xA;WHERE T.id_acreedor=H.id_acreedor &#xA;AND T.id_prestacion=H.id_prestacion &#xA;AND T.id_plan_producto=H.id_plan_producto &#xA;AND T.id_categoria=H.id_categoria&#xA;AND T.id_especialidad_convenio=H.id_especialidad_convenio)&#xA;&#x9;&#xA;-- LOS CASOS DONDE EL PRIMER REGISTRO ES 0 NO SE PUEDEN ACTUALIZAR YA QUE NO TIENE VALOR ANTERIOR. A PESAR DE ESTO HAY CASOS QUE DESPUES TIENEN UN 0 Y DEBE SER ACTUALIZADO&#xA;-- POR LO QUE SE INSERTAN EN LA TABLA PARA QUE EL PROCESO QUE SIGUE LOS TENGA EN CUENTA.&#xA;&#x9;&#xA;INSERT INTO Consultas_DW.dbo.AUX_ARANCELES_ERRORES&#xA;SELECT id_periodo, id_periodo_anterior, id_acreedor, id_prestacion, id_plan_producto, id_categoria, id_especialidad_convenio, importe_galeno, importe_unidad &#xA;FROM H_ARANCELES_EVOLUCION H WHERE &#xA;id_tipo_valorizacion = 'G' AND importe_unidad = 0 AND&#xA;EXISTS (SELECT id_acreedor FROM H_ARANCELES_EVOLUCION T &#xA;WHERE T.id_acreedor=H.id_acreedor &#xA;AND T.id_prestacion=H.id_prestacion &#xA;AND T.id_plan_producto=H.id_plan_producto &#xA;AND T.id_categoria=H.id_categoria&#xA;AND T.id_especialidad_convenio=H.id_especialidad_convenio&#xA;AND T.importe_unidad&gt;0&#xA;AND H.id_periodo&gt;T.id_periodo&#xA;AND id_tipo_valorizacion = 'G')&#xA;&#xA;WHILE (SELECT TOP 1 id_acreedor FROM Consultas_DW.dbo.AUX_ARANCELES_ERRORES) IS NOT NULL&#xA;&#xA;&#x9;BEGIN&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;TRUNCATE TABLE Consultas_DW.dbo.AUX_ARANCELES_ERRORES&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;INSERT INTO Consultas_DW.dbo.AUX_ARANCELES_ERRORES&#xA;&#x9;&#x9;&#x9;SELECT id_periodo, id_periodo_anterior, id_acreedor, id_prestacion, id_plan_producto, id_categoria, id_especialidad_convenio, importe_galeno, importe_unidad&#xA;&#x9;&#x9;&#x9;from H_ARANCELES_EVOLUCION H &#xA;&#x9;&#x9;&#x9;WHERE id_tipo_valorizacion = 'G' AND importe_unidad = 0 &#xA;&#x9;&#x9;&#x9;AND NOT EXISTS (SELECT id_acreedor FROM #NO_ANALIZAR_UNIDADES T &#xA;&#x9;&#x9;&#x9;WHERE T.id_acreedor=H.id_acreedor &#xA;&#x9;&#x9;&#x9;AND T.id_prestacion=H.id_prestacion &#xA;&#x9;&#x9;&#x9;AND T.id_plan_producto=H.id_plan_producto &#xA;&#x9;&#x9;&#x9;AND T.id_categoria=H.id_categoria&#xA;&#x9;&#x9;&#x9;AND T.id_especialidad_convenio=H.id_especialidad_convenio)&#xA;&#xA;&#x9;&#x9;&#x9;INSERT INTO Consultas_DW.dbo.AUX_ARANCELES_ERRORES&#xA;&#x9;&#x9;&#x9;SELECT id_periodo, id_periodo_anterior, id_acreedor, id_prestacion, id_plan_producto, id_categoria, id_especialidad_convenio, importe_galeno, importe_unidad &#xA;&#x9;&#x9;&#x9;FROM H_ARANCELES_EVOLUCION H WHERE &#xA;&#x9;&#x9;&#x9;id_tipo_valorizacion = 'G' AND importe_unidad = 0 AND&#xA;&#x9;&#x9;&#x9;EXISTS (SELECT id_acreedor FROM H_ARANCELES_EVOLUCION T &#xA;&#x9;&#x9;&#x9;WHERE T.id_acreedor=H.id_acreedor &#xA;&#x9;&#x9;&#x9;AND T.id_prestacion=H.id_prestacion &#xA;&#x9;&#x9;&#x9;AND T.id_plan_producto=H.id_plan_producto &#xA;&#x9;&#x9;&#x9;AND T.id_categoria=H.id_categoria&#xA;&#x9;&#x9;&#x9;AND T.id_especialidad_convenio=H.id_especialidad_convenio&#xA;&#x9;&#x9;&#x9;AND T.importe_unidad&gt;0&#xA;&#x9;&#x9;&#x9;AND H.id_periodo&gt;T.id_periodo&#xA;&#x9;&#x9;&#x9;AND id_tipo_valorizacion = 'G')&#xA;&#xA;&#x9;&#x9;&#x9;UPDATE T&#xA;&#x9;&#x9;&#x9;SET importe_unidad = H.importe_unidad&#xA;&#x9;&#x9;&#x9;FROM Consultas_DW.dbo.AUX_ARANCELES_ERRORES T LEFT JOIN H_ARANCELES_EVOLUCION H ON &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;T.id_periodo_anterior=H.id_periodo &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AND T.id_acreedor=H.id_acreedor &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AND T.id_prestacion=H.id_prestacion &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AND T.id_plan_producto=H.id_plan_producto&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AND T.id_categoria = H.id_categoria &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AND T.id_especialidad_convenio = H.id_especialidad_convenio&#xA;&#x9;&#x9;&#x9;WHERE H.importe_unidad &lt;&gt; 0 AND T.importe_unidad = 0 AND H.id_tipo_valorizacion = 'G' AND T.id_periodo &gt;= @Periodo&#xA;&#xA;&#x9;&#x9;&#x9;UPDATE H&#xA;&#x9;&#x9;&#x9;SET importe_unidad = T.importe_unidad&#xA;&#x9;&#x9;&#x9;FROM Consultas_DW.dbo.AUX_ARANCELES_ERRORES T LEFT JOIN H_ARANCELES_EVOLUCION H ON &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;T.id_periodo=H.id_periodo &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AND T.id_acreedor=H.id_acreedor &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AND T.id_prestacion=H.id_prestacion &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AND T.id_plan_producto=H.id_plan_producto&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AND T.id_categoria = H.id_categoria &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;AND T.id_especialidad_convenio = H.id_especialidad_convenio&#xA;&#x9;&#x9;&#x9;WHERE H.importe_unidad = 0 AND T.importe_unidad &lt;&gt; 0 AND H.id_tipo_valorizacion = 'G' AND T.id_periodo &gt;= @Periodo&#xA;&#xA;&#x9;END&#xA;&#xA;&#x9;&#x9;&#x9;DROP TABLE #NO_ANALIZAR_UNIDADES&#xA;&#xA;/* ACTUALIZA LOS IMPORTES DE GALENOS */&#xA;&#xA;&#x9;UPDATE dbo.H_ARANCELES_EVOLUCION &#xA;&#x9;&#x9;SET importe_evolucion = IsNull((importe_galeno*(cant_galeno_especialista+(cant_ayudante*cant_galeno_ayudante))+importe_unidad*cant_unidad_sanatorial),0)&#xA;&#x9;where id_tipo_valorizacion = 'G' AND id_periodo &gt;= @Periodo&#xA;&#xA;&#x9;UPDATE H&#xA;&#x9;SET importe_evolucion_anterior = A.importe_evolucion&#xA;&#x9;FROM H_ARANCELES_EVOLUCION H &#xA;&#x9;INNER JOIN H_ARANCELES_EVOLUCION A&#xA;&#x9;ON (A.id_acreedor=H.id_acreedor &#xA;&#x9;AND A.id_prestacion=H.id_prestacion &#xA;&#x9;AND A.id_plan_producto=H.id_plan_producto &#xA;&#x9;AND A.id_categoria=H.id_categoria&#xA;&#x9;AND A.id_especialidad_convenio=H.id_especialidad_convenio&#xA;&#x9;AND A.id_prestacion_acreedor=H.id_prestacion_acreedor&#xA;&#x9;AND A.id_periodo=H.id_periodo_anterior)&#xA;&#x9;WHERE H.importe_evolucion_anterior = 0&#xA;/* Aisla errores de carga */&#xA;&#xA;&#x9;-- Este script pone un inicio a los importes de evolución. Se da siempre en los inicios del importe, el cual no tiene historia para pegar en ese registro de importe evolucion.&#xA;&#x9;&#xA;&#x9;&#x9;--UPDATE dbo.H_ARANCELES_EVOLUCION set importe_evolucion_anterior = importe_evolucion WHERE importe_evolucion_anterior = 0&#xA;&#x9;&#x9;UPDATE H_ARANCELES_EVOLUCION SET inconsistencia = 3 WHERE (importe_evolucion &gt; 10000000 or importe_evolucion &lt; 0.5) AND id_periodo &gt;= @Periodo&#xA;&#x9;&#x9;UPDATE H_ARANCELES_EVOLUCION SET inconsistencia = 2 WHERE importe_evolucion = 0 AND id_periodo &gt;= @Periodo&#xA;&#x9;&#x9;UPDATE H_ARANCELES_EVOLUCION SET inconsistencia = 1 WHERE id_tipo_valorizacion = 'G' AND id_periodo &gt;= @Periodo AND ((fecha_convenio = '19000101') OR (fecha_convenio_evolucion &gt; GETDATE() AND fecha_convenio &lt;&gt; '19000101'))&#xA;&#x9;&#x9;--UPDATE dbo.H_ARANCELES_EVOLUCION set importe_evolucion_anterior = 1 WHERE importe_evolucion = 1 and importe_evolucion_anterior = 0&#xA;&#xA;&#x9;&#x9;update #Minimo1&#xA;        set id_periodo_anterior = 0&#xA;&#xA;&#x9;&#x9;update #Minimo1&#xA;        set id_periodo_anterior = E.id_periodo_anterior&#xA;&#x9;&#x9;from #Minimo1 M1 join (select id_acreedor&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;, id_producto&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;, id_plan_producto&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;, id_prestacion&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;, id_prestacion_acreedor&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;, id_especialidad_convenio&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;, id_categoria&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;, SUBSTRING(MAX(fecha_convenio),1,6)  as id_periodo_anterior&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;, id_tipo_valorizacion&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;, T&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;from #Minimo1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;group by id_acreedor, id_producto, id_plan_producto, id_prestacion, id_prestacion_acreedor, id_especialidad_convenio, id_categoria, id_tipo_valorizacion, T) E&#xA;&#x9;&#x9;on M1.id_acreedor = E.id_acreedor &#xA;&#x9;&#x9;and M1.id_producto = E.id_producto &#xA;&#x9;&#x9;and M1.id_plan_producto = E.id_plan_producto &#xA;&#x9;&#x9;and M1.id_prestacion = E.id_prestacion &#xA;&#x9;&#x9;and M1.id_prestacion_acreedor = E.id_prestacion_acreedor &#xA;&#x9;&#x9;and M1.id_especialidad_convenio = E.id_especialidad_convenio &#xA;&#x9;&#x9;and M1.id_categoria = E.id_categoria &#xA;&#x9;&#x9;and M1.T_anterior = E.T&#xA;&#x9;&#x9;and M1.id_tipo_valorizacion = E.id_tipo_valorizacion&#xA;&#xA;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#xA;&#x9; UPDATE dbo.H_ARANCELES_EVOLUCION &#xA;&#x9;&#x9;set id_periodo_anterior = IsNull(M1.id_periodo_anterior,0)&#x9;&#x9;&#x9;&#x9;&#xA;        FROM #Minimo1 M1&#xA;        JOIN dbo.H_ARANCELES_EVOLUCION E on &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;M1.fecha_convenio = E.fecha_convenio &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and M1.id_acreedor = E.id_acreedor &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and M1.id_tipo_prestador = E.id_tipo_prestador &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and M1.id_producto = E.id_producto &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and M1.id_plan_producto = E.id_plan_producto &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and M1.id_prestacion = E.id_prestacion &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and M1.id_prestacion_acreedor = E.id_prestacion_acreedor &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and M1.id_especialidad_convenio = E.id_especialidad_convenio &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;and M1.id_categoria = E.id_categoria &#xA;&#x9;WHERE id_periodo &gt;= @Periodo&#xA;&#xA;&#x9;drop table #Minimo1&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Actualiza H_ARANCELES_EVOLUCION_RELLENO"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{D25CA706-97E5-4F35-A478-CECD40399F04}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Actualiza H_ARANCELES_EVOLUCION_RELLENO"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:LoggingOptions
        DTS:FilterKind="0" />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{7705AE95-4A1E-4600-AF08-B019CC52882F}"
          SQLTask:SqlStatementSource="if exists (SELECT * FROM sysobjects WHERE name = 'TEMP_ARANCELES_CROSS') begin drop table TEMP_ARANCELES_CROSS end&#xA;if exists (SELECT * FROM sysobjects WHERE name = 'TEMP_FINAL_ARANCELES') begin drop table TEMP_FINAL_ARANCELES end&#xA;--LLENAMOS LA TABLA AUXILIAR PARA NO TRABAJAR DERECHO SOBRE LA DE PRODUCCION&#xA;TRUNCATE TABLE AUX_H_ARANCELES_EVOLUCION_RELLENO&#xA;&#xA;&#xA;DECLARE @Periodo VARCHAR(8)&#xA;SET @Periodo = (select CAST(dbo.PeriodosAnteriores(MAX(id_periodo), 48)AS VARCHAR(6)) FROM D_PERIODO)&#xA;&#xA;INSERT INTO AUX_H_ARANCELES_EVOLUCION_RELLENO&#xA;SELECT H.* FROM H_ARANCELES_EVOLUCION H join Consultas_DW.dbo.FILTRO_ACREEDOR_PREST_ARANCELES F on F.AcreedorID = H.id_acreedor and F.PrestacionID = H.id_prestacion&#xA;WHERE id_periodo &gt;= @Periodo and inconsistencia = 0&#xA;order by fecha_convenio&#xA;&#xA;&#xA;--CALCULAMOS EL NRO DE FILA, PARA OBENER EL VALOR POSTERIOR ORDENADO POR LA CLAVE EN CUESTION.&#xA;go&#xA;with    cte &#xA;        as ( select   row_number() over (order by id_acreedor, id_prestacion_acreedor, id_prestacion, id_plan_producto, id_categoria, id_especialidad_convenio, id_periodo) NroFila , &#xA;                    id_periodo, &#xA;                    id_acreedor,&#xA;     id_prestacion_acreedor, &#xA;     id_prestacion, &#xA;     id_plan_producto,&#xA;     id_categoria, &#xA;     id_especialidad_convenio                    &#xA;            from     AUX_H_ARANCELES_EVOLUCION_RELLENO&#xA;   group by id_acreedor, id_prestacion_acreedor, id_prestacion, id_plan_producto, id_categoria, id_especialidad_convenio, id_periodo) &#xA;select  cte.NroFila,&#xA;  cte.id_periodo,&#xA;  cte.id_acreedor,&#xA;  cte.id_prestacion_acreedor, &#xA;  cte.id_prestacion, &#xA;  cte.id_plan_producto,&#xA;  cte.id_categoria,&#xA;  cte.id_especialidad_convenio,&#xA;  isnull(lead.id_periodo, cte.id_periodo) 'id_periodo_posterior'&#xA;  INTO #TEMP&#xA;from    cte &#xA;       left join cte lead on cte.NroFila + 1 = lead.NroFila&#xA;    &#xA;--PERIODO MAXIMO Y MINIMO DE CADA CLAVE&#xA;SELECT id_acreedor, id_prestacion_acreedor, id_prestacion, id_plan_producto, id_categoria, id_especialidad_convenio, MAX(id_periodo) id_periodo,&#xA;CONVERT(DATETIME, 0) AS fecha_convenio_evolucion,CONVERT(DATETIME, 0) AS fecha_carga_convenio, 0 as importe_evolución, '' as id_tipo_valorizacion&#xA;INTO #PERIODOMAX &#xA;FROM AUX_H_ARANCELES_EVOLUCION_RELLENO&#xA;GROUP BY id_acreedor, id_prestacion_acreedor, id_prestacion, id_plan_producto, id_categoria, id_especialidad_convenio&#xA;&#xA;SELECT id_acreedor, id_prestacion_acreedor, id_prestacion, id_plan_producto, id_categoria, id_especialidad_convenio, MIN(id_periodo) id_periodo,&#xA;CONVERT(DATETIME, 0) AS fecha_convenio_evolucion,CONVERT(DATETIME, 0) AS fecha_carga_convenio, 0 as importe_evolución, '' as id_tipo_valorizacion&#xA;INTO #PERIODOMIN &#xA;FROM AUX_H_ARANCELES_EVOLUCION_RELLENO&#xA;GROUP BY id_acreedor, id_prestacion_acreedor, id_prestacion, id_plan_producto, id_categoria, id_especialidad_convenio&#xA;&#xA;update #PERIODOMIN &#xA;set importe_evolución = T.importe_evolucion,&#xA;fecha_carga_convenio = T.fecha_carga_convenio,&#xA;fecha_convenio_evolucion = T.fecha_convenio_evolucion,&#xA;id_tipo_valorizacion = T.id_tipo_valorizacion&#xA;from #PERIODOMIN P join AUX_H_ARANCELES_EVOLUCION_RELLENO T ON (T.id_periodo=P.id_periodo AND T.id_acreedor=P.id_acreedor AND T.id_prestacion=P.id_prestacion &#xA;          AND T.id_prestacion_acreedor=P.id_prestacion_acreedor AND T.id_plan_producto=P.id_plan_producto&#xA;          AND T.id_categoria = P.id_categoria AND T.id_especialidad_convenio = P.id_especialidad_convenio)&#xA;&#xA;          &#xA;--SE HACE CROSS JOIN PARA OBTENER TODOS LOS DATOS PARA TODOS LOS PERIODOS&#xA;SELECT MAX([fecha_carga_convenio]) AS [fecha_carga_convenio]&#xA;   ,MAX([fecha_convenio_evolucion]) AS [fecha_convenio_evolucion]&#xA;   ,[id_acreedor]&#xA;      ,MAX([id_producto]) AS [id_producto]&#xA;      ,[id_plan_producto]&#xA;      ,[id_prestacion]&#xA;      ,[id_prestacion_acreedor]&#xA;      ,MAX([importe_evolucion]) AS [importe_evolucion]&#xA;      ,[id_categoria] &#xA;      ,MAX([importe_evolucion_anterior]) AS [importe_evolucion_anterior]&#xA;      ,A.[id_periodo]&#xA;      ,MAX([id_periodo_anterior]) AS [id_periodo_anterior]&#xA;   ,P.id_periodo id_periodo_aux, &#xA;   id_especialidad_convenio,&#xA;   id_tipo_valorizacion,&#xA;   NULL as id_periodo_max,&#xA;   NULL AS marca1, &#xA;   NULL AS marca2, &#xA;   NULL AS marca3, &#xA;   NULL AS marca4, &#xA;   NULL AS marca5, &#xA;   NULL AS marca6,--aca en la marca 6 voy a meter todos los casos futuros, para tomar desde el ultimo mes que tuvo aumento hasta el fin de ejercicio&#xA;   NULL as marca_final&#xA;INTO TEMP_ARANCELES_CROSS&#xA;FROM AUX_H_ARANCELES_EVOLUCION_RELLENO A CROSS JOIN (select id_periodo from D_PERIODO where id_periodo &gt;= 201601) P&#xA;GROUP BY id_acreedor&#xA;  ,id_prestacion_acreedor&#xA;  ,id_prestacion&#xA;  ,id_plan_producto&#xA;  ,id_categoria&#xA;  ,id_especialidad_convenio&#xA;  ,A.id_periodo&#xA;  ,P.id_periodo&#xA;  ,id_tipo_valorizacion&#xA;ORDER BY A.id_periodo, P.id_periodo&#xA;&#xA;&#xA;UPDATE TEMP_ARANCELES_CROSS&#xA;SET id_periodo_anterior = id_periodo&#xA;WHERE id_periodo_anterior = 0&#xA;&#xA;--MARCAMOS CUAL ES EL PERIODO MAXIMO PARA CADA MES QUE TIENE AUMENTO&#xA;UPDATE TEMP_ARANCELES_CROSS&#xA;SET id_periodo_max = P.id_periodo&#xA;FROM TEMP_ARANCELES_CROSS A RIGHT JOIN #PERIODOMAX P ON (P.id_acreedor=A.id_acreedor AND P.id_prestacion=A.id_prestacion &#xA;            AND P.id_prestacion_acreedor=A.id_prestacion_acreedor AND P.id_plan_producto=A.id_plan_producto&#xA;            AND A.id_categoria = P.id_categoria and A.id_especialidad_convenio = P.id_especialidad_convenio)&#xA;&#xA;            &#xA;SELECT A.*, &#xA;  id_periodo_posterior, &#xA;  CONVERT(INT, 0) AS id_marca_aumento_real,&#xA;  CONVERT(INT, 0) AS cant_meses_diferencia_carga_vigencia,&#xA;  CONVERT(DATETIME, 0) AS fecha_carga_valor_ini_ej_ant, &#xA;  CONVERT(DATETIME, 0) AS fecha_convenio_valor_ini_ej_ant,&#xA;  CONVERT(DATETIME, 0) AS fecha_carga_importe_ant, &#xA;  CONVERT(DATETIME, 0) AS fecha_convenio_importe_ant,&#xA;  CONVERT(FLOAT,0) as consumo_prorrateado, &#xA;  CONVERT(FLOAT,0) as valor_ini_ej_ant, &#xA;  CONVERT(FLOAT,0) as var_acum, &#xA;  CONVERT(FLOAT,0) as var_ej_cons_pror, &#xA;  CONVERT(FLOAT,0) as var_mensual, &#xA;  CONVERT(FLOAT,0) as var_mens_cons_pror, &#xA;  CONVERT(FLOAT,0) AS aumento_sss_relleno, &#xA;  CONVERT(FLOAT,0) AS aumento_sss_relleno_acumulado, &#xA;  CONVERT(FLOAT,0) AS aumento_sss_relleno_acumulado_per_ant,&#xA;  CONVERT(FLOAT,0) AS aumento_sss_relleno_acumulado_ej_ant,&#xA;  '' AS id_tipo_valorizacion_ej_ant,&#xA;  '' AS id_tipo_valorizacion_per_ant,&#xA;  CONVERT(INT, 0) AS marca_consumo,&#xA;  CONVERT(INT, 0) AS id_periodo_carga_convenio&#xA;INTO TEMP_FINAL_ARANCELES &#xA;FROM #TEMP T INNER JOIN TEMP_ARANCELES_CROSS A ON (T.id_periodo=A.id_periodo AND T.id_acreedor=A.id_acreedor AND T.id_prestacion=A.id_prestacion &#xA;          AND T.id_prestacion_acreedor=A.id_prestacion_acreedor AND T.id_plan_producto=A.id_plan_producto&#xA;          AND T.id_categoria = A.id_categoria AND T.id_especialidad_convenio = A.id_especialidad_convenio)&#xA;&#xA;--SE PEGA EL MAXIMO A LOS CASOS EN QUE NO TIENEN CARGADO TODAVIA AUMENTO POSTERIOR&#xA;UPDATE TEMP_FINAL_ARANCELES&#xA;SET id_periodo_posterior = P.id_periodo&#xA;FROM TEMP_FINAL_ARANCELES T INNER JOIN #PERIODOMAX P ON (T.id_periodo=P.id_periodo AND T.id_acreedor=P.id_acreedor AND T.id_prestacion=P.id_prestacion &#xA;          AND T.id_prestacion_acreedor=P.id_prestacion_acreedor AND T.id_plan_producto=P.id_plan_producto&#xA;          AND T.id_categoria = P.id_categoria AND T.id_especialidad_convenio = P.id_especialidad_convenio)&#xA;&#xA;--ESTAS 7 MARCAS SIRVEN PARA MARCAR Y EXCLUIR LOS CASOS QUE NO SE TIENEN QUE TOMAR. POR CUALQUIER CONSULTA VER CON VALE&#xA;UPDATE TEMP_FINAL_ARANCELES&#xA;SET marca1 = 1&#xA;WHERE id_periodo = id_periodo_aux&#xA;&#xA;UPDATE TEMP_FINAL_ARANCELES&#xA;SET marca2 = 1&#xA;WHERE id_periodo_aux &lt; id_periodo_posterior AND id_periodo_aux &gt; id_periodo_anterior&#xA;&#xA;UPDATE TEMP_FINAL_ARANCELES&#xA;SET marca3 = 1&#xA;WHERE id_periodo_aux &gt; id_periodo_max AND id_periodo = id_periodo_posterior&#xA;&#xA;UPDATE TEMP_FINAL_ARANCELES&#xA;SET marca4 = 1&#xA;WHERE id_periodo &lt; id_periodo_aux&#xA;&#xA;UPDATE TEMP_FINAL_ARANCELES&#xA;SET marca5 = 1&#xA;WHERE marca2 = 1 AND marca4 = 1&#xA;&#xA;UPDATE TEMP_FINAL_ARANCELES&#xA;SET marca6 = 1 &#xA;WHERE id_periodo_aux &gt; id_periodo_max and id_periodo = id_periodo_max&#xA;&#xA;UPDATE TEMP_FINAL_ARANCELES&#xA;SET marca_final = 1&#xA;WHERE marca1 = 1 OR marca3 = 1 OR marca5 = 1 OR marca6 = 1&#xA;&#xA;--SELECT * INTO #BACK FROM TEMP_FINAL_ARANCELES&#xA;&#xA;DELETE TEMP_FINAL_ARANCELES WHERE marca_final IS NULL&#xA;&#xA;&#xA;----------TODO LO QUE ESTA CON marcar_final = 1 ES LO QUE SE DEBE TOMAR PARA ANALIZAR.&#xA;&#xA;----CALCULO DEL CONSUMO PRORRATEADO&#xA;--revisar xq no se tiene que pasar el id del plan agrupado ya que es int ver de llevar la desc&#xA;SELECT PE.ID_EJERCICIO, id_acreedor, id_prestacion, id_prestacion_acreedor, PA.id_plan_agrupado_G, sum(imp_pret_amb_pag) as Importe_Consumo&#xA;into #TEMP_CONSUMO&#xA;from H_ORD_AMB_DET H join D_PLANES P on P.id_producto = H.id_producto and P.id_plan_producto = H. id_plan_producto&#xA;join D_PLANES_AGRUPADOS PA on PA.id_plan_agrupado = P.id_plan_agrupado&#xA;join D_PERIODO PE on PE.id_periodo = H.id_periodo&#xA;join D_PRODUCTOS PRO on PRO.id_producto = H.id_producto&#xA;join Consultas_DW.dbo.FILTRO_ACREEDOR_PREST_ARANCELES F on F.AcreedorID = H.id_acreedor and F.PrestacionID = H.id_prestacion&#xA;where  PRO.id_segmento not in (3)&#xA; and not ((H.id_producto = 16 and H.id_plan_producto = 'CC   ')&#xA;   or  (H.id_producto=16 and H.id_plan_producto='CM   ')&#xA;   or  (H.id_producto=16 and H.id_plan_producto='CS1  ')&#xA;   or  (H.id_producto=16 and H.id_plan_producto='CS100')&#xA;   or  (H.id_producto=4 and H.id_plan_producto='M    ')&#xA;   or  (H.id_producto=16 and H.id_plan_producto='M    ')&#xA;   or  (H.id_producto=20 and H.id_plan_producto='M    ')&#xA;   or  (H.id_producto=14 and H.id_plan_producto='Z    ')&#xA;   or  (H.id_producto=20 and H.id_plan_producto='Z    ')&#xA;   or  (H.id_producto=1 and H.id_plan_producto='C    ')&#xA;   or  (H.id_producto=4 and H.id_plan_producto='Z    '))&#xA;and PE.id_periodo between 201507 and 201906&#xA;and H.id_reintegro = 'F'&#xA;group by PE.ID_EJERCICIO, id_acreedor, id_prestacion, id_prestacion_acreedor, PA.id_plan_agrupado_G&#xA;&#xA;UNION ALL&#xA;&#xA;SELECT PE.ID_EJERCICIO, id_acreedor, id_prestacion, id_prestacion_acreedor, PA.id_plan_agrupado_G, sum(imp_prest_int_pag)&#xA;from H_ORD_INT_DET H join D_PLANES P on P.id_producto = H.id_producto and P.id_plan_producto = H. id_plan_producto&#xA;join D_PLANES_AGRUPADOS PA on PA.id_plan_agrupado = P.id_plan_agrupado&#xA;join D_PERIODO PE on PE.id_periodo = H.id_periodo&#xA;join D_PRODUCTOS PRO on PRO.id_producto = H.id_producto&#xA;join Consultas_DW.dbo.FILTRO_ACREEDOR_PREST_ARANCELES F on F.AcreedorID = H.id_acreedor and F.PrestacionID = H.id_prestacion&#xA;where  PRO.id_segmento not in (3)&#xA; and not ((H.id_producto = 16 and H.id_plan_producto = 'CC   ')&#xA;   or  (H.id_producto=16 and H.id_plan_producto='CM   ')&#xA;   or  (H.id_producto=16 and H.id_plan_producto='CS1  ')&#xA;   or  (H.id_producto=16 and H.id_plan_producto='CS100')&#xA;   or  (H.id_producto=4 and H.id_plan_producto='M    ')&#xA;   or  (H.id_producto=16 and H.id_plan_producto='M    ')&#xA;   or  (H.id_producto=20 and H.id_plan_producto='M    ')&#xA;   or  (H.id_producto=14 and H.id_plan_producto='Z    ')&#xA;   or  (H.id_producto=20 and H.id_plan_producto='Z    ')&#xA;   or  (H.id_producto=1 and H.id_plan_producto='C    ')&#xA;   or  (H.id_producto=4 and H.id_plan_producto='Z    '))&#xA;and PE.id_periodo between 201407 and 201906&#xA;and H.id_reintegro = 'F'&#xA;group by PE.ID_EJERCICIO, id_acreedor, id_prestacion, id_prestacion_acreedor, PA.id_plan_agrupado_G&#xA;&#xA;SELECT ID_EJERCICIO, id_acreedor, id_prestacion, id_prestacion_acreedor, id_plan_agrupado_G, sum(Importe_consumo) Importe_consumo--, 0 AS Cant_filas, CONVERT(FLOAT, 0) AS consumo_prorrateado&#xA;INTO #TEMP_CONSUMO_FINAL &#xA;FROM #TEMP_CONSUMO&#xA;GROUP BY ID_EJERCICIO, id_acreedor, id_prestacion, id_prestacion_acreedor, id_plan_agrupado_G&#xA;&#xA;--DENOMINADOR PARA PRORRATEO&#xA;Select id_acreedor, id_prestacion_acreedor, id_prestacion, id_plan_agrupado_G, PE.ID_EJERCICIO, COUNT(DISTINCT id_categoria+CAST(id_especialidad_convenio AS VARCHAR(1))) Cant_filas&#xA;into #TEMP_CANT_FILAS&#xA;from TEMP_FINAL_ARANCELES TF &#xA;JOIN D_PLANES P on P.id_producto = TF.id_producto and P.id_plan_producto = TF.id_plan_producto&#xA;JOIN D_PLANES_AGRUPADOS PA on PA.id_plan_agrupado = P.id_plan_agrupado&#xA;JOIN D_PERIODO PE ON PE.id_periodo = TF.id_periodo_aux&#xA;group by id_acreedor, id_prestacion_acreedor, id_prestacion, id_plan_agrupado_G, PE.ID_EJERCICIO&#xA;&#xA;UPDATE TEMP_FINAL_ARANCELES&#xA;SET consumo_prorrateado = (TC.Importe_Consumo)/TCF.cant_filas&#xA;FROM TEMP_FINAL_ARANCELES F&#xA;JOIN D_PLANES PL on PL.id_plan_producto = F.id_plan_producto and PL.id_producto = 16&#xA;JOIN D_PLANES_AGRUPADOS PLA on PLA.id_plan_agrupado = PL.id_plan_agrupado&#xA;JOIN D_PLANES_AGRUPADOS_G PLAG on PLAG.id_plan_agrupado_G = PLA.id_plan_agrupado_G&#xA;JOIN D_PERIODO P on P.id_periodo = F.id_periodo_aux&#xA;JOIN #TEMP_CONSUMO_FINAL TC ON (F.id_acreedor = TC.id_acreedor and F.id_prestacion = TC.id_prestacion and TC.id_prestacion_acreedor = F.id_prestacion_acreedor&#xA;       and TC.id_plan_agrupado_G = PLAG.id_plan_agrupado_G and (P.ID_EJERCICIO-1) = TC.ID_EJERCICIO)&#xA;JOIN #TEMP_CANT_FILAS TCF ON  (F.id_acreedor = TCF.id_acreedor and F.id_prestacion = TCF.id_prestacion and TCF.id_prestacion_acreedor = F.id_prestacion_acreedor&#xA;       and TCF.id_plan_agrupado_G = PLAG.id_plan_agrupado_G and (P.ID_EJERCICIO) = TCF.ID_EJERCICIO)&#xA;&#xA;&#xA;&#xA;select  id_acreedor, id_prestacion_acreedor, id_prestacion, id_plan_producto, id_categoria, id_especialidad_convenio, importe_evolucion, &#xA;[fecha_carga_convenio],[fecha_convenio_evolucion], id_tipo_valorizacion, ID_EJERCICIO+1 ID_EJERCICIO &#xA;INTO #EJANT &#xA;FROM TEMP_FINAL_ARANCELES F &#xA;JOIN D_PERIODO P on P.id_periodo = F.id_periodo_aux&#xA;JOIN (select id_ejercicio+1 as id_ejecicio, max(id_periodo) as permax from D_PERIODO where ID_EJERCICIO &gt;= 21 group by ID_EJERCICIO) AUX on RIGHT(AUX.permax, 2) = RIGHT(F.id_periodo_aux, 2) and P.ID_EJERCICIO = AUX.id_ejecicio&#xA;where marca_final = 1&#xA;group by id_acreedor, id_prestacion_acreedor, id_prestacion, id_plan_producto, id_categoria, id_especialidad_convenio, importe_evolucion, fecha_carga_convenio, fecha_convenio_evolucion, id_tipo_valorizacion, ID_EJERCICIO&#xA;ORDER BY ID_EJERCICIO&#xA;&#xA;&#xA;&#xA;UPDATE TEMP_FINAL_ARANCELES&#xA;SET valor_ini_ej_ant = E.importe_evolucion, &#xA; fecha_carga_valor_ini_ej_ant = E.fecha_carga_convenio,&#xA; fecha_convenio_valor_ini_ej_ant = E.fecha_convenio_evolucion,&#xA; id_tipo_valorizacion_ej_ant = E.id_tipo_valorizacion&#xA;FROM TEMP_FINAL_ARANCELES F &#xA;INNER JOIN D_PERIODO P ON (F.id_periodo_aux=P.id_periodo)&#xA;INNER JOIN #EJANT E ON (P.ID_EJERCICIO=E.ID_EJERCICIO AND F.id_acreedor=E.id_acreedor AND F.id_prestacion_acreedor=E.id_prestacion_acreedor AND F.id_prestacion=E.id_prestacion &#xA;AND F.id_plan_producto=E.id_plan_producto AND F.id_categoria=E.id_categoria AND F.id_especialidad_convenio=E.id_especialidad_convenio)&#xA;&#xA;&#xA;UPDATE TEMP_FINAL_ARANCELES&#xA;SET var_acum = (importe_evolucion/valor_ini_ej_ant)-1&#xA;WHERE valor_ini_ej_ant&lt;&gt;0 &#xA;&#xA;UPDATE TEMP_FINAL_ARANCELES&#xA;SET var_ej_cons_pror = var_acum * consumo_prorrateado&#xA;&#xA;&#xA;go&#xA;with    cte &#xA;        as ( select   row_number() over (order by id_acreedor, id_prestacion_acreedor, id_prestacion, id_plan_producto, id_categoria, id_especialidad_convenio, id_periodo_aux) NroFila , &#xA;                    id_periodo_aux, &#xA;                    id_acreedor,&#xA;     id_prestacion_acreedor, &#xA;     id_prestacion, &#xA;     id_plan_producto,&#xA;     id_categoria, &#xA;     id_especialidad_convenio,&#xA;     MAX(fecha_carga_convenio) fecha_carga_convenio,&#xA;     MAX(fecha_convenio_evolucion) fecha_convenio_evolucion,&#xA;     MAX(id_tipo_valorizacion) id_tipo_valorizacion,&#xA;     sum(importe_evolucion) importe_evolucion&#xA;            from     TEMP_FINAL_ARANCELES&#xA;   group by id_acreedor, id_prestacion_acreedor, id_prestacion, id_plan_producto, id_categoria, id_especialidad_convenio, id_periodo_aux) &#xA;select  cte.NroFila,&#xA;  cte.id_periodo_aux,&#xA;  cte.id_acreedor,&#xA;  cte.id_prestacion_acreedor, &#xA;  cte.id_prestacion, &#xA;  cte.id_plan_producto,&#xA;  cte.id_categoria,&#xA;  cte.id_especialidad_convenio,&#xA;  isnull(lag.id_periodo_aux, cte.id_periodo_aux) 'id_periodo_anterior',&#xA;  isnull(lag.importe_evolucion, cte.importe_evolucion) 'importe_evolución_anterior',&#xA;  isnull(lag.fecha_carga_convenio, cte.fecha_carga_convenio) 'fecha_carga_convenio',&#xA;  isnull(lag.fecha_convenio_evolucion, cte.fecha_convenio_evolucion) 'fecha_convenio_evolucion',&#xA;  isnull(lag.id_tipo_valorizacion, cte.id_tipo_valorizacion) 'id_tipo_valorizacion'&#xA;  INTO #ANTERIOR&#xA;from    cte &#xA;       left join cte lag on cte.NroFila - 1 = lag.NroFila&#xA;&#xA;    &#xA;&#xA;UPDATE TEMP_FINAL_ARANCELES&#xA;SET id_periodo_anterior = P.id_periodo_anterior,&#xA;importe_evolucion_anterior = P.importe_evolución_anterior,&#xA;fecha_carga_importe_ant = P.fecha_carga_convenio,&#xA;fecha_convenio_importe_ant = P.fecha_convenio_evolucion,&#xA;id_tipo_valorizacion_per_ant = P.id_tipo_valorizacion&#xA;FROM TEMP_FINAL_ARANCELES T INNER JOIN #ANTERIOR P ON (T.id_periodo_aux=P.id_periodo_aux AND T.id_acreedor=P.id_acreedor AND T.id_prestacion=P.id_prestacion &#xA;          AND T.id_prestacion_acreedor=P.id_prestacion_acreedor AND T.id_plan_producto=P.id_plan_producto&#xA;          AND T.id_categoria = P.id_categoria AND T.id_especialidad_convenio = P.id_especialidad_convenio)              &#xA;&#xA;UPDATE TEMP_FINAL_ARANCELES&#xA;SET id_periodo_anterior = P.id_periodo,&#xA;importe_evolucion_anterior = P.importe_evolución,&#xA;fecha_carga_importe_ant = P.fecha_carga_convenio,&#xA;fecha_convenio_importe_ant = P.fecha_convenio_evolucion,&#xA;id_tipo_valorizacion_per_ant = P.id_tipo_valorizacion&#xA;FROM TEMP_FINAL_ARANCELES T INNER JOIN #PERIODOMIN P ON (T.id_periodo_aux=P.id_periodo AND T.id_acreedor=P.id_acreedor AND T.id_prestacion=P.id_prestacion &#xA;          AND T.id_prestacion_acreedor=P.id_prestacion_acreedor AND T.id_plan_producto=P.id_plan_producto&#xA;          AND T.id_categoria = P.id_categoria AND T.id_especialidad_convenio = P.id_especialidad_convenio)&#xA;&#xA;&#xA;UPDATE TEMP_FINAL_ARANCELES&#xA;SET var_mensual = (importe_evolucion/importe_evolucion_anterior)-1&#xA;&#xA;&#xA;UPDATE TEMP_FINAL_ARANCELES&#xA;SET var_mens_cons_pror = var_mensual * consumo_prorrateado&#xA;&#xA;UPDATE TEMP_FINAL_ARANCELES&#xA;SET aumento_sss_relleno = A.aumento_sss&#xA;FROM TEMP_FINAL_ARANCELES F &#xA;INNER JOIN H_ARANCELES_AUMENTOS A on A.id_periodo = F.id_periodo_aux&#xA;&#xA;&#xA;--Actualiza los aumentos de los aranceles (acumulado y acumulado ejercicio anterior)&#xA;SELECT DISTINCT id_periodo_aux id_periodo, aumento_sss_relleno, CONVERT(FLOAT, NULL) as aumento_sss_relleno_acumulado, CONVERT(FLOAT, NULL) as aumento_sss_relleno_acumulado_per_ant, CONVERT(FLOAT, NULL) as aumento_sss_relleno_acumulado_ej_ant &#xA;INTO #AUMENTO_ARANCELES FROM TEMP_FINAL_ARANCELES WHERE marca_final = 1 AND id_periodo_aux &gt; (SELECT MIN(id_periodo_aux) FROM TEMP_FINAL_ARANCELES WHERE RIGHT(id_periodo_aux, 2)= '06')&#xA;&#xA;INSERT INTO #AUMENTO_ARANCELES&#xA;SELECT TOP 1 dbo.PeriodosAnteriores(id_periodo, 2), 0, 100, 0, 0 FROM #AUMENTO_ARANCELES ORDER BY id_periodo&#xA;&#xA;WHILE (SELECT MIN(id_periodo) FROM #AUMENTO_ARANCELES WHERE aumento_sss_relleno_acumulado is null) &lt;= (SELECT MAX(id_periodo) FROM #AUMENTO_ARANCELES)&#xA;BEGIN&#xA; SELECT dbo.PeriodoSiguiente(CAST((dbo.Devuelve_Fecha(id_periodo)) AS VARCHAR(8))) id_periodo, aumento_sss_relleno, aumento_sss_relleno_acumulado&#xA; INTO #AUMENTO_ACUM FROM #AUMENTO_ARANCELES &#xA;&#xA; UPDATE #AUMENTO_ARANCELES&#xA; SET aumento_sss_relleno_acumulado = (SELECT(H.aumento_sss_relleno+1)*T.aumento_sss_relleno_acumulado FROM #AUMENTO_ARANCELES H INNER JOIN #AUMENTO_ACUM T ON (H.id_periodo=T.id_periodo)&#xA; WHERE H.id_periodo = (SELECT MIN(id_periodo) FROM #AUMENTO_ARANCELES WHERE aumento_sss_relleno_acumulado is null))&#xA; WHERE id_periodo = (SELECT MIN(id_periodo) FROM #AUMENTO_ARANCELES WHERE aumento_sss_relleno_acumulado is null)&#xA;&#xA; DROP TABLE #AUMENTO_ACUM&#xA;END&#xA;&#xA;UPDATE #AUMENTO_ARANCELES&#xA;SET aumento_sss_relleno_acumulado_ej_ant = aumento_sss_relleno_acumulado&#xA;WHERE RIGHT(id_periodo, 2) = '06'&#xA;&#xA;&#xA;SELECT aumento_sss_relleno_acumulado_ej_ant, ID_EJERCICIO+1 ID_EJERCICIO&#xA;INTO #AUMENTO_EJANT&#xA;FROM #AUMENTO_ARANCELES A INNER JOIN D_PERIODO P ON (P.id_periodo=A.id_periodo)&#xA;WHERE aumento_sss_relleno_acumulado_ej_ant IS NOT NULL&#xA;&#xA;UPDATE #AUMENTO_ARANCELES&#xA;SET aumento_sss_relleno_acumulado_ej_ant = E.aumento_sss_relleno_acumulado_ej_ant&#xA;FROM #AUMENTO_ARANCELES A &#xA;INNER JOIN D_PERIODO P ON (P.id_periodo=A.id_periodo)&#xA;INNER JOIN #AUMENTO_EJANT E ON (E.ID_EJERCICIO=P.ID_EJERCICIO)&#xA;&#xA;UPDATE A&#xA;SET aumento_sss_relleno_acumulado_per_ant = B.aumento_sss_relleno_acumulado &#xA;FROM #AUMENTO_ARANCELES A &#xA;INNER JOIN #AUMENTO_ARANCELES B ON (A.id_periodo=dbo.PeriodosPosteriores(B.id_periodo, 2))&#xA;&#xA;UPDATE TEMP_FINAL_ARANCELES &#xA;SET aumento_sss_relleno_acumulado = A.aumento_sss_relleno_acumulado,&#xA; aumento_sss_relleno_acumulado_ej_ant = A.aumento_sss_relleno_acumulado_ej_ant,&#xA; aumento_sss_relleno_acumulado_per_ant = A.aumento_sss_relleno_acumulado_per_ant&#xA;FROM TEMP_FINAL_ARANCELES H INNER JOIN #AUMENTO_ARANCELES A ON (H.id_periodo_aux=A.id_periodo)&#xA;&#xA;UPDATE TEMP_FINAL_ARANCELES&#xA;SET id_marca_aumento_real = 1&#xA;WHERE importe_evolucion&lt;&gt;importe_evolucion_anterior&#xA;&#xA;UPDATE TEMP_FINAL_ARANCELES&#xA;SET cant_meses_diferencia_carga_vigencia = DATEDIFF(M, fecha_carga_convenio, fecha_convenio_evolucion)&#xA;&#xA;UPDATE TEMP_FINAL_ARANCELES&#xA;SET marca_consumo = 1&#xA;WHERE (RIGHT(id_periodo_aux, 2) IN ('06') AND id_periodo_aux &lt;= (SELECT MAX(id_periodo) FROM D_PERIODO WHERE vigente_consumo = 1)) OR id_periodo_aux IN (SELECT MAX(id_periodo) FROM D_PERIODO WHERE vigente_consumo = 1)&#xA;&#xA;UPDATE TEMP_FINAL_ARANCELES&#xA;SET id_periodo_carga_convenio = dbo.DevuelvePeriodo(fecha_carga_convenio)&#xA;&#xA;--INSERT FINAL&#xA;TRUNCATE TABLE H_ARANCELES_EVOLUCION_RELLENO&#xA;INSERT INTO H_ARANCELES_EVOLUCION_RELLENO&#xA;     ([id_periodo]&#xA;           ,[id_especialidad_convenio]&#xA;           ,[id_categoria]&#xA;           ,[id_acreedor]&#xA;           ,[id_tipo_prestador]&#xA;           ,[id_subcategoria_prestador]&#xA;           ,[id_ubicacion_posicion]&#xA;           ,[id_producto]&#xA;           ,[id_plan_producto]&#xA;           ,[id_prestacion]&#xA;           ,[id_prestacion_acreedor]&#xA;           ,[marca_negativo]&#xA;           ,[marca_ultimo_aumento]&#xA;           ,[fecha_carga_convenio]&#xA;           ,[fecha_convenio_evolucion]&#xA;           ,[fecha_carga_importe_ant]&#xA;           ,[fecha_convenio_importe_ant]&#xA;           ,[fecha_carga_valor_ini_ej_ant]&#xA;           ,[fecha_convenio_valor_ini_ej_ant]&#xA;           ,[id_tipo_valorizacion]&#xA;           ,[id_tipo_valorizacion_per_ant]&#xA;           ,[id_tipo_valorizacion_ej_ant]&#xA;           ,[id_marca_aumento_real]&#xA;           ,[cant_meses_diferencia_carga_vigencia]&#xA;           ,[importe_evolucion_relleno]&#xA;           ,[importe_evolucion_anterior_relleno]&#xA;           ,[valor_ini_ej_ant]&#xA;           ,[consumo_prorrateado]&#xA;           ,[var_mensual]&#xA;           ,[var_mens_cons_pror]&#xA;           ,[var_acum]&#xA;           ,[var_ej_cons_pror]&#xA;           ,[aumento_sss_relleno]&#xA;           ,[aumento_sss_relleno_acumulado]&#xA;           ,[aumento_sss_relleno_acumulado_ej_ant]&#xA;           ,[aumento_sss_relleno_acumulado_per_ant]&#xA;&#x9;&#x9;   ,[marca_consumo]&#xA;&#x9;&#x9;   ,[id_periodo_carga_convenio])&#xA;SELECT F.id_periodo_aux&#xA;   ,F.id_especialidad_convenio&#xA;   ,F.id_categoria&#xA;   ,A.id_acreedor  &#xA;   ,'P'  &#xA;   ,A.id_subcategoria_prestador &#xA;   ,POS.id_ubicacion_posicion&#xA;   ,16&#xA;   ,F.id_plan_producto&#xA;   ,F.id_prestacion&#xA;   ,F.id_prestacion_acreedor&#xA;   ,CASE WHEN var_acum &lt; 0 THEN 1 ELSE 0 END &#xA;   ,CASE WHEN RIGHT(id_periodo_aux, 2) = '06' THEN 1 ELSE 0 END &#xA;   ,fecha_carga_convenio&#xA;   ,fecha_convenio_evolucion&#xA;   ,fecha_carga_importe_ant&#xA;   ,fecha_convenio_importe_ant &#xA;   ,fecha_carga_valor_ini_ej_ant &#xA;   ,fecha_convenio_valor_ini_ej_ant&#xA;   ,id_tipo_valorizacion&#xA;      ,id_tipo_valorizacion_per_ant&#xA;      ,id_tipo_valorizacion_ej_ant&#xA;   ,id_marca_aumento_real&#xA;   ,cant_meses_diferencia_carga_vigencia&#xA;   ,importe_evolucion&#xA;   ,importe_evolucion_anterior&#xA;   ,valor_ini_ej_ant&#xA;   ,consumo_prorrateado&#xA;   ,var_mensual&#xA;   ,var_mens_cons_pror&#xA;   ,var_acum&#xA;   ,var_ej_cons_pror&#xA;   ,ISNULL(AA.aumento_sss, 0) &#xA;   ,F.aumento_sss_relleno_acumulado&#xA;   ,aumento_sss_relleno_acumulado_ej_ant&#xA;   ,aumento_sss_relleno_acumulado_per_ant&#xA;   ,marca_consumo&#xA;   ,id_periodo_carga_convenio&#xA;   FROM TEMP_FINAL_ARANCELES F &#xA;INNER JOIN D_PERIODO P on P.id_periodo = F.id_periodo_aux&#xA;INNER JOIN D_ACREEDOR A on A.id_acreedor = F.id_acreedor &#xA;INNER JOIN D_SUBCATEGORIA_PRESTADOR S on S.id_subcategoria_prestador = A.id_subcategoria_prestador&#xA;INNER JOIN D_POSICION POS ON POS.id_posicion=A.id_posicion_acreedor&#xA;LEFT JOIN H_ARANCELES_AUMENTOS AA on AA.id_periodo = F.id_periodo_aux&#xA;WHERE marca_final = 1 AND A.id_tipo_prestador = 'P' AND A.id_provision_acreedor IN (1, 2, 3) AND valor_ini_ej_ant &lt;&gt; 0&#xA;ORDER BY id_periodo_aux&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Borra Auxiliares usadas"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{031008F0-1204-42AA-8727-C527AED8D6CF}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Borra Auxiliares usadas"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; Microsoft SQL Server 2008 R2; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:LoggingOptions
        DTS:FilterKind="0" />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{7705AE95-4A1E-4600-AF08-B019CC52882F}"
          SQLTask:SqlStatementSource="TRUNCATE TABLE AUX_ARANCELES_EVOLUCION&#xA;TRUNCATE TABLE AUX_ARANCELES_GALENOS_UNIDADES&#xA;TRUNCATE TABLE AUX_H_ARANCELES_GALENOS_IMPORTE&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint]"
      DTS:CreationName=""
      DTS:DTSID="{1255FA65-0952-4CF0-8179-2A87FF7BEDC9}"
      DTS:From="Package\Actualiza H_ARANCELES_EVOLUCION"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint"
      DTS:To="Package\Actualiza H_ARANCELES_EVOLUCION_RELLENO" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 3]"
      DTS:CreationName=""
      DTS:DTSID="{851B14FE-81AA-4494-8605-22AC5C7A079F}"
      DTS:From="Package\Actualiza H_ARANCELES_EVOLUCION_RELLENO"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 3"
      DTS:To="Package\Borra Auxiliares usadas" />
  </DTS:PrecedenceConstraints>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="8" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="278,42"
          Id="Package\Actualiza H_ARANCELES_EVOLUCION"
          TopLeft="34.5,5.5" />
        <NodeLayout
          Size="336,42"
          Id="Package\Actualiza H_ARANCELES_EVOLUCION_RELLENO"
          TopLeft="5.5,77.61320754717" />
        <NodeLayout
          Size="195,42"
          Id="Package\Borra Auxiliares usadas"
          TopLeft="76,149.72641509434" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint]"
          TopLeft="173.5,47.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,30.11320754717"
              Start="0,0"
              End="0,22.61320754717">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,22.61320754717" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 3]"
          TopLeft="173.5,119.61320754717">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,30.11320754717"
              Start="0,0"
              End="0,22.61320754717">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,22.61320754717" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>