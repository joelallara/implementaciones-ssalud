<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="12/3/2019 11:58:37 AM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="DES6071"
  DTS:CreatorName="AMS\jtrinchier"
  DTS:DTSID="{7CF1E321-12A2-405A-A689-FF1C01CF81BC}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="15.0.1301.433"
  DTS:LocaleID="11274"
  DTS:ObjectName="Package1"
  DTS:PackageType="5"
  DTS:VersionBuild="7"
  DTS:VersionGUID="{C28455BB-02B4-445F-969B-8510FD9EDB55}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[Administrador de conexiones con Excel]"
      DTS:CreationName="EXCEL"
      DTS:DTSID="{CA8BD1E3-3997-417D-B7B5-FDB2E0FFCE41}"
      DTS:ObjectName="Administrador de conexiones con Excel">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Provider=Microsoft.Jet.OLEDB.4.0;Data Source=Y:\03 - Archivos\Data Recaudaciones\Incluir Ospegap - Origen 22.xls;Extended Properties=&quot;EXCEL 8.0;HDR=YES&quot;;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables />
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Actualización Recaudaciones AUX_H_RECAUDACION_DETALLE"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Tarea Ejecutar SQL"
      DTS:DTSID="{0689A1EE-978F-4D36-800B-E489B68D708F}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Actualización Recaudaciones AUX_H_RECAUDACION_DETALLE"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{E98BA7A5-A37B-425A-9974-434BB6F83FD9}"
          SQLTask:SqlStatementSource="---- Se declara en la Varible el periodo de proceso&#xA;&#xA;Declare @PeriodoAux int&#xA;&#xA;Set @PeriodoAux = (select max(id_periodo) from aux_h_recaudacion_detalle)&#xA;&#xA;---- Para Actualizar el campo id_periodo_consumo_M    para el Data de Recaudaciones, siempre se registra el periodo anterior al que procesamos&#xA;---- Se declara en la Varible el periodo Anterior, restandole un periodo al de la AUX_PERIODO_MES_BORRA (periodo que procesamos).&#xA;&#xA;Declare  @Periodo_Anterior int&#xA;Set @Periodo_Anterior = (select dbo.PeriodosAnteriores(@PeriodoAux,2))&#xA;&#xA;---- Actualizamos el id_periodo_consumo_M con el periodo Anterior al que actualmente estamos procesando para Data Recaudaciones.&#xA;&#xA;update AUX_H_RECAUDACION_DETALLE set id_periodo_consumo_M = @Periodo_Anterior&#xA;from AUX_H_RECAUDACION_DETALLE&#xA;where id_periodo = @PeriodoAux and id_fuente_recaudacion = 3&#xA;&#xA;&#xA;&#xA;/* Actualizacion de Grillas  */&#xA;&#xA;-- ACTUALIZACION GRILLA 17/06/2011&#xA;Set dateformat 'YMD'&#xA;&#xA;if exists (select * from sysobjects where name = 'TEMP_ULTPeriodo')&#xA;  begin&#xA;     drop table TEMP_ULTPeriodo&#xA;  end&#xA;&#xA;if exists (select * from sysobjects where name = 'TEMP_GRillaULTPeriodo')&#xA;  begin&#xA;     drop table TEMP_GRillaULTPeriodo&#xA;  end&#xA;&#xA;if exists (select * from sysobjects where name = 'TEMP_GRillaULTPeriodoAfiViejo')&#xA;  begin&#xA;     drop table TEMP_GRillaULTPeriodoAfiViejo&#xA;  end&#xA;&#xA;if exists (select * from sysobjects where name = 'TEMP_ULTPeriodoAfiViejo')&#xA;  begin&#xA;     drop table TEMP_ULTPeriodoAfiViejo&#xA;  end&#xA;&#xA;if exists (select * from sysobjects where name = 'TGRIREC')&#xA;  begin&#xA;     drop table TGRIREC&#xA;  end&#xA;&#xA;Declare @Periodo INT &#xA;SET @Periodo = (select max(periodo) from Consultas_DW.dbo.AUX_H_OSPEGAP_TABLA_EXCEL)&#xA;&#xA;-- Actualizo en la tabla D_planes las grillas de recaudación no existentes&#xA;Insert Into d_planes (id_producto, id_plan_producto, de_planes, de_plan_reducida, orden_plan, id_plan_activo, visualizacion_web, id_plan_agrupado, id_subrubro_ley)&#xA;select H.id_producto, H.id_plan_producto, max('No Definido'), max('No Defi'), max(999), max('NO'), max(0),Max(999), max(0) from AUX_H_RECAUDACION_DETALLE H where not exists &#xA;(select * from d_planes P where H.id_producto = P.id_producto and H.id_plan_producto = P.id_plan_producto)&#xA;group by H.id_producto, H.id_plan_producto&#xA;&#xA;-- Arma Tabla Temporal con grilla para la persona, producto, plan_producto para el ultimo periodo en el Data Comercial para utilizar luego en Recaudación &#xA;&#xA;select id_persona, id_plan_producto, id_producto, max(id_periodo) as id_periodo INTO TEMP_ULTPeriodo&#xA;from H_COMER_STOCK_AFILIA HA&#xA;GROUP BY id_persona, id_plan_producto, id_producto&#xA;&#xA;select id_persona, id_plan_producto, id_producto, max(id_periodo) as id_periodo INTO TEMP_ULTPeriodoAfiViejo&#xA;from H_COMP_GRUPO_ACTIVO HA&#xA;GROUP BY id_persona, id_plan_producto, id_producto&#xA;&#xA;Select HA.id_persona, HA.id_plan_producto, HA.id_producto, HA.grilla INTO TEMP_GRillaULTPeriodo&#xA;FROM H_COMER_STOCK_AFILIA HA&#xA;INNER JOIN TEMP_ULTPeriodo T_ULTP&#xA;ON HA.id_periodo = T_ULTP.id_periodo and HA.id_persona = T_ULTP.id_persona and HA.id_plan_producto = T_ULTP.id_plan_producto and HA.id_producto = T_ULTP.id_producto&#xA;&#xA;Select HA.id_persona, HA.id_plan_producto, HA.id_producto, HA.grilla INTO TEMP_GRillaULTPeriodoAfiViejo&#xA;FROM H_COMP_GRUPO_ACTIVO HA&#xA;INNER JOIN TEMP_ULTPeriodoAfiViejo T_ULTP&#xA;ON HA.id_periodo = T_ULTP.id_periodo and HA.id_persona = T_ULTP.id_persona and HA.id_plan_producto = T_ULTP.id_plan_producto and HA.id_producto = T_ULTP.id_producto&#xA;&#xA;-- Actualizo la grilla en un valor comodìn 9999 para TODOS los registros de las tablas de recaudación&#xA;&#xA;UPDATE AUX_H_RECAUDACION_DETALLE SET grilla = 9999 &#xA;where id_periodo in (@Periodo) and id_fuente_recaudacion = 3&#xA;    &#xA;-- Actualiza campo Grilla en Data de Recaudación (Tomada de Stock AFiliados de Comercial)&#xA;&#xA;update AUX_H_RECAUDACION_DETALLE set AUX_H_RECAUDACION_DETALLE.grilla = HA.grilla&#xA;FROM       AUX_H_RECAUDACION_DETALLE HC  &#xA;&#x9;&#x9; INNER JOIN  H_COMER_STOCK_AFILIA HA&#xA;&#x9;&#x9;&#x9;ON HC.id_persona = HA.id_persona AND &#xA;&#x9;&#x9;&#x9;&#x9;HC.id_plan_producto = HA.id_plan_producto AND&#xA;&#x9;&#x9;&#x9;&#x9;HC.id_producto = HA.id_producto&#xA;&#x9;&#x9;INNER JOIN TRANS_PERIODO TP&#xA;&#x9;&#x9;&#x9;ON HC.id_periodo = TP.id_periodo and HA.id_periodo = TP.id_periodo_anterior&#xA;where HC.id_periodo in (@Periodo) and id_fuente_recaudacion = 3&#xA;&#xA;------------------------------------------------------------&#xA;------- Para los casos de prestaciones que no encuentra esa persona, ese producto, ese plan_producto y fecha_prestacion = Periodo Comercial -1 1 en el Data Comercial, busca la grilla del Data Comercial del último periodo encontrado&#xA;&#xA;--- Actualiza AUX_H_RECAUDACION_DETALLE&#xA;&#xA;Update AUX_H_RECAUDACION_DETALLE SET grilla = TG.grilla&#xA;from AUX_H_RECAUDACION_DETALLE HC&#xA;Inner join TEMP_GRillaULTPeriodo TG on HC.id_persona = TG.id_persona and&#xA;HC.id_plan_producto = TG.id_plan_producto and&#xA;HC.id_producto = TG.id_producto and HC.grilla = 9999&#xA;where HC.id_periodo in (@Periodo) and id_fuente_recaudacion = 3&#xA;&#xA;&#xA;---- Actualiza AUX_H_RECAUDACION_DETALLE para los casos que quedan con Grilla = 9999 entonces busca la grilla en Afiliados Viejo&#xA;&#xA;Update AUX_H_RECAUDACION_DETALLE SET grilla = TG.grilla&#xA;from AUX_H_RECAUDACION_DETALLE HC&#xA;Inner join TEMP_GRillaULTPeriodoAfiViejo TG on HC.id_persona = TG.id_persona and&#xA;HC.id_plan_producto = TG.id_plan_producto and&#xA;HC.id_producto = TG.id_producto and HC.grilla = 9999&#xA;where HC.id_periodo in (@Periodo) and id_fuente_recaudacion = 3&#xA;&#xA;---- Actualizo en la tabla D_GRILLAS las grillas de recaudación no existentes&#xA;select H.id_producto, H.id_plan_producto, H.grilla, max('No Definida') as De_Grilla, max('19000101') as Char_Fecha_Vig_Desde, max('19000101') as Char_Fecha_Vig_Hasta, max('X') as Id_Con_Copago, max('1900-01-01 ') as Fecha_Vig_Desde, max('1900-01-01 ') as Fecha_Vig_Hasta&#xA;into TGRIREC from AUX_H_RECAUDACION_DETALLE H where not exists &#xA;(Select * from D_Grillas G where H.id_producto = G.id_producto and H.id_plan_producto = G.id_plan_producto and H.grilla = G.grilla) and not(H.GRILLA is null)&#xA;group by H.id_producto, H.id_plan_producto, H.grilla&#xA;&#xA;INSERT INTO D_GRILLAS&#xA;Select * from TGRIREC T Where not exists &#xA;(Select * from D_Grillas G where T.id_producto = G.id_producto and T.id_plan_producto = G.id_plan_producto and T.grilla = G.grilla)&#xA;&#xA;INSERT INTO D_GRILLAS &#xA;select P.id_producto, P.id_plan_producto, max(9999), max('No Definida') as De_Grilla, max('19000101') as Char_Fecha_Vig_Desde, max('19000101') as Char_Fecha_Vig_Hasta, max('X') as Id_Con_Copago, max('1900-01-01 ') as Fecha_Vig_Desde, max('1900-01-01 ') as Fecha_Vig_Hasta &#xA;FROM D_PLANES P&#xA;where not exists (select * from d_grillas G WHERE P.id_producto = G.id_producto and P.id_plan_producto = G.id_plan_producto)&#xA;group by P.id_producto, P.id_plan_producto&#xA;&#xA;if exists (select * from sysobjects where name = 'TEMP_ULTPeriodo')&#xA;  begin&#xA;     drop table TEMP_ULTPeriodo&#xA;  end&#xA;&#xA;if exists (select * from sysobjects where name = 'TEMP_GRillaULTPeriodo')&#xA;  begin&#xA;     drop table TEMP_GRillaULTPeriodo&#xA;  end&#xA;&#xA;if exists (select * from sysobjects where name = 'TEMP_GRillaULTPeriodoAfiViejo')&#xA;  begin&#xA;     drop table TEMP_GRillaULTPeriodoAfiViejo&#xA;  end&#xA;&#xA;if exists (select * from sysobjects where name = 'TEMP_ULTPeriodoAfiViejo')&#xA;  begin&#xA;     drop table TEMP_ULTPeriodoAfiViejo&#xA;  end&#xA;&#xA;if exists (select * from sysobjects where name = 'TGRIREC')&#xA;  begin&#xA;     drop table TGRIREC&#xA;  end&#xA;&#xA;  /* Actualizacion de Empresas y tipo entidad */&#xA;&#xA;  -- Actualiza empresa y tipo de entidad donde encuentre persona y periodo igual.&#xA;UPDATE AUX_H_RECAUDACION_DETALLE&#xA;SET id_empresa = S.id_empresa,&#xA;Id_Tipo_Entidad = S.Id_Tipo_Entidad&#xA;FROM AUX_H_RECAUDACION_DETALLE R INNER JOIN H_COMER_STOCK_AFILIA S ON (R.id_persona=S.id_persona AND R.id_periodo=S.id_periodo)&#xA;WHERE R.id_periodo in (@Periodo) and id_fuente_recaudacion = 3&#xA;&#xA;-- Se busca el maximo periodo donde estuvo una persona para obtener el tipo de entidad y la empresa.&#xA;SELECT MAX(S.id_periodo) id_periodo, S.id_persona INTO #TEMP &#xA;FROM H_COMER_STOCK_AFILIA S INNER JOIN AUX_H_RECAUDACION_DETALLE R ON (R.id_persona=S.id_persona)&#xA;WHERE R.id_empresa IS NULL AND R.Id_Tipo_Entidad IS NULL &#xA;AND R.id_periodo in (@Periodo) and id_fuente_recaudacion = 3&#xA;AND S.id_empresa IS NOT NULL AND S.Id_Tipo_Entidad IS NOT NULL AND S.Id_Tipo_Entidad &lt;&gt; 'E'&#xA;GROUP BY S.id_persona&#xA;&#xA;SELECT DISTINCT id_periodo, id_persona, Id_Tipo_Entidad, id_empresa into #STOCK FROM H_COMER_STOCK_AFILIA S&#xA;WHERE EXISTS (SELECT * FROM #TEMP T WHERE S.id_persona=T.id_persona and S.id_periodo=T.id_periodo)&#xA;&#xA;-- Se actualiza ambos datos con el ultimo periodo donde se encontro cada persona.&#xA;UPDATE AUX_H_RECAUDACION_DETALLE&#xA;SET id_empresa = S.id_empresa,&#xA;Id_Tipo_Entidad = S.Id_Tipo_Entidad&#xA;FROM AUX_H_RECAUDACION_DETALLE R &#xA;INNER JOIN #STOCK S ON (R.id_persona=S.id_persona)&#xA;WHERE R.id_periodo in (@Periodo) and id_fuente_recaudacion = 3&#xA;AND R.id_empresa IS NULL AND R.Id_Tipo_Entidad IS NULL&#xA;&#xA;-- Lo que quedo en nulo es porque nunca se encontraron, por lo tanto se le fuerzan estos datos.&#xA;UPDATE AUX_H_RECAUDACION_DETALLE &#xA;SET Id_Tipo_Entidad = 'I', id_empresa = 99999999&#xA;WHERE Id_Tipo_Entidad is null and id_empresa is null &#xA;and id_periodo in (@Periodo) and id_fuente_recaudacion = 3&#xA;&#xA;DROP TABLE #TEMP&#xA;DROP TABLE #STOCK" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Borra AUX_H_OSPEGAP_TABLA_EXCEL"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Tarea Ejecutar SQL"
      DTS:DTSID="{A1FDA048-6F64-42A9-956D-259955021EDA}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Borra AUX_H_OSPEGAP_TABLA_EXCEL"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{E98BA7A5-A37B-425A-9974-434BB6F83FD9}"
          SQLTask:SqlStatementSource="Truncate Table  Consultas_DW.dbo.AUX_H_OSPEGAP_TABLA_EXCEL" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Data Flow Task"
      DTS:CreationName="Microsoft.Pipeline"
      DTS:Description="Data Flow Task"
      DTS:DTSID="{D73ED7F8-F35C-4481-9934-31C21DBBE6B2}"
      DTS:ExecutableType="Microsoft.Pipeline"
      DTS:LocaleID="-1"
      DTS:ObjectName="Data Flow Task"
      DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
      <DTS:Variables />
      <DTS:ObjectData>
        <pipeline
          version="1">
          <components>
            <component
              refId="Package\Data Flow Task\Excel Source"
              componentClassID="Microsoft.ExcelSource"
              contactInfo="Excel Source;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;1"
              description="Excel Source"
              name="Excel Source"
              usesDispositions="true"
              version="1">
              <properties>
                <property
                  dataType="System.Int32"
                  description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                  name="CommandTimeout">0</property>
                <property
                  dataType="System.String"
                  description="Specifies the name of the database object used to open a rowset."
                  name="OpenRowset">Hoja1$</property>
                <property
                  dataType="System.String"
                  description="Specifies the variable that contains the name of the database object used to open a rowset."
                  name="OpenRowsetVariable"></property>
                <property
                  dataType="System.String"
                  description="The SQL command to be executed."
                  name="SqlCommand"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor, Microsoft.DataTransformationServices.Controls, Version=15.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"></property>
                <property
                  dataType="System.String"
                  description="The variable that contains the SQL command to be executed."
                  name="SqlCommandVariable"></property>
                <property
                  dataType="System.Int32"
                  description="Specifies the mode used to access the database."
                  name="AccessMode"
                  typeConverter="AccessMode">0</property>
                <property
                  dataType="System.String"
                  description="The mapping from parameters in the SQL command to variables."
                  name="ParameterMapping"></property>
              </properties>
              <connections>
                <connection
                  refId="Package\Data Flow Task\Excel Source.Connections[OleDbConnection]"
                  connectionManagerID="Package.ConnectionManagers[Administrador de conexiones con Excel]"
                  connectionManagerRefId="Package.ConnectionManagers[Administrador de conexiones con Excel]"
                  description="The OLE DB runtime connection used to access the database."
                  name="OleDbConnection" />
              </connections>
              <outputs>
                <output
                  refId="Package\Data Flow Task\Excel Source.Outputs[Excel Source Output]"
                  name="Excel Source Output">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[Periodo]"
                      dataType="r8"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Data Flow Task\Excel Source.Outputs[Excel Source Output].ExternalColumns[Periodo]"
                      lineageId="Package\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[Periodo]"
                      name="Periodo"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[Cuenta]"
                      dataType="r8"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Data Flow Task\Excel Source.Outputs[Excel Source Output].ExternalColumns[Cuenta]"
                      lineageId="Package\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[Cuenta]"
                      name="Cuenta"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[SUBCUENTA]"
                      dataType="r8"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Data Flow Task\Excel Source.Outputs[Excel Source Output].ExternalColumns[SUBCUENTA]"
                      lineageId="Package\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[SUBCUENTA]"
                      name="SUBCUENTA"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[SECUENCIA]"
                      dataType="r8"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Data Flow Task\Excel Source.Outputs[Excel Source Output].ExternalColumns[SECUENCIA]"
                      lineageId="Package\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[SECUENCIA]"
                      name="SECUENCIA"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[ID ORIGEN]"
                      dataType="r8"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Data Flow Task\Excel Source.Outputs[Excel Source Output].ExternalColumns[ID ORIGEN]"
                      lineageId="Package\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[ID ORIGEN]"
                      name="ID ORIGEN"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[Total]"
                      dataType="r8"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Data Flow Task\Excel Source.Outputs[Excel Source Output].ExternalColumns[Total]"
                      lineageId="Package\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[Total]"
                      name="Total"
                      truncationRowDisposition="FailComponent" />
                  </outputColumns>
                  <externalMetadataColumns
                    isUsed="True">
                    <externalMetadataColumn
                      refId="Package\Data Flow Task\Excel Source.Outputs[Excel Source Output].ExternalColumns[Periodo]"
                      dataType="r8"
                      name="Periodo" />
                    <externalMetadataColumn
                      refId="Package\Data Flow Task\Excel Source.Outputs[Excel Source Output].ExternalColumns[Cuenta]"
                      dataType="r8"
                      name="Cuenta" />
                    <externalMetadataColumn
                      refId="Package\Data Flow Task\Excel Source.Outputs[Excel Source Output].ExternalColumns[SUBCUENTA]"
                      dataType="r8"
                      name="SUBCUENTA" />
                    <externalMetadataColumn
                      refId="Package\Data Flow Task\Excel Source.Outputs[Excel Source Output].ExternalColumns[SECUENCIA]"
                      dataType="r8"
                      name="SECUENCIA" />
                    <externalMetadataColumn
                      refId="Package\Data Flow Task\Excel Source.Outputs[Excel Source Output].ExternalColumns[ID ORIGEN]"
                      dataType="r8"
                      name="ID ORIGEN" />
                    <externalMetadataColumn
                      refId="Package\Data Flow Task\Excel Source.Outputs[Excel Source Output].ExternalColumns[Total]"
                      dataType="r8"
                      name="Total" />
                  </externalMetadataColumns>
                </output>
                <output
                  refId="Package\Data Flow Task\Excel Source.Outputs[Excel Source Error Output]"
                  isErrorOut="true"
                  name="Excel Source Error Output">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Data Flow Task\Excel Source.Outputs[Excel Source Error Output].Columns[Periodo]"
                      dataType="r8"
                      lineageId="Package\Data Flow Task\Excel Source.Outputs[Excel Source Error Output].Columns[Periodo]"
                      name="Periodo" />
                    <outputColumn
                      refId="Package\Data Flow Task\Excel Source.Outputs[Excel Source Error Output].Columns[Cuenta]"
                      dataType="r8"
                      lineageId="Package\Data Flow Task\Excel Source.Outputs[Excel Source Error Output].Columns[Cuenta]"
                      name="Cuenta" />
                    <outputColumn
                      refId="Package\Data Flow Task\Excel Source.Outputs[Excel Source Error Output].Columns[SUBCUENTA]"
                      dataType="r8"
                      lineageId="Package\Data Flow Task\Excel Source.Outputs[Excel Source Error Output].Columns[SUBCUENTA]"
                      name="SUBCUENTA" />
                    <outputColumn
                      refId="Package\Data Flow Task\Excel Source.Outputs[Excel Source Error Output].Columns[SECUENCIA]"
                      dataType="r8"
                      lineageId="Package\Data Flow Task\Excel Source.Outputs[Excel Source Error Output].Columns[SECUENCIA]"
                      name="SECUENCIA" />
                    <outputColumn
                      refId="Package\Data Flow Task\Excel Source.Outputs[Excel Source Error Output].Columns[ID ORIGEN]"
                      dataType="r8"
                      lineageId="Package\Data Flow Task\Excel Source.Outputs[Excel Source Error Output].Columns[ID ORIGEN]"
                      name="ID ORIGEN" />
                    <outputColumn
                      refId="Package\Data Flow Task\Excel Source.Outputs[Excel Source Error Output].Columns[Total]"
                      dataType="r8"
                      lineageId="Package\Data Flow Task\Excel Source.Outputs[Excel Source Error Output].Columns[Total]"
                      name="Total" />
                    <outputColumn
                      refId="Package\Data Flow Task\Excel Source.Outputs[Excel Source Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Data Flow Task\Excel Source.Outputs[Excel Source Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Data Flow Task\Excel Source.Outputs[Excel Source Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Data Flow Task\Excel Source.Outputs[Excel Source Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Data Flow Task\OLE DB Destination"
              componentClassID="Microsoft.OLEDBDestination"
              contactInfo="OLE DB Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;4"
              description="OLE DB Destination"
              name="OLE DB Destination"
              usesDispositions="true"
              version="4">
              <properties>
                <property
                  dataType="System.Int32"
                  description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                  name="CommandTimeout">0</property>
                <property
                  dataType="System.String"
                  description="Specifies the name of the database object used to open a rowset."
                  name="OpenRowset">[dbo].[AUX_H_OSPEGAP_TABLA_EXCEL]</property>
                <property
                  dataType="System.String"
                  description="Specifies the variable that contains the name of the database object used to open a rowset."
                  name="OpenRowsetVariable"></property>
                <property
                  dataType="System.String"
                  description="The SQL command to be executed."
                  name="SqlCommand"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor, Microsoft.DataTransformationServices.Controls, Version=15.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"></property>
                <property
                  dataType="System.Int32"
                  description="Specifies the column code page to use when code page information is unavailable from the data source."
                  name="DefaultCodePage">1252</property>
                <property
                  dataType="System.Boolean"
                  description="Forces the use of the DefaultCodePage property value when describing character data."
                  name="AlwaysUseDefaultCodePage">false</property>
                <property
                  dataType="System.Int32"
                  description="Specifies the mode used to access the database."
                  name="AccessMode"
                  typeConverter="AccessMode">3</property>
                <property
                  dataType="System.Boolean"
                  description="Indicates whether the values supplied for identity columns will be copied to the destination. If false, values for identity columns will be auto-generated at the destination. Applies only if fast load is turned on."
                  name="FastLoadKeepIdentity">false</property>
                <property
                  dataType="System.Boolean"
                  description="Indicates whether the columns containing null will have null inserted in the destination. If false, columns containing null will have their default values inserted at the destination. Applies only if fast load is turned on."
                  name="FastLoadKeepNulls">false</property>
                <property
                  dataType="System.String"
                  description="Specifies options to be used with fast load.  Applies only if fast load is turned on."
                  name="FastLoadOptions">TABLOCK,CHECK_CONSTRAINTS</property>
                <property
                  dataType="System.Int32"
                  description="Specifies when commits are issued during data insertion.  A value of 0 specifies that one commit will be issued at the end of data insertion.  Applies only if fast load is turned on."
                  name="FastLoadMaxInsertCommitSize">2147483647</property>
              </properties>
              <connections>
                <connection
                  refId="Package\Data Flow Task\OLE DB Destination.Connections[OleDbConnection]"
                  connectionManagerID="{B7F51259-1C55-48B8-B08E-523E07D37E64}:external"
                  connectionManagerRefId="Project.ConnectionManagers[DS_CONSULTAS_DW]"
                  description="The OLE DB runtime connection used to access the database."
                  name="OleDbConnection" />
              </connections>
              <inputs>
                <input
                  refId="Package\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input]"
                  errorOrTruncationOperation="Insert"
                  errorRowDisposition="FailComponent"
                  hasSideEffects="true"
                  name="OLE DB Destination Input">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[Periodo]"
                      cachedDataType="r8"
                      cachedName="Periodo"
                      externalMetadataColumnId="Package\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[PERIODO]"
                      lineageId="Package\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[Periodo]" />
                    <inputColumn
                      refId="Package\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[Cuenta]"
                      cachedDataType="r8"
                      cachedName="Cuenta"
                      externalMetadataColumnId="Package\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[CUENTA]"
                      lineageId="Package\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[Cuenta]" />
                    <inputColumn
                      refId="Package\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[SECUENCIA]"
                      cachedDataType="r8"
                      cachedName="SECUENCIA"
                      externalMetadataColumnId="Package\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[SECUENCIA]"
                      lineageId="Package\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[SECUENCIA]" />
                    <inputColumn
                      refId="Package\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[SUBCUENTA]"
                      cachedDataType="r8"
                      cachedName="SUBCUENTA"
                      externalMetadataColumnId="Package\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[SUNCUENTA]"
                      lineageId="Package\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[SUBCUENTA]" />
                    <inputColumn
                      refId="Package\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[ID ORIGEN]"
                      cachedDataType="r8"
                      cachedName="ID ORIGEN"
                      externalMetadataColumnId="Package\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[ID_ORIGEN]"
                      lineageId="Package\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[ID ORIGEN]" />
                    <inputColumn
                      refId="Package\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[Total]"
                      cachedDataType="r8"
                      cachedName="Total"
                      externalMetadataColumnId="Package\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[IMPORTE]"
                      lineageId="Package\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[Total]" />
                  </inputColumns>
                  <externalMetadataColumns
                    isUsed="True">
                    <externalMetadataColumn
                      refId="Package\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[PERIODO]"
                      dataType="r8"
                      name="PERIODO" />
                    <externalMetadataColumn
                      refId="Package\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[CUENTA]"
                      dataType="r8"
                      name="CUENTA" />
                    <externalMetadataColumn
                      refId="Package\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[SUNCUENTA]"
                      dataType="r8"
                      name="SUNCUENTA" />
                    <externalMetadataColumn
                      refId="Package\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[SECUENCIA]"
                      dataType="r8"
                      name="SECUENCIA" />
                    <externalMetadataColumn
                      refId="Package\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[ID_ORIGEN]"
                      dataType="r8"
                      name="ID_ORIGEN" />
                    <externalMetadataColumn
                      refId="Package\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[IMPORTE]"
                      dataType="r8"
                      name="IMPORTE" />
                    <externalMetadataColumn
                      refId="Package\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[id_fuente_recaudacion]"
                      dataType="i4"
                      name="id_fuente_recaudacion" />
                  </externalMetadataColumns>
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Data Flow Task\OLE DB Destination.Outputs[OLE DB Destination Error Output]"
                  exclusionGroup="1"
                  isErrorOut="true"
                  name="OLE DB Destination Error Output"
                  synchronousInputId="Package\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Data Flow Task\OLE DB Destination.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Data Flow Task\OLE DB Destination.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Data Flow Task\OLE DB Destination.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Data Flow Task\OLE DB Destination.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
          </components>
          <paths>
            <path
              refId="Package\Data Flow Task.Paths[Excel Source Output]"
              endId="Package\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input]"
              name="Excel Source Output"
              startId="Package\Data Flow Task\Excel Source.Outputs[Excel Source Output]" />
          </paths>
        </pipeline>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Incorpora la Info en AUX_H_RECAUDACION_DETALLE"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Tarea Ejecutar SQL"
      DTS:DTSID="{330EE72B-0E97-4A88-A598-E0579D8281FE}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Incorpora la Info en AUX_H_RECAUDACION_DETALLE"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{E98BA7A5-A37B-425A-9974-434BB6F83FD9}"
          SQLTask:SqlStatementSource="--Borra AUX_H_RECAUDACION_DETALLE&#xA;truncate table AUX_H_RECAUDACION_DETALLE&#xA;&#xA;&#xA;----- Insert a la tabla AUX_H_RECAUDACION_DETALLE con la info de OSPEGAP&#xA;----- Se cruza por la d_personas para traer la localidad del afiliado.&#xA;----- Se cruza por el Excel ( dentro de la tabla Consultas_DW.dbo.AUX_H_OSPEGAP_TABLA_EXCEL) tenemos el excel a incluir de OSPEGAP&#xA;&#xA;---- Actualiza el id correspondiente en la tabla D_FUENTE_RECAUDACION&#xA;&#xA;UPDATE Consultas_DW.dbo.AUX_H_OSPEGAP_TABLA_EXCEL SET id_fuente_recaudacion = 3&#xA;&#xA;/* Se inserta en la AUX_H_RECAUDACION_DETALLE */ &#xA; &#xA; --- Primero para el stock del mismo periodo excel, cruza por cuenta, secuencia y subnumero&#xA;&#xA;Declare @Periodo int, @Periodo_Anterior Int&#xA;SET @Periodo = (select max(periodo) from Consultas_DW.dbo.AUX_H_OSPEGAP_TABLA_EXCEL)&#xA;&#xA;insert into AUX_H_RECAUDACION_DETALLE&#xA;( id_periodo, afiliado,  subnumero, secuencia &#xA;,id_persona,   id_origen_recaudacion, id_producto, id_subproducto,&#xA;id_plan_producto, id_entidad,  id_localidad, edad_actual,  total_recaudacion,&#xA;grilla, id_fuente_recaudacion)&#xA;select @Periodo as id_periodo, T.cuenta as afiliado, suncuenta as subnumero, T.secuencia &#xA;,H.id_persona,  ID_ORigen as id_origen_recaudacion, id_producto, id_subproducto,&#xA;id_plan_producto, id_entidad, id_localidad_afiliado as id_localidad, edad_actual, importe as total_recaudacion,&#xA;grilla, id_fuente_recaudacion&#xA;from H_COMER_STOCK_AFILIA H&#xA;Inner Join D_PERSONAS D ON D.id_persona = H.id_persona&#xA;Inner join Consultas_DW.dbo.AUX_H_OSPEGAP_TABLA_EXCEL T ON T.cuenta = H.afiliado and &#xA; T.secuencia  = H.secuencia and T.suncuenta = H.subnumero&#xA;where id_periodo = @Periodo &#xA;&#xA;---- Segundo para el stock anterior al periodo excel, cruza por cuenta, secuencia y subnumero.&#xA;---- Adicional con el not exists excluye las personas ya se agregaron en el paso anterior&#xA;&#xA;SET @Periodo_Anterior = (select dbo.PeriodosAnteriores(@Periodo,2))&#xA;&#xA;insert into AUX_H_RECAUDACION_DETALLE&#xA;( id_periodo, afiliado,  subnumero, secuencia &#xA;,id_persona, &#x9; id_origen_recaudacion,&#x9;id_producto,&#x9;id_subproducto,&#xA;id_plan_producto, id_entidad,  id_localidad, edad_actual,  total_recaudacion,&#xA;grilla, id_fuente_recaudacion)&#xA;select  periodo, T.cuenta as afiliado, suncuenta as subnumero, T.secuencia &#xA;,H.id_persona, &#x9;ID_ORigen as id_origen_recaudacion,&#x9;id_producto,&#x9;id_subproducto,&#xA;id_plan_producto, id_entidad, id_localidad_afiliado as id_localidad, edad_actual, importe as total_recaudacion,&#xA;grilla, id_fuente_recaudacion&#xA;from H_COMER_STOCK_AFILIA H&#xA;Inner Join D_PERSONAS D ON D.id_persona = H.id_persona and H.id_periodo = @Periodo_Anterior&#xA;Inner join Consultas_DW.dbo.AUX_H_OSPEGAP_TABLA_EXCEL T ON T.cuenta = H.afiliado and &#xA; T.secuencia  = H.secuencia  and T.suncuenta = H.subnumero&#xA;WHERE NOT EXISTS&#xA;    (SELECT afiliado, id_persona&#xA;     FROM AUX_H_RECAUDACION_DETALLE A&#xA;     WHERE A.afiliado = &#xA;            T.cuenta and T.secuencia  = A.secuencia and   T.suncuenta = A.subnumero)&#xA;&#xA;/*  Actualizaciones sobre la AUX_H_RECAUDACION_DETALLE */&#xA;&#xA; --/* Actualiza Fecha Ingreso Segmento*/&#xA;update AUX_H_RECAUDACION_DETALLE &#xA;set fecha_ingreso_segmento = Hc.fecha_ingreso_segmento&#xA;from AUX_H_RECAUDACION_DETALLE HD&#xA;inner join (select id_persona, max(fecha_ingreso_segmento_comercial) as fecha_ingreso_segmento from h_comer_stock_afilia (nolock) where id_periodo &lt;= @Periodo group by id_persona) HC on HD.id_persona = HC.id_persona&#xA;Where hd.id_periodo = @Periodo &#xA;&#xA;-- A partir del mes 11/2012 la categoria viene de sist. y la replicamos.&#xA;&#xA;UPDATE AUX_H_RECAUDACION_DETALLE SET Id_Categoria = A.Id_Categoria&#xA;FROM AUX_H_RECAUDACION_DETALLE H1&#xA;INNER JOIN H_COMP_GRUPO_ACTIVO A ON H1.id_periodo = A.id_periodo AND H1.id_Persona = A.id_persona&#xA;WHERE A.id_periodo in (Select id_periodo from aux_periodo_mes_borra)&#xA;&#xA;UPDATE AUX_H_recaudacion_detalle &#xA;SET Id_Categoria = 9&#xA;WHERE Id_Categoria is null or Id_Categoria not in (SELECT id_categoria FROM d_categoria_afiliado) or id_categoria = ' '&#xA;&#xA;&#xA;/* Actualiza el rango de edad en AUX_H_RECAUDACION_DETALLE. */&#xA;&#xA;UPDATE DW_SALUD.dbo.AUX_H_RECAUDACION_DETALLE&#xA;    set id_rango_edad_rec = case&#xA;      WHEN edad_actual between 0 and 1 THEN 1&#xA;      WHEN edad_actual between 2 and 18 THEN 2&#xA;      WHEN edad_actual between 19 and 45 THEN 3&#xA;      WHEN edad_actual between 46 and 65 THEN 4&#xA;      WHEN edad_actual between 66 and 75 THEN 5&#xA;      WHEN edad_actual &gt;= 76 and edad_actual &lt; 999 THEN 6&#xA;      WHEN edad_actual = 999 or edad_actual &lt; 0 THEN 0&#xA;      END&#xA;   FROM DW_SALUD.dbo.AUX_H_RECAUDACION_DETALLE&#xA;   where id_periodo = @Periodo" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Inserta en  H_RECAUDACION_DETALLE Nuevo"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Tarea Ejecutar SQL"
      DTS:Disabled="True"
      DTS:DTSID="{0989BF41-4F2E-4F4E-8ADA-A34A63F02CAA}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Inserta en  H_RECAUDACION_DETALLE Nuevo"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:SqlStatementSource="---- Se declara en la Varible el periodo de proceso&#xA;&#xA;Declare @Periodo int&#xA;&#xA;Set @Periodo = (select max(id_periodo) from aux_h_recaudacion_detalle)&#xA;&#xA;---- Inserta todos los datos de la AUX_H_recaudacion_detalle en la H_recaudacion_detalle &#xA;&#xA;INSERT INTO H_RECAUDACION_DETALLE (&#xA;&#x9;&#x9;id_periodo, afiliado,&#xA;&#x9;&#x9;subnumero, secuencia,&#xA;&#x9;&#x9;id_persona, id_origen_recaudacion,&#xA;&#x9;&#x9;id_producto, id_subproducto,&#xA;&#x9;&#x9;id_plan_producto, id_entidad,&#xA;&#x9;&#x9;id_localidad, edad_actual,&#xA;&#x9;&#x9;total_recaudacion, grilla,&#xA;&#x9;&#x9;fecha_ingreso_segmento, fecha_ingreso_salud,&#xA;&#x9;&#x9;id_categoria, id_empresa_recaudacion,&#xA;&#x9;&#x9;id_tipo_entidad_recaudacion, rcosto1,&#xA;&#x9;&#x9;rcosto2, rcosto3,&#xA;&#x9;&#x9;rcosto4, id_producto_original,&#xA;&#x9;&#x9;id_subproducto_original, id_plan_producto_original,&#xA;&#x9;&#x9;grilla_original, id_periodo_liquidacion,&#xA;&#x9;&#x9;id_factura_A_E_rec, id_empresa_PE_rec,&#xA;&#x9;&#x9;id_tipo_entidad_PE_rec, id_marca_PE_rec,&#xA;&#x9;&#x9;id_convenio_especial_rec, id_periodo_consumo_M,&#xA;&#x9;&#x9;id_rango_edad_rec,id_fuente_recaudacion,&#xA;&#x9;&#x9;id_convenio, id_tipo_entidad_convenio )&#xA;&#xA;SELECT id_periodo, afiliado, &#xA;       subnumero, secuencia,&#xA;       id_persona, id_origen_recaudacion, &#xA;       id_producto, id_subproducto,&#xA;       id_plan_producto, id_entidad,&#xA;       id_localidad, edad_actual,&#xA;       total_recaudacion, grilla, &#xA;       fecha_ingreso_segmento, fecha_ingreso_salud, &#xA;       id_categoria, id_empresa,&#xA;       Id_Tipo_Entidad, rcosto1,&#xA;       rcosto2, rcosto3,&#xA;       rcosto4, id_producto_original,&#xA;       id_subproducto_original, id_plan_producto_original,&#xA;       grilla_original, id_periodo_liquidacion,&#xA;       id_factura_A_E_rec, id_empresa_PE_rec,&#xA;       id_tipo_entidad_PE_rec, id_marca_PE_rec,&#xA;       id_convenio_especial_rec, id_periodo_consumo_M,&#xA;       id_rango_edad_rec, id_fuente_recaudacion,&#xA;       id_convenio, id_tipo_entidad_convenio&#xA;&#xA;FROM AUX_H_RECAUDACION_DETALLE&#xA;where id_periodo = @Periodo&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Recaudaciones_ACTUALIZACION_COSTO1234 Nuevo"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Tarea Ejecutar SQL"
      DTS:DTSID="{7D3E40A5-8C42-4243-8F88-90523E0DD7D1}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Recaudaciones_ACTUALIZACION_COSTO1234 Nuevo"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{E98BA7A5-A37B-425A-9974-434BB6F83FD9}"
          SQLTask:SqlStatementSource="/* Actualiza Costo 1 */&#xA;&#xA;DECLARE @Periodo INT&#xA;SET @Periodo = (select max(periodo) from Consultas_DW.dbo.AUX_H_OSPEGAP_TABLA_EXCEL)&#xA;&#xA;UPDATE AUX_H_RECAUDACION_DETALLE&#xA;SET rcosto1 = 1&#xA;from&#x9;AUX_H_RECAUDACION_DETALLE&#x9;a11&#xA;&#x9;join&#x9;D_PLANES&#x9;a12&#xA;&#x9;  on &#x9;(a11.id_plan_producto = a12.id_plan_producto and &#xA;&#x9;a11.id_producto = a12.id_producto)&#xA;&#x9;join&#x9;D_PRODUCTOS&#x9;a13&#xA;&#x9;  on &#x9;(a12.id_producto = a13.id_producto)&#xA;where&#x9;(a11.id_origen_recaudacion not in (17, 18, 19, 20, 21, 22, 24, 25, 26, 29, 30)&#xA; AND a13.id_segmento not in (3)&#xA; AND a12.id_subrubro_ley in (1, 2, 3, 5, 6, 7)&#xA; AND a11.id_periodo = @Periodo) and id_fuente_recaudacion = 3&#xA;&#xA;UPDATE AUX_H_RECAUDACION_DETALLE&#xA;SET rcosto1 = 0&#xA;WHERE rcosto1 IS NULL and id_periodo = @Periodo&#xA;&#xA;/* Actualiza Costo 2 */&#xA;&#xA;UPDATE AUX_H_RECAUDACION_DETALLE&#xA;SET rcosto2 = 1&#xA;from&#x9;AUX_H_RECAUDACION_DETALLE&#x9;a11&#xA;&#x9;join&#x9;D_PLANES&#x9;a12&#xA;&#x9;  on &#x9;(a11.id_plan_producto = a12.id_plan_producto and &#xA;&#x9;a11.id_producto = a12.id_producto)&#xA;&#x9;join&#x9;D_PRODUCTOS&#x9;a13&#xA;&#x9;  on &#x9;(a12.id_producto = a13.id_producto)&#xA;where &#xA; a13.id_segmento not in (3)&#xA; and a12.id_subrubro_ley in (1, 2, 3, 5, 6, 7)&#xA; and a13.Id_Clase_Producto in ('S ')&#xA; and a11.id_origen_recaudacion not in (18, 29, 30, 17)&#xA; and a11.id_periodo = @Periodo  and id_fuente_recaudacion = 3&#xA; &#xA;UPDATE AUX_H_RECAUDACION_DETALLE&#xA;SET rcosto2 = 0&#xA;WHERE rcosto2 IS NULL AND id_periodo = @Periodo  &#xA;&#xA;/* Actualiza Costo 3 */&#xA;&#xA;&#xA;UPDATE AUX_H_RECAUDACION_DETALLE&#xA;SET rcosto3 = 1 &#xA;from&#x9;AUX_H_RECAUDACION_DETALLE&#x9;a11&#xA;&#x9;join&#x9;D_PLANES&#x9;a12&#xA;&#x9;  on &#x9;(a11.id_plan_producto = a12.id_plan_producto and &#xA;&#x9;a11.id_producto = a12.id_producto)&#xA;&#x9;join&#x9;D_PRODUCTOS&#x9;a13&#xA;&#x9;  on &#x9;(a12.id_producto = a13.id_producto)&#xA;where&#xA; a13.id_segmento not in (3)&#xA; and a11.id_periodo = @Periodo   and id_fuente_recaudacion = 3&#xA; and ((a13.Id_Clase_Producto in ('G ')&#xA; and a11.id_origen_recaudacion not in (18, 29)&#xA; and not ((a11.id_producto = 5 and a11.id_plan_producto = 'S10  ')&#xA;   or  (a11.id_producto=5 and a11.id_plan_producto='S10-C')&#xA;   or  (a11.id_producto=5 and a11.id_plan_producto='S10-S')&#xA;   or  (a11.id_producto=10 and a11.id_plan_producto='S10  ')&#xA;   or  (a11.id_producto=13 and a11.id_plan_producto='S10  ')&#xA;   or  (a11.id_producto=1 and a11.id_plan_producto='S10  ')&#xA;   or  (a11.id_producto=34 and a11.id_plan_producto='S10  ')&#xA;   or  (a11.id_producto=34 and a11.id_plan_producto='S10-C')&#xA;   or  (a11.id_producto=34 and a11.id_plan_producto='S10-S')&#xA;   or  (a11.id_producto=5 and a11.id_plan_producto='S20  ')&#xA;   or  (a11.id_producto=5 and a11.id_plan_producto='S20-C')&#xA;   or  (a11.id_producto=5 and a11.id_plan_producto='S20-S')&#xA;   or  (a11.id_producto=34 and a11.id_plan_producto='S20  ')&#xA;   or  (a11.id_producto=34 and a11.id_plan_producto='S20-C')&#xA;   or  (a11.id_producto=34 and a11.id_plan_producto='S20-S'))&#xA;   and exists (SELECT id_periodo, id_persona FROM H_COMER_STOCK_AFILIA S WHERE S.id_periodo=a11.id_periodo AND S.id_persona=a11.id_persona)))&#xA; &#xA; &#xA;UPDATE AUX_H_RECAUDACION_DETALLE&#xA;SET rcosto3 = 1 &#xA;where id_origen_recaudacion in (30) &#xA;and id_periodo = @Periodo and id_fuente_recaudacion = 3&#xA; &#xA;UPDATE AUX_H_RECAUDACION_DETALLE&#xA;SET rcosto3 = 1 &#xA;From AUX_H_RECAUDACION_DETALLE&#x9;a11&#xA;&#x9;join&#x9;D_PLANES&#x9;a12&#xA;&#x9;  on &#x9;(a11.id_plan_producto = a12.id_plan_producto and &#xA;&#x9;a11.id_producto = a12.id_producto)&#xA;&#x9;join&#x9;D_PRODUCTOS&#x9;a13&#xA;&#x9;  on &#x9;(a12.id_producto = a13.id_producto)&#xA;where (a12.id_subrubro_ley in (1, 2, 3, 5, 6, 7)&#xA; and a13.Id_Clase_Producto in ('S ')&#xA; and a11.id_origen_recaudacion not in (18, 29, 17, 30))&#xA; and a11.id_periodo = @Periodo and id_fuente_recaudacion = 3&#xA;  &#xA;UPDATE AUX_H_RECAUDACION_DETALLE&#xA;SET rcosto3 = 1 &#xA;From AUX_H_RECAUDACION_DETALLE&#x9;a11&#xA;&#x9;join&#x9;D_PRODUCTOS&#x9;a13&#xA;&#x9;  on &#x9;(a11.id_producto = a13.id_producto)&#xA;where a13.Id_Clase_Producto in ('U')and id_periodo = @Periodo and id_fuente_recaudacion = 3&#xA; &#xA;&#xA;UPDATE AUX_H_RECAUDACION_DETALLE&#xA;SET rcosto3 = 0&#xA;WHERE rcosto3 is null and id_periodo = @Periodo&#xA;&#xA;/* Actualiza Costo 4 */&#xA;&#xA;UPDATE AUX_H_RECAUDACION_DETALLE&#xA;SET rcosto4 = 1 &#xA;from&#x9;AUX_H_RECAUDACION_DETALLE&#x9;a11&#xA;&#x9;join&#x9;D_PLANES&#x9;a12&#xA;&#x9;  on &#x9;(a11.id_plan_producto = a12.id_plan_producto and &#xA;&#x9;a11.id_producto = a12.id_producto)&#xA;&#x9;join&#x9;D_PRODUCTOS&#x9;a13&#xA;&#x9;  on &#x9;(a12.id_producto = a13.id_producto)&#xA;where &#xA; a13.id_segmento not in (3)&#xA; and a11.id_periodo = @Periodo and id_fuente_recaudacion = 3&#xA; and ((a13.Id_Clase_Producto in ('G ')&#xA; and a11.id_origen_recaudacion not in (18, 29)&#xA; and not ((a11.id_producto = 5 and a11.id_plan_producto = 'S10  ')&#xA;   or  (a11.id_producto=5 and a11.id_plan_producto='S10-C')&#xA;   or  (a11.id_producto=5 and a11.id_plan_producto='S10-S')&#xA;   or  (a11.id_producto=10 and a11.id_plan_producto='S10  ')&#xA;   or  (a11.id_producto=13 and a11.id_plan_producto='S10  ')&#xA;   or  (a11.id_producto=1 and a11.id_plan_producto='S10  ')&#xA;   or  (a11.id_producto=34 and a11.id_plan_producto='S10  ')&#xA;   or  (a11.id_producto=34 and a11.id_plan_producto='S10-C')&#xA;   or  (a11.id_producto=34 and a11.id_plan_producto='S10-S')&#xA;   or  (a11.id_producto=5 and a11.id_plan_producto='S20  ')&#xA;   or  (a11.id_producto=5 and a11.id_plan_producto='S20-C')&#xA;   or  (a11.id_producto=5 and a11.id_plan_producto='S20-S')&#xA;   or  (a11.id_producto=34 and a11.id_plan_producto='S20  ')&#xA;   or  (a11.id_producto=34 and a11.id_plan_producto='S20-C')&#xA;   or  (a11.id_producto=34 and a11.id_plan_producto='S20-S'))&#xA;   and exists (SELECT id_periodo, id_persona FROM H_COMER_STOCK_AFILIA S WHERE S.id_periodo=a11.id_periodo AND S.id_persona=a11.id_persona)))&#xA; &#xA; &#xA;UPDATE AUX_H_RECAUDACION_DETALLE&#xA;SET rcosto4 = 1 &#xA;where id_origen_recaudacion in (30, 29)&#xA;and id_periodo = @Periodo and id_fuente_recaudacion = 3&#xA;  &#xA; &#xA;UPDATE AUX_H_RECAUDACION_DETALLE&#xA;SET rcosto4 = 1 &#xA;From AUX_H_RECAUDACION_DETALLE&#x9;a11&#xA;&#x9;join&#x9;D_PLANES&#x9;a12&#xA;&#x9;  on &#x9;(a11.id_plan_producto = a12.id_plan_producto and &#xA;&#x9;a11.id_producto = a12.id_producto)&#xA;&#x9;join&#x9;D_PRODUCTOS&#x9;a13&#xA;&#x9;  on &#x9;(a12.id_producto = a13.id_producto)&#xA;where (a12.id_subrubro_ley in (1, 2, 3, 5, 6, 7)&#xA; and a13.Id_Clase_Producto in ('S ')&#xA; and a11.id_origen_recaudacion not in (18, 29, 17, 30))&#xA;and a11.id_periodo = @Periodo and id_fuente_recaudacion = 3&#xA; &#xA; &#xA;UPDATE AUX_H_RECAUDACION_DETALLE&#xA;SET rcosto4 = 1 &#xA;From AUX_H_RECAUDACION_DETALLE&#x9;a11&#xA;&#x9;join&#x9;D_PRODUCTOS&#x9;a13&#xA;&#x9;  on &#x9;(a11.id_producto = a13.id_producto)&#xA;where a13.Id_Clase_Producto in ('U')&#xA;and a11.id_periodo = @Periodo and id_fuente_recaudacion = 3&#xA; &#xA;&#xA;Update AUX_H_RECAUDACION_DETALLE&#xA;Set rcosto4 = 0&#xA;Where rcosto4 is null and id_periodo = @Periodo&#xA;&#xA;&#xA;/* Actualiza Plan, Producto, Subproducto Original */&#xA;&#xA;----- Actualiza el id_producto, id_plan producto y id_subproducto original que viene en el txt. &#xA;----- Se agrego la condición que actualice solo cuando el mismo esta null, para que no pise la info en caso de reproceso.&#xA;&#xA;UPDATE AUX_H_RECAUDACION_DETALLE&#xA;SET id_producto_original = id_producto,&#xA;&#x9;id_subproducto_original = id_subproducto,&#xA;&#x9;id_plan_producto_original = id_plan_producto&#xA;Where id_periodo = @Periodo and id_fuente_recaudacion = 3&#xA;and (id_producto_original is null or id_subproducto_original is null or  id_plan_producto_original is null)&#xA;&#xA;--RECAUDACION&#xA;-- Busco las personas que tengan supra y las inserto en la temporal&#xA;&#xA;Select R.afiliado, R.id_persona Into #AfiliadoPersona&#xA;From AUX_H_RECAUDACION_DETALLE R Inner join D_PRODUCTOS P On (R.id_producto=P.id_producto)&#xA;Where P.id_clase_producto IN ('G', 'U') and id_periodo = @Periodo and rcosto3 = 1&#xA;and id_fuente_recaudacion = 3&#xA;Group by R.afiliado, R.id_persona&#xA;&#xA;-- Busco los productos de Salud para los registros obtenidos anteriormente&#xA;&#xA;Select R.afiliado, R.id_persona, R.id_producto, R.id_subproducto, R.id_plan_producto Into #CuentasSalud&#xA;From AUX_H_RECAUDACION_DETALLE R Inner join D_PRODUCTOS P On (R.id_producto=P.id_producto)&#xA;Inner join #AfiliadoPersona A On (R.afiliado=A.afiliado and R.id_persona=A.id_persona)&#xA;Where P.id_clase_producto IN ('S') and R.id_producto &lt;&gt; 18 and id_periodo = @Periodo&#xA;and id_fuente_recaudacion = 3&#xA;Group by R.afiliado, R.id_persona, R.id_producto, R.id_subproducto, R.id_plan_producto &#xA;&#xA;-- Actualizo producto, subproducto y plan con los datos obtenidos en el paso anterior.&#xA;&#xA;Update AUX_H_RECAUDACION_DETALLE&#xA;Set id_producto = C.id_producto,&#xA;&#x9;id_subproducto = C.id_subproducto,&#xA;&#x9;id_plan_producto = C.id_plan_producto&#xA;From AUX_H_RECAUDACION_DETALLE R &#xA;Inner join #CuentasSalud C On (R.afiliado=C.afiliado and R.id_persona=C.id_persona)&#xA;Inner join D_PRODUCTOS P On (R.id_producto=P.id_producto)&#xA;Where R.id_periodo = @Periodo AND P.id_clase_producto IN ('G', 'U') and R.rcosto3 = 1&#xA;and id_fuente_recaudacion = 3&#xA;&#xA;-- Las personas que me quedaron sin actualizar, porque tenia salud en ese periodo, pero no con ese afiliado, las actualizo aca.&#xA;&#xA;Select id_periodo, id_persona, id_producto = NULL, id_subproducto = NULL, id_plan_producto = NULL INTO #Personas &#xA;from AUX_H_RECAUDACION_DETALLE H INNER JOIN D_PRODUCTOS P ON (H.id_producto=P.id_producto) where id_periodo = @Periodo and rcosto3 = 1 and P.id_clase_producto IN ('G', 'U')&#xA;and id_fuente_recaudacion = 3&#xA;&#xA;Alter table #Personas alter column id_plan_producto CHAR(5)&#xA;&#xA;UPDATE #Personas&#xA;SET id_producto = S.id_producto,&#xA;&#x9;id_subproducto = S.id_subproducto,&#xA;&#x9;id_plan_producto = S.id_plan_producto&#xA;from H_COMER_STOCK_AFILIA S INNER JOIN #Personas P on (S.id_persona=P.id_persona)&#xA;WHERE P.id_producto IS NULL and S.id_producto &lt;&gt; 18&#xA;&#xA;UPDATE AUX_H_RECAUDACION_DETALLE&#xA;SET id_producto = T.id_producto,&#xA;&#x9;id_subproducto = T.id_subproducto,&#xA;&#x9;id_plan_producto = T.id_plan_producto&#xA;From AUX_H_RECAUDACION_DETALLE H inner join #Personas T on (H.id_persona=T.id_persona and H.id_periodo=T.id_periodo)&#xA;inner join D_PRODUCTOS P on (H.id_producto=P.id_producto)&#xA;where P.id_clase_producto in ('G', 'U') AND H.id_periodo = @Periodo and T.id_producto is not null&#xA;&#xA;Drop table #Personas&#xA;DROP TABLE #AfiliadoPersona&#xA;DROP TABLE #CuentasSalud&#xA;&#xA;/* Grilla Original */&#xA;&#xA;UPDATE AUX_H_RECAUDACION_DETALLE&#xA;SET grilla_original = grilla&#xA;WHERE id_periodo = @Periodo and id_fuente_recaudacion = 3&#xA;&#xA;--RECAUDACION&#xA;-- Busco las personas que tengan supra y las inserto en la temporal&#xA;Select R.afiliado, R.id_persona Into #AfiliadoPersona2&#xA;From AUX_H_RECAUDACION_DETALLE R Inner join D_PRODUCTOS P On (R.id_producto_original=P.id_producto)&#xA;Where P.id_clase_producto IN ('G', 'U') and id_periodo = @Periodo and rcosto3 = 1&#xA;and id_fuente_recaudacion = 3&#xA;Group by R.afiliado, R.id_persona&#xA;&#xA;-- Busco los productos de Salud para los registros obtenidos anteriormente&#xA;Select R.afiliado, R.id_persona, R.id_producto_original, R.id_subproducto_original, R.id_plan_producto_original, R.grilla Into #CuentasSalud2&#xA;From AUX_H_RECAUDACION_DETALLE R Inner join D_PRODUCTOS P On (R.id_producto_original=P.id_producto)&#xA;Inner join #AfiliadoPersona2 A On (R.afiliado=A.afiliado and R.id_persona=A.id_persona)&#xA;Where P.id_clase_producto IN ('S') and id_periodo = @Periodo&#xA;and id_fuente_recaudacion = 3&#xA;Group by R.afiliado, R.id_persona, R.id_producto_original, R.id_subproducto_original, R.id_plan_producto_original, R.grilla &#xA;&#xA;-- Actualizo producto, subproducto y plan con los datos obtenidos en el paso anterior.&#xA;Update AUX_H_RECAUDACION_DETALLE&#xA;Set grilla = C.grilla&#xA;From AUX_H_RECAUDACION_DETALLE R &#xA;Inner join #CuentasSalud2 C On (R.afiliado=C.afiliado and R.id_persona=C.id_persona and R.id_plan_producto=C.id_plan_producto_original and R.id_producto=C.id_producto_original)&#xA;Inner join D_PRODUCTOS P On (R.id_producto_original=P.id_producto)&#xA;Where R.id_periodo = @Periodo AND P.id_clase_producto IN ('G', 'U')&#xA;and id_fuente_recaudacion = 3&#xA;&#xA;&#xA;-- Buscamos incosistencias que se dan por las personas que no tienen salud, pero que no llego recaudacion por el planb de salud&#xA;Select id_persona into #NoActualizado&#xA;from AUX_H_RECAUDACION_DETALLE R where not exists (select id_producto,id_plan_producto,grilla from D_GRILLAS G where (R.grilla=G.grilla and R.id_producto=G.id_producto and R.id_plan_producto=G.id_plan_producto))&#xA;and rcosto3 = 1 and R.id_periodo = @Periodo&#xA;and id_fuente_recaudacion = 3&#xA;group by id_persona, afiliado&#xA;&#xA;&#xA;-- buscamos del stock la grilla de salud que se corresponde para ese afiliado y plan&#xA;Select R.id_persona, R.id_plan_producto, R.grilla Into #Datos&#xA;From AUX_H_RECAUDACION_DETALLE R Inner join #NoActualizado A On (R.id_persona=A.id_persona)&#xA;Where id_periodo = @Periodo &#xA;Group by R.afiliado, R.id_plan_producto, R.id_persona, R.grilla&#xA;&#xA;Update AUX_H_RECAUDACION_DETALLE&#xA;Set grilla = C.grilla&#xA;From AUX_H_RECAUDACION_DETALLE R &#xA;Inner join #Datos C On (R.id_persona=C.id_persona and R.id_plan_producto=C.id_plan_producto)&#xA;Inner join D_PRODUCTOS P On (R.id_producto_original=P.id_producto)&#xA;Where R.id_periodo = @Periodo AND P.id_clase_producto IN ('G', 'U') and id_fuente_recaudacion = 3&#xA;&#xA;&#xA;DROP TABLE #AfiliadoPersona2&#xA;DROP TABLE #CuentasSalud2&#xA;drop table #NoActualizado&#xA;drop table #Datos" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Recaudaciones_PROYECTO_EMPRESAS  y Linea Empresa Nuevo"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Tarea Ejecutar SQL"
      DTS:DTSID="{0664CE14-5E92-43BB-B504-48D050B4CC19}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Recaudaciones_PROYECTO_EMPRESAS  y Linea Empresa Nuevo"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{E98BA7A5-A37B-425A-9974-434BB6F83FD9}"
          SQLTask:SqlStatementSource="&#xA;/* Marcas Proyecto Empresa */&#xA;&#xA;Declare @Periodo int = (select max(periodo) from Consultas_DW.dbo.AUX_H_OSPEGAP_TABLA_EXCEL)&#xA;&#xA;UPDATE AUX_H_RECAUDACION_DETALLE&#xA;set id_factura_A_E_rec = null,&#xA;id_empresa_PE_rec = null,&#xA;id_tipo_entidad_PE_rec = null,&#xA;id_marca_PE_rec = null,&#xA;id_convenio_especial_rec = null&#xA;where id_periodo = @Periodo and id_fuente_recaudacion = 3&#xA;&#xA;&#xA;-- PRIMER BARRIDO POR CLAVE CTA/SCTA/SECUENCIA Y PERIODO UNO A UNO&#xA;UPDATE AUX_H_RECAUDACION_DETALLE&#xA;set id_factura_A_E_rec = S.id_factura_A_E,&#xA;id_empresa_PE_rec = S.id_empresa_PE,&#xA;id_tipo_entidad_PE_rec = S.id_tipo_entidad_PE,&#xA;id_marca_PE_rec = S.id_marca_PE,&#xA;id_convenio_especial_rec = S.id_convenio_especial&#xA;FROM AUX_H_RECAUDACION_DETALLE R &#xA;INNER JOIN H_COMER_STOCK_AFILIA S ON (R.afiliado = S.afiliado and R.subnumero = S.subnumero and R.secuencia = S.secuencia AND R.id_periodo=S.id_periodo)&#xA;WHERE R.id_periodo = @Periodo  and id_fuente_recaudacion = 3&#xA;&#xA;-- BUSCAMOS MAXIMO PERIODO DE STOCK CON TOPE AL QUE SE ESTA ACTUALIZANDO PARA LA CLAVE EN CUESTION&#xA;SELECT MAX(S.id_periodo) id_periodo, S.afiliado,S.subnumero,S.secuencia &#xA;INTO #TEMP &#xA;FROM H_COMER_STOCK_AFILIA S INNER JOIN AUX_H_RECAUDACION_DETALLE R ON (R.afiliado = S.afiliado and R.subnumero = S.subnumero and R.secuencia = S.secuencia)&#xA;WHERE R.id_marca_PE_rec is null and S.id_periodo &lt;= @Periodo  and id_fuente_recaudacion = 3&#xA;AND R.id_periodo = @Periodo and  S.id_periodo &gt; 201512&#xA;GROUP BY S.afiliado,S.subnumero,S.secuencia&#xA;&#xA;SELECT DISTINCT id_periodo, S.afiliado,S.subnumero,S.secuencia, id_tipo_entidad_PE, id_empresa_PE, id_marca_PE, id_factura_A_E, id_convenio_especial &#xA;into #STOCK &#xA;FROM H_COMER_STOCK_AFILIA S&#xA;WHERE EXISTS (SELECT * FROM #TEMP T WHERE T.afiliado = S.afiliado and T.subnumero = S.subnumero and T.secuencia = S.secuencia and S.id_periodo=T.id_periodo)&#xA;and id_periodo &gt;= 201512&#xA;&#xA;-- SEGUNDO BARRIDO CON CLAVE CTA/SCTA/SECUENCIA Y PERIODO MAXIMO DE STOCK&#xA;UPDATE AUX_H_RECAUDACION_DETALLE&#xA;set id_factura_A_E_rec = S.id_factura_A_E,&#xA;id_empresa_PE_rec = S.id_empresa_PE,&#xA;id_tipo_entidad_PE_rec = S.id_tipo_entidad_PE,&#xA;id_marca_PE_rec = S.id_marca_PE,&#xA;id_convenio_especial_rec = S.id_convenio_especial&#xA;FROM AUX_H_RECAUDACION_DETALLE R &#xA;INNER JOIN #STOCK S ON (R.afiliado = S.afiliado and R.subnumero = S.subnumero and R.secuencia = S.secuencia)&#xA;WHERE R.id_periodo = @Periodo  and id_fuente_recaudacion = 3&#xA;AND R.id_marca_PE_rec IS NULL&#xA;AND  S.id_periodo &gt;= 201512&#xA;DROP TABLE #TEMP&#xA;DROP TABLE #STOCK&#xA;&#xA;&#xA;--PROCEDEMOS A HACER ACTUALIZACIONES AHORA SOLO POR LA CLAVE DE PERSONA.&#xA;&#xA;-- Actualiza empresa y tipo de entidad donde encuentre persona y periodo igual.&#xA;UPDATE AUX_H_RECAUDACION_DETALLE&#xA;set id_factura_A_E_rec = S.id_factura_A_E,&#xA;id_empresa_PE_rec = S.id_empresa_PE,&#xA;id_tipo_entidad_PE_rec = S.id_tipo_entidad_PE,&#xA;id_marca_PE_rec = S.id_marca_PE,&#xA;id_convenio_especial_rec = S.id_convenio_especial&#xA;FROM AUX_H_RECAUDACION_DETALLE R INNER JOIN H_COMER_STOCK_AFILIA S ON (R.id_persona=S.id_persona AND R.id_periodo=S.id_periodo)&#xA;WHERE R.id_periodo = @Periodo AND R.id_marca_PE_rec is null  and id_fuente_recaudacion = 3&#xA;and S.id_periodo &gt;= 201512&#xA;&#xA;-- Se busca el maximo periodo donde estuvo una persona para obtener el tipo de entidad y la empresa.&#xA;&#xA;SELECT MAX(S.id_periodo) id_periodo, S.id_persona &#xA;INTO #TEMP_PERS&#xA;FROM H_COMER_STOCK_AFILIA S INNER JOIN AUX_H_RECAUDACION_DETALLE R ON (R.id_persona=S.id_persona)&#xA;WHERE R.id_marca_PE_rec is null and S.id_periodo &lt;= @Periodo&#xA;AND R.id_periodo = @Periodo  and id_fuente_recaudacion = 3&#xA;and S.id_periodo &gt;= 201512&#xA;GROUP BY S.id_persona&#xA;&#xA;SELECT DISTINCT id_periodo, id_persona, id_tipo_entidad_PE, id_empresa_PE, id_marca_PE, id_factura_A_E, id_convenio_especial &#xA;into #STOCK_PERS &#xA;FROM H_COMER_STOCK_AFILIA S&#xA;WHERE EXISTS (SELECT * FROM #TEMP_PERS T WHERE S.id_persona=T.id_persona and S.id_periodo=T.id_periodo)&#xA;&#xA;-- Se actualiza ambos datos con el ultimo periodo donde se encontro cada persona.&#xA;&#xA;UPDATE AUX_H_RECAUDACION_DETALLE&#xA;set id_factura_A_E_rec = S.id_factura_A_E,&#xA;id_empresa_PE_rec = S.id_empresa_PE,&#xA;id_tipo_entidad_PE_rec = S.id_tipo_entidad_PE,&#xA;id_marca_PE_rec = S.id_marca_PE,&#xA;id_convenio_especial_rec = S.id_convenio_especial&#xA;FROM AUX_H_RECAUDACION_DETALLE R &#xA;INNER JOIN #STOCK_PERS S ON (R.id_persona=S.id_persona)&#xA;WHERE R.id_periodo = @Periodo  and id_fuente_recaudacion = 3&#xA;AND R.id_marca_PE_rec IS NULL&#xA;&#xA;-- Lo que quedo en nulo es porque nunca se encontraron, por lo tanto se le fuerzan estos datos.&#xA;UPDATE AUX_H_RECAUDACION_DETALLE &#xA;set id_factura_A_E_rec = 'A',&#xA;id_empresa_PE_rec = 0,&#xA;id_tipo_entidad_PE_rec = 'I',&#xA;id_marca_PE_rec = 7,&#xA;id_convenio_especial_rec = 0&#xA;WHERE id_marca_PE_rec is null&#xA;and id_periodo = @Periodo and id_fuente_recaudacion = 3&#xA;&#xA;DROP TABLE #TEMP_PERS&#xA;DROP TABLE #STOCK_PERS&#xA;&#xA;&#xA;/* Actualización Linea Empresa */&#xA;&#xA;--ACTUALIZA CONVENIOS&#xA;&#xA;UPDATE AUX_H_RECAUDACION_DETALLE&#xA;set id_convenio = null,&#xA;id_tipo_entidad_convenio = null&#xA;where id_periodo = @Periodo and id_fuente_recaudacion = 3&#xA;&#xA;&#xA;-- PRIMER BARRIDO POR CLAVE CTA/SCTA/SECUENCIA Y PERIODO UNO A UNO&#xA;UPDATE AUX_H_RECAUDACION_DETALLE&#xA;set id_convenio = S.id_convenio,&#xA;id_tipo_entidad_convenio = S.id_tipo_entidad_convenio&#xA;FROM AUX_H_RECAUDACION_DETALLE R &#xA;INNER JOIN H_COMER_STOCK_AFILIA S ON (R.afiliado = S.afiliado and R.subnumero = S.subnumero and R.secuencia = S.secuencia AND R.id_periodo=S.id_periodo)&#xA;WHERE R.id_periodo = @Periodo and id_fuente_recaudacion = 3&#xA;&#xA;-- BUSCAMOS MAXIMO PERIODO DE STOCK CON TOPE AL QUE SE ESTA ACTUALIZANDO PARA LA CLAVE EN CUESTION&#xA;SELECT MAX(S.id_periodo) id_periodo, S.afiliado,S.subnumero,S.secuencia &#xA;INTO #TEMP2 &#xA;FROM H_COMER_STOCK_AFILIA S INNER JOIN AUX_H_RECAUDACION_DETALLE R ON (R.afiliado = S.afiliado and R.subnumero = S.subnumero and R.secuencia = S.secuencia)&#xA;WHERE R.id_convenio is null and S.id_periodo &lt;= @Periodo and id_fuente_recaudacion = 3&#xA;AND R.id_periodo = @Periodo and  S.id_periodo &gt; 201512&#xA;GROUP BY S.afiliado,S.subnumero,S.secuencia&#xA;&#xA;SELECT DISTINCT id_periodo, S.afiliado,S.subnumero,S.secuencia, id_convenio,id_tipo_entidad_convenio&#xA;into #STOCK2&#xA;FROM H_COMER_STOCK_AFILIA S&#xA;WHERE EXISTS (SELECT * FROM #TEMP2 T WHERE T.afiliado = S.afiliado and T.subnumero = S.subnumero and T.secuencia = S.secuencia and S.id_periodo=T.id_periodo)&#xA;and id_periodo &gt;= 201512&#xA;&#xA;-- SEGUNDO BARRIDO CON CLAVE CTA/SCTA/SECUENCIA Y PERIODO MAXIMO DE STOCK&#xA;&#xA;UPDATE AUX_H_RECAUDACION_DETALLE&#xA;set id_convenio = S.id_convenio,&#xA;id_tipo_entidad_convenio = S.id_tipo_entidad_convenio&#xA;FROM AUX_H_RECAUDACION_DETALLE R &#xA;INNER JOIN #STOCK2 S ON (R.afiliado = S.afiliado and R.subnumero = S.subnumero and R.secuencia = S.secuencia)&#xA;WHERE R.id_periodo = @Periodo and id_fuente_recaudacion = 3&#xA;AND R.id_convenio IS NULL&#xA;AND  S.id_periodo &gt;= 201512&#xA;&#xA;DROP TABLE #TEMP2&#xA;DROP TABLE #STOCK2&#xA;&#xA;&#xA;--PROCEDEMOS A HACER ACTUALIZACIONES AHORA SOLO POR LA CLAVE DE PERSONA.&#xA;&#xA;-- Actualiza empresa y tipo de entidad donde encuentre persona y periodo igual.&#xA;UPDATE AUX_H_RECAUDACION_DETALLE&#xA;set id_convenio = S.id_convenio,&#xA;id_tipo_entidad_convenio = S.id_tipo_entidad_convenio&#xA;FROM AUX_H_RECAUDACION_DETALLE R INNER JOIN H_COMER_STOCK_AFILIA S ON (R.id_persona=S.id_persona AND R.id_periodo=S.id_periodo)&#xA;WHERE R.id_periodo = @Periodo AND R.id_convenio is null and id_fuente_recaudacion = 3&#xA;and S.id_periodo &gt;= 201512&#xA;&#xA;-- Se busca el maximo periodo donde estuvo una persona para obtener el tipo de entidad y la empresa.&#xA;&#xA;SELECT MAX(S.id_periodo) id_periodo, S.id_persona &#xA;INTO #TEMP_PERS2&#xA;FROM H_COMER_STOCK_AFILIA S INNER JOIN AUX_H_RECAUDACION_DETALLE R ON (R.id_persona=S.id_persona)&#xA;WHERE R.id_convenio is null and S.id_periodo &lt;= @Periodo&#xA;AND R.id_periodo = @Periodo and id_fuente_recaudacion = 3&#xA;and S.id_periodo &gt;= 201512&#xA;GROUP BY S.id_persona&#xA;&#xA;SELECT DISTINCT id_periodo, id_persona, id_convenio,id_tipo_entidad_convenio&#xA;into #STOCK_PERS2 &#xA;FROM H_COMER_STOCK_AFILIA S&#xA;WHERE EXISTS (SELECT * FROM #TEMP_PERS2 T WHERE S.id_persona=T.id_persona and S.id_periodo=T.id_periodo)&#xA;&#xA;-- Se actualiza ambos datos con el ultimo periodo donde se encontro cada persona.&#xA;&#xA;UPDATE AUX_H_RECAUDACION_DETALLE&#xA;set id_convenio = S.id_convenio,&#xA;id_tipo_entidad_convenio = S.id_tipo_entidad_convenio&#xA;FROM AUX_H_RECAUDACION_DETALLE R &#xA;INNER JOIN #STOCK_PERS2 S ON (R.id_persona=S.id_persona)&#xA;WHERE R.id_periodo = @Periodo&#xA;AND R.id_convenio IS NULL&#xA;&#xA;-- Lo que quedo en nulo es porque nunca se encontraron, por lo tanto se le fuerzan estos datos.&#xA;&#xA;UPDATE AUX_H_RECAUDACION_DETALLE &#xA;set id_convenio = 0,&#xA;id_tipo_entidad_convenio = 'I'&#xA;WHERE id_convenio is null&#xA;and id_periodo = @Periodo&#xA;&#xA;DROP TABLE #TEMP_PERS2&#xA;DROP TABLE #STOCK_PERS2&#xA;&#xA;&#xA;&#xA;select distinct id_convenio,id_tipo_entidad_convenio,0 as id_periodo_maximo into #convenios_nuevos &#xA;from AUX_H_RECAUDACION_DETALLE h&#xA;where  not exists  (select id_convenio ,id_tipo_entidad_convenio &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;from H_CONVENIOS_EMPRESAS C where id_periodo = @periodo&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;and h.id_periodo = &#x9;c.id_periodo and h.id_convenio = c.id_convenio and h.id_tipo_entidad_convenio = c.id_tipo_entidad_convenio) &#xA;&#x9;&#x9;and id_periodo = @periodo&#xA;&#xA;update #convenios_nuevos&#xA;set id_periodo_maximo = maximo_periodo from&#xA;#convenios_nuevos c inner join (&#xA;select t.id_convenio, max(h.id_periodo) as maximo_periodo from #convenios_nuevos t inner join H_CONVENIOS_EMPRESAS h on t.id_convenio = h.id_convenio&#xA;&#x9;and t.id_tipo_entidad_convenio = h.id_tipo_entidad_convenio&#xA;group by t.id_convenio) A on c.id_convenio = a.id_convenio&#xA;&#xA;&#xA;insert into H_CONVENIOS_EMPRESAS&#xA;select @periodo,c.id_convenio,c.id_tipo_entidad_convenio,e.id_subtipo_venta,id_rango_stock,id_rango_costo,id_blindaje,interes_comercial,es_mutual&#xA;,id_holding,'Reca' from #convenios_nuevos c inner join H_CONVENIOS_EMPRESAS e&#xA;on  c.id_convenio = e.id_convenio and c.id_periodo_maximo = e.id_periodo and c.id_tipo_entidad_convenio = e.id_tipo_entidad_convenio&#xA;&#xA;Drop table #convenios_nuevos&#xA;&#xA;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Restricción]"
      DTS:CreationName=""
      DTS:DTSID="{61D4DB53-A2E3-4841-83C4-816F3D0CF2F0}"
      DTS:From="Package\Borra AUX_H_OSPEGAP_TABLA_EXCEL"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Restricción"
      DTS:To="Package\Data Flow Task" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Restricción 1]"
      DTS:CreationName=""
      DTS:DTSID="{F7B88438-2A8A-4ED5-9BCD-FDEBCC9594DF}"
      DTS:From="Package\Data Flow Task"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Restricción 1"
      DTS:To="Package\Incorpora la Info en AUX_H_RECAUDACION_DETALLE" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Restricción 2]"
      DTS:CreationName=""
      DTS:DTSID="{0D7FB395-3AB1-49C4-B7CB-D37CB4464EAC}"
      DTS:From="Package\Incorpora la Info en AUX_H_RECAUDACION_DETALLE"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Restricción 2"
      DTS:To="Package\Actualización Recaudaciones AUX_H_RECAUDACION_DETALLE" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Restricción 3]"
      DTS:CreationName=""
      DTS:DTSID="{80CD5E7A-3CDB-4A8F-A04C-EB6A0D6759F0}"
      DTS:From="Package\Actualización Recaudaciones AUX_H_RECAUDACION_DETALLE"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Restricción 3"
      DTS:To="Package\Recaudaciones_ACTUALIZACION_COSTO1234 Nuevo" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Restricción 4]"
      DTS:CreationName=""
      DTS:DTSID="{00CFFD2D-1F8D-4B55-BEB4-FE7350CD4478}"
      DTS:From="Package\Recaudaciones_ACTUALIZACION_COSTO1234 Nuevo"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Restricción 4"
      DTS:To="Package\Recaudaciones_PROYECTO_EMPRESAS  y Linea Empresa Nuevo" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Restricción 5]"
      DTS:CreationName=""
      DTS:DTSID="{B334FED5-3C34-4B30-BAED-AAFBB1897466}"
      DTS:From="Package\Recaudaciones_PROYECTO_EMPRESAS  y Linea Empresa Nuevo"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Restricción 5"
      DTS:To="Package\Inserta en  H_RECAUDACION_DETALLE Nuevo" />
  </DTS:PrecedenceConstraints>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--Esta sección CDATA contiene la información de diseño del paquete. Esta sección incluye información como, por ejemplo, las coordenadas (x,y), el ancho y el alto.-->
<!--Si edita manualmente esta sección y comete un error, puede eliminarlo. -->
<!--El paquete podrá cargarse normalmente, pero se perderá la información de diseño anterior y el diseñador reorganizará los elementos automáticamente en la superficie de diseño.-->
<Objects
  Version="8">
  <!--Cada uno de los nodos siguientes contiene propiedades que no afectan al comportamiento en tiempo de ejecución.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="16" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="405,42"
          Id="Package\Actualización Recaudaciones AUX_H_RECAUDACION_DETALLE"
          TopLeft="35,277" />
        <NodeLayout
          Size="288,42"
          Id="Package\Borra AUX_H_OSPEGAP_TABLA_EXCEL"
          TopLeft="285,60" />
        <NodeLayout
          Size="155,42"
          Id="Package\Data Flow Task"
          TopLeft="348,131" />
        <NodeLayout
          Size="355,42"
          Id="Package\Incorpora la Info en AUX_H_RECAUDACION_DETALLE"
          TopLeft="249,207" />
        <NodeLayout
          Size="319,42"
          Id="Package\Inserta en  H_RECAUDACION_DETALLE Nuevo"
          TopLeft="79,516" />
        <NodeLayout
          Size="353,42"
          Id="Package\Recaudaciones_ACTUALIZACION_COSTO1234 Nuevo"
          TopLeft="54,354" />
        <NodeLayout
          Size="413,42"
          Id="Package\Recaudaciones_PROYECTO_EMPRESAS  y Linea Empresa Nuevo"
          TopLeft="30,435" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Restricción]"
          TopLeft="427.25,102">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,29"
              Start="0,0"
              End="0,21.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,21.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Restricción 1]"
          TopLeft="426,173">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,34"
              Start="0,0"
              End="0,26.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,26.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Restricción 2]"
          TopLeft="426.5,249">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-189,28"
              Start="0,0"
              End="-189,20.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,10" />
                  <mssgle:CubicBezierSegment
                    Point1="0,10"
                    Point2="0,14"
                    Point3="-4,14" />
                  <mssgle:LineSegment
                    End="-185,14" />
                  <mssgle:CubicBezierSegment
                    Point1="-185,14"
                    Point2="-189,14"
                    Point3="-189,18" />
                  <mssgle:LineSegment
                    End="-189,20.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Restricción 3]"
          TopLeft="234,319">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,35"
              Start="0,0"
              End="0,27.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,27.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Restricción 4]"
          TopLeft="233.5,396">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,39"
              Start="0,0"
              End="0,31.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,31.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Restricción 5]"
          TopLeft="237.5,477">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,39"
              Start="0,0"
              End="0,31.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,31.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </Package>
  <TaskHost
    design-time-name="Package\Data Flow Task">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="177,42"
          Id="Package\Data Flow Task\OLE DB Destination"
          TopLeft="218,180" />
        <NodeLayout
          Size="144,42"
          Id="Package\Data Flow Task\Excel Source"
          TopLeft="231,71" />
        <EdgeLayout
          Id="Package\Data Flow Task.Paths[Excel Source Output]"
          TopLeft="304.75,113">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,67"
              Start="0,0"
              End="0,59.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,59.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
  <PipelineComponentMetadata
    design-time-name="Package\Data Flow Task\Excel Source">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <PipelineComponentMetadata
    design-time-name="Package\Data Flow Task\OLE DB Destination">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>